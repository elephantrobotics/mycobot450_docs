{"./":{"url":"./","title":"Introduction","keywords":"","body":"myCobot Pro 450 全谐波协作机械臂入门首选 核心文档 本文档包含从产品简介、详细的技术参数到用户须知和产品开发指导的全面信息。文档将深入介绍myCobot Pro 450机械臂的基础功能，并提供软件开发指南，展示成功的应用案例，帮助您了解如何将myCobot Pro 450有效整合进各种应用中。此外，我们还提供了丰富的支持与服务信息，确保您在遇到任何技术挑战时能够获得必要的帮助。 文档说明 根据您的需求以及myCobot Pro 450应用程序开发的专业水平，您可以选择从头到尾遵循该顺序进行阅读，或将其用作独立参考。您可以随时使用左侧的侧边栏导航跳转到本文档的任何部分，全文共分为以下五大板块： 产品信息 产品信息板块将为您提供机械臂的基本概述，包括主要功能、产品参数和电气特性等详细的技术规格，帮助您快速了解产品的基本特性和使用环境。此外，这一部分将详细介绍产品的应用实例和支持的扩展开发，为您提供必要的开发指南和资源。文末将给出相关购买链接和渠道，方便您进行购买。 基础设置 本章节是使用本产品的每一位用户必须仔细阅读的重要部分。它涵盖了关于产品使用、运输、储存及维护的关键须知，旨在确保用户在操作产品时的安全性和效率。此外，本章节也详细说明了因未遵循这些指南而可能导致的产品故障或损害的责任划分。 功能与应用 功能与应用板块详细介绍了机械臂的基础功能和软件使用方法，包括myBlockly使用说明和系统与固件更新。软件开发指南提供了基于不同开发环境的指导，如Python和ROS2，支持技术开发者进行应用扩展。通过展示成功的应用案例和提供配套资源，为您提供实践参考和必要的支持材料，以便更深入地了解和使用产品。 支持与服务 支持与服务板块将为您提供全面的故障排除指南和购买后的服务信息，如保修和服务条款，帮助您在遇到问题时能够快速解决，并确保您了解购买后的权利和义务。此外，'关于我们'部分加强了用户对myCobot 系列产品设计及制造商的了解，旨在建立信任和品牌忠诚。 致谢 我们非常感谢您花时间阅读myCobot Pro 450 用户手册。我们希望本文档能够帮助您更好地了解并有效使用这款机器人，从而激发您的创造力。如果您有任何疑问或需要进一步帮助，请随时联系我们的客户支持团队。我们期待看到您使用 myCobot Pro 450完成创新项目，并欢迎您加入我们快速发展的开发者社区。 文档目录 myCobot-Pro-450 gitbook Introduction 产品信息 1 产品介绍 2 产品特性 基础设施 3 用户须知 3.1 安全须知 3.2 运输和储存 3.3 维护和保养 3.4 常见问题解决 3.4.1 软件 3.4.2 硬件 3.4.3 其他 4 首次安装 4.1 产品标准清单 4.2 产品开箱指南 4.3 开机检测指南 功能与应用 5 基础功能 5.1 首次使用 myStudio Pro 5.2 下载和卸载 5.3 接口描述 5.4 常见问题解答 5.5 myBlockly 5.5.1 首次使用 5.5.2 blockly主界面介绍 5.5.3 小案例 5.5.4 快速填入数据 5.5.5 快速移动 5.5.6 学习使用坐标控制 5.5.7 单步执行 5.5.8 程序控制 5.5.9 路点 5.5.10 夹爪的使用 5.6 快速移动 5.7 固件与应用 5.8 设置 6 软件开发指南 6.1 基于python 开发使用 6.1.1 环境搭建 6.1.2 API说明 6.1.3 关节控制 6.1.4 坐标控制 6.1.5 IO控制 6.1.6 夹爪控制 6.1.7 机器人异常处理 6.2 基于 ROS1 开发使用 6.2.1 环境搭建 6.2.2 ROS 基础 6.2.3 Rivz 使用 6.2.4 基本功能案例 6.3 基于 ROS2 开发使用 6.3.1 环境搭建 6.3.2 ROS2 基础 6.3.3 Rviz2 使用 6.3.4 基本功能案例 6.4 基于C++ 开发使用 6.5 基于通信协议包开发 7 成功案例 8 配套资源 8.1 产品资料 8.2 产品图纸 8.3 系统资料 8.4 宣传资料 支持与服务 9 关于我们 10 周边配件 10.1 力控夹爪 10.2 气动夹爪 10.3 自适应夹爪 10.4 手机支架 10.5 3D相机 10.6 独头吸泵 10.7 模块化吸盘 10.8 摄像头法兰 10.9 笔夹 致谢 11 致谢 下一章 → "},"1-ProductInformation/1-ProductIntroduction/1-ProductIntroduction.html":{"url":"1-ProductInformation/1-ProductIntroduction/1-ProductIntroduction.html","title":"1 产品介绍","keywords":"","body":"产品简介 1. 产品概述 myCobot Pro 450 全谐波协作机械臂入门首选 1.1 产品简介 myCobot Pro 450 是一款面向教育教学、科学实验、商业展示及轻工业自动化场景的小型化全谐波6轴协作机械臂。其核心功能丰富多样，具备精准的操作能力，工作半径可达 450 毫米，有效负载为 1 公斤，重复定位精度高达 ±0.1 毫米，能够出色完成各类轻负载且对精度要求高的任务。 在控制方面，它依托内置工业级核心控制板和自研控制系统，可便捷连接电脑、平板、手机等终端设备。预装的拖拽式编程软件与快速调试接口，让零基础用户也能轻松上手操作。同时，工具端的集成化接口设计消除了连接夹爪时的线缆困扰，底座新增的 CAN、RS485 接口为二次开发和功能拓展提供了广阔空间。其核心价值在于为不同领域的用户提供了一款高性能、易操作且扩展性强的协作机械臂解决方案，助力提升工作效率与创新能力。 1.2 设计理念 设计 myCobot Pro 450 的初衷，是为了满足日益增长的多样化应用需求。在教育领域，期望帮助学生更直观地接触和学习机器人技术，培养实践操作能力和创新思维；在科研场景中，为科研人员提供稳定、精准的实验操作工具，加速科研进程；在商业展示方面，打造具有吸引力的互动体验装置，提升展示效果。 1.3 设计目标 设计目标 描述 应用场景及特点 满足多样化高精度操作需求 450mm 工作半径覆盖标准台面，1kg 负载支持多末端执行器，±0.1mm 重复定位精度控偏差。 - 教育科研场景：可用于实验数据采集，其高精度能保证数据的准确性和可靠性；- 轻工业自动化场景：可进行精细物料处理，如电子元件的安装、分拣等工作，提升生产效率与产品质量 降低使用门槛与技术壁垒 多终端连接，预装拖拽编程软件，4 种工业级连接及多标准协议，零基础易上手。 - 教育教学场景：学生可轻松通过终端设备连接并操作机械臂，借助编程软件学习机器人编程知识，提升实践能力；- 商业场景：企业人员无需复杂的技术培训，就能利用该机械臂进行方案预研与验证，降低技术使用成本。 促进创新应用与拓展 接入多模态及具身智能大模型，配视觉与 语音控制，提供 4 套开箱方案，接口支持二次开发。 - 科研场景：研究人员能基于大模型和具身智能能力，开展机器人智能决策、自主运动策略等前沿课题研究；- 商业展示场景：利用多模态交互和独特应用方案，打造新颖的互动展示体验，吸引客户关注，提升品牌形象。 1.4 产品特点 产品特点 特点描述 超长待机 实验室验证寿命 > 10,000小时 (注：实际工况可能影响)，持久稳定，教学科研更省心。 商用级安全关节 集成谐波减速器 + 伺服电机 + 关节刹车 + 控制器，断电瞬间自锁，安全可靠，人机协作更安心。 一体精工，坚固可靠 全金属一体化高温压铸机身，结构强度统一，内置控制器，告别外置电箱与复杂线缆，简洁高效。 万“物”互联 支持 4 种工业级连接 (WLAN/EtherNet/RS485/CAN)，协议丰富 (Socket-TCP/Modbus/CANOpen)，轻松融入现有系统，工业4.0接入无忧。 精准高效，轻量之选 工作半径： 450mm, 负载： 1kg, 精度： ±0.1mm, 自重： 零门槛操控 myCobot Pro 跨平台控制中心 - 浏览器直连 (输入IP即可)，无需安装！集成：Blockly图形化编程 & 拖动示教：小白秒变编程高手。快捷移动控制 & 状态监控。支持 Modbus/VNC/Socket 等多连接配置。一站式固件升级与管理。 开源生态，无限可能 提供完整 URDF 模型，开放关节电机底层接口 (位置/速度/加速度/电流等状态可查)，助力运动学/动力学仿真建模 (ROS2, Isaac Sim, MuJoCo)。开放90+ 标准控制接口库 (Python & C++)，覆盖状态查询、关节/笛卡尔空间运动控制，开发者友好，高效赋能二次开发。 大模型“灵魂”注入 支持接入多模态大模型 (如 DeepSeek、ChatGPT)，实现语音指令 + 视觉识别的智能抓取，交互更直观。支持接入具身智能大模型 (如 Lerobot)，赋能机器人自主运动策略学习与部署，探索智能体前沿。 炫酷应用套件 提供 3 套开箱即用方案 - 3D视觉无序分拣、高精度写字绘画、移动复合机器人，快速搭建教学/实验/展示场景。 2. 产品应用 2.1 用户群体 教育工作者与学员 适用于高等院校、职业院校的机器人工程、人工智能、自动化控制、机电一体化等专业的课程教学、实验实训与技能竞赛，为师生提供从理论到实践的理想平台。 科研人员与开发者 面向科研院所、企业研发部门及广大机器人爱好者，提供稳定的硬件平台和深度的软件开放接口，助力算法验证、原型开发与前沿技术探索。 商业与工业用户 适用于商业展厅的产品互动展示、轻工业环境中的小批量精密生产、样品分选、质量检测等任务，提供高效、可靠的自动化解决方案。 2.2 应用场景 用户群体 核心应用场景（开箱即用） 扩展应用场景 (无限可能) 教育领域的教师和学生 - 机器人基础教学：机械结构、运动学、轨迹规划原理实验。- 拖动示教编程：手工工艺模仿、动作录制与复现。- 图形化编程入门：使用Blockly进行逻辑思维与编程基础训练。 - 高级算法开发：基于Python/C++/ROS 2进行机器视觉、路径规划、力控等算法研究。- 人工智能集成：开发语音控制、智能视觉识别抓取等AI综合应用项目。 创客和技术开发者 - 快速原型验证 (PoC)：验证自动化流程或抓取方案的可行性。- 高精度仿真：提供精准URDF模型，无缝对接Isaac Sim, MuJoCo等仿真环境。 - 前沿领域探索：作为实体平台，用于具身智能、强化学习、人机协作等前沿课题研究。- 复合系统开发：与AGV/AMR移动底盘集成，构建移动操作(Mobile Manipulation)机器人。 商业演示和轻工业 - 自动化商业展示：实现7x24小时自动化产品展示、与观众进行趣味交互。- 精密作业：高精度写字画画、电路板点位检测、样品分选。- 3D视觉分拣：结合3D相机实现杂乱环境下的无序工件抓取与分拣。 - 产线自动化集成：通过Modbus/TCP/IP等协议与PLC通信，集成入小型产线执行上下料、精密装配等任务。- 实验室自动化：替代人工执行重复性实验操作，如样品移液、培养皿搬运。 3. 支持的扩展开发 mycobot 系列机械臂在教育和科研领域中极具价值，特别是在 Python 和 ROS（Robot Operating System)这两个广泛使用的开发环境中。这些环境提供了强大的支持，使得 mycobot 系列产品能够广泛应用于机器学习、人工智能研究、复杂运动控制以及视觉处理任务中。同时搭配自适应夹爪、摄像头法兰、吸泵等数十种配件，可以尽情发挥myCobot的创意想法。 Python 机器人支持Python，具备完善的Python API库。 可通过Python控制机器人的关节角度、坐标、夹持器等。 ROS 支持 ROS2 版本，提供 RVIZ2 仿真环境支持。允许用户实时显示机械臂和采集机械臂的状态信息，使得myCobot Pro 450适合 ROS 初学者和教育用途。 硬件接口 包括 IO、USB 等，方便连接各种传感器和执行器。 软件库 提供丰富的开源库和 API 来简化开发过程。 系统兼容性 兼容 Windows、Linux、MacOS，适应多种开发环境。 C++ 使用c++语言，您可以通过我们公司开发的c++动态库，进行自由开发（坐标控制、角度控制、io控制、夹爪控制等），控制我们公司已经研发出来的部分机器人。 myBlockly 既是图形化编程软件又是可视化工具。 用户可以拖拽模块创建程序，这个过程非常类似于搭积木，方便快捷易上手。 4. 购买地址 如果您有兴趣购买该设备，请点击下面的链接：淘宝：https://shop504055678.taobao.comShopify：https://shop.elephantrobotics.com/速卖通：https://elephantrobotics.aliexpress.com/store/1101941423 ← 上一章 | 下一章 → "},"1-ProductInformation/2-ProductFeature/2-ProductFeature.html":{"url":"1-ProductInformation/2-ProductFeature/2-ProductFeature.html","title":"2 产品特性","keywords":"","body":"机器人参数说明 第一章中，我们探讨了产品的卖点及其设计理念，为您提供了对产品高层次理解的全景视角。现在，让我们进入第二章——机器人参数说明。这一章节将是您理解产品技术细节的关键。详细了解这些技术参数，不仅可以帮助您充分认识到我们产品的先进性和实用性，而且还能够确保您能够更有效地利用这些技术来满足您的具体需求。 1. 机器人规格参数 指标 参数 名称 全谐波协作机械臂 型号 myCobot Pro 450 自由度 6 有效负载 1 Kg 工作半径 450mm 重复定位精度 ±0.1mm 重量 电源输入 24V，9.2A 工作温度 0-45℃ 通信 TCP/IP-SocketMODBUSEthernet IP 2. 结构尺寸参数 ！本章以毫米为距离单位，以度为角度单位。 2.1 产品尺寸和工作空间 2.2 关节运动范围 硬件关节运动范围 关节 范围 J1 -360 ~ +360 J2 -135 ~ +135 J3 -135 ~ +135 J4 -150 ~ +150 J5 -360 ~ +360 J6 -360 ~ +360 软件关节运动范围 关节 范围 J1 -165 ~ +165 J2 -120 ~ +120 J3 -158 ~ +158 J4 -165 ~ +165 J5 -165 ~ +165 J6 -175 ~ +175 2.3 孔位安装 机器人底座安装法兰，底座同时兼容乐高科技件安装方式和M4螺丝安装方式。 机器人末端安装法兰，机械臂末端同时兼容乐高科技件孔与螺丝螺纹孔。 3. 电气特性参数 4. 笛卡尔坐标参数 ← 上一章 | 下一章 → "},"2-BasicSettings/3-UserNotes/":{"url":"2-BasicSettings/3-UserNotes/","title":"3 用户须知","keywords":"","body":"用户须知 本节对本产品的每个用户都至关重要，必须仔细阅读。它包括有关产品使用、运输、储存和维护的基本信息，以确保运行期间的安全和效率。此外，它还概述了因不遵守这些准则而导致产品故障或损坏的责任。用户须知》分为几个小节，每个小节针对不同的主题提供详细的指导： 章节摘要 3.1-安全须知包括责任、安全警告标志、一般安全规则、个人安全和应急措施。 3.2-运输和储存 说明包装、运输和长期储存要求以及责任。 3.3-维护和保养提供日常维护指导，以延长产品使用寿命。 3.4-常见问题解决提供快速解决常见问题的导航指南。 通过全面阅读本节内容，用户可以更好地了解如何安全有效地使用产品，最大限度地提高性能和使用寿命。 如果您已经阅读了本章的所有内容，请继续阅读下一章。 ← 上一章 | 下一章 → "},"2-BasicSettings/3-UserNotes/3.1-SafetyInstruction.html":{"url":"2-BasicSettings/3-UserNotes/3.1-SafetyInstruction.html","title":"3.1 安全须知","keywords":"","body":"安全须知 1. 简介 本章详细介绍了有关对大象机器人执行安装、维护和维修工作的人员的常规安全信息。请在搬运、安装和使用前，先充分阅读和理解本章节的内容与注意事项。 2. 危险识别 协作机器人的安全性建立在正确配置和使用机器人的前提上。并且，即使遵守所有的安全指示，操作者所造成的伤害或损伤依然有可能发生。因此，了解机器人使用的安全隐患是非常重要的，有利于防患于未然。 以下表 1-1~3 是使用机器人的情境下可能存在的常见安全隐患 ∶ 表 1-1 危险级安全隐患 1 机器人搬运过程中的错误操作导致的人身伤害或者机器人损伤。 2 未按要求固定机器人，例如螺钉缺少或螺钉未上紧、底座锁付能力不足以稳定支撑机器人进行高速运动等造成机器人倾倒，导致人身伤害或者机器人损伤。 3 未进行机器人的正确安全功能配置，或者少安装了安全防护工具等，造成机器人安全功能未能发挥作用，从而引起危险。 表 1-2 警告级安全隐患 1 调试程序时请勿在机器人运动范围内逗留，不合适的安全配置可能无法避免可能造成人身伤害的碰撞。 2 机器人与其他设备连接可能引发新的危险，需要重新进行全面的风险评估。 3 因工作环境中的其他设备或者机器人末端执行器等尖锐表面造成刮伤、刺伤。 4 机器人是精密机械，踩踏可能造成机器人损伤。 5 夹持不到位或关闭机器人电源、气源前（未确定末端执行器是否牢固夹持物因为失去动力而掉下）未将夹持的物体取下，可能会引起危险，例如末端执行器损坏、人被砸伤等。 6 机器人存在意外移动的风险，在任何情况下，切勿站在机器人任何轴的下方！ 7 机器人是精密机械，搬运时不能平稳放置可能会引起振动，可能会引起机器人内部部件的损伤。 8 机器人与普通机械设备相比自由度更多、运动范围更大，不满足运动范围可能会引起意外的碰撞。 表 1-3 有可能导致触电的安全隐患 1 使用非原装电缆可能会引发未知危险。 2 用电设备接触液体可能导致漏电危险。 3 电气连接错误时可能存在触电隐患。 4 请务必在关闭控制器与相关装置电源并拔出电源插头之后进行更换作业。如果在通电的状态下进行作业，则可能会导致触电或故障。 3. 安全注意事项 使用机械臂时应遵循如下安全规则： 机械臂属于带电设备，非专业人士不得随意更改线路，否则容易给设备或者人身带来伤害。 操作机械臂时，应当严格遵守当地的法规和规范，手册中所描述的安全注意事项及描述的“危险”、 “警告”和“注意”事项仅作为当地安全规范的补充。 请在规定环境范围内使用机械臂，超出机械臂规格及负载条件会缩短产品的使用寿命甚至损坏设备。 负责安装、操作、维护 myCobot 机械臂的人员必须先经过严格培训，了解各种安全注意事项，掌握 正确的操作和维护方法之后，才能操作和维护机器人。 请勿长时间在潮湿环境下使用本产品。本产品为精密电子元器件，长时间潮湿环境工作会损坏设备。 请勿在高温环境下使用本设备。本设备外表面是由光敏树脂为原料制造而成，较高的温度会损坏设备的外壳，导致设备故障。 高腐蚀性清洁不适用于机械臂的清洁，阳极氧化的部件不适用于浸没清洁。 请勿在未安装底座时使用本产品以避免损伤本设备或意外发生，本产品应在固定且周围无障碍物的环境下使用。 请勿使用其他电源适配器供电。如因使用不符合标准的适配器导致设备损坏将不在售后服务内。 请勿拆解，拆开，拧开机械臂的螺丝或外壳等。如若拆开，则无法提供保修服务。 未经专业培训人员不得擅自维修故障产品，不得擅自拆卸机械臂，若产品出现故障，请及时联系 myCobot 技术支持工程师。 若该产品报废，请遵守相关法律正确处理工业废料，保护环境。 儿童使用过程中必须有人在旁边监控，运行完成时及时关闭设备。 机器人在运动过程中，请勿将手伸入机械臂运动范围，当心碰伤。 严禁更改或者去除和修改机械臂以及相关设备的铭牌、说明、图标和标记。 搬运、安装过程中请务必小心，应按包装箱上的提示注意轻放、按箭头方向正确放置机器人，否则容易损坏机器。 请勿擅自烧录其他产品驱动、或使用非官方推荐方式烧录固件。如因用户个人烧录其他固件导致设备损坏将不在售后服务内。 如果您对本手册的内容有任何疑问或建议，请登录大象机器人官方网站提交相关信息： https://www.elephantrobotics.com 请勿将机械臂用于以下用途： 医疗与生命攸关的应用中。 可能会引起爆炸的环境中。 未经过风险评估直接使用。 安全功能等级不够的使用。 不符合的机器人性能参数的使用。 ← 上一章 | 下一章 → "},"2-BasicSettings/3-UserNotes/3.2-TransportandStorage.html":{"url":"2-BasicSettings/3-UserNotes/3.2-TransportandStorage.html","title":"3.2 运输和储存","keywords":"","body":"运输和储存 装箱打包   在机器人产品进行装箱打包时，请确保使用专为其设计的包装材料和箱体，这些材料能够提供足够的缓冲和支撑，防止运输过程中的撞击和震动。务必检查所有零部件是否已正确固定，避免松动导致损坏。对于易碎或敏感部件，应额外使用防震保护材料进行加固。最后，确保包装箱外标有清晰的搬运和警告标签，指示正确的搬运方式和存放方向。 物流运输   在运输过程中，应使用原始包装运输机器人产品。在运输过程中，应确保机器人产品在包装箱内作为一个整体是稳定的，并通过适当的措施加以保护。在运输和长期储存过程中，环境温度应保持在-20 至+55°C 的范围内，湿度 ≤95%且无凝露。   由于机器人是精密机械，从包装中取出机器人产品时，应小心处理。在运输过程中，如果不能稳定放置，可能会引起振动并损坏机器人的内部部件。 设备储藏   运输完成后，原包装应妥善存放在干燥的地方，环境温度应保持在-20 至+55°C 的范围内，湿度 ≤95%且无凝露，以备将来重新包装和运输需要。不要将其他物品堆放到机械臂的原包装箱上，防止包装箱变形和机械臂损坏。 | ← 上一章 | 下一章 → "},"2-BasicSettings/3-UserNotes/3.3-MaintenanceandCare.html":{"url":"2-BasicSettings/3-UserNotes/3.3-MaintenanceandCare.html","title":"3.3 维护和保养","keywords":"","body":"维护和保养 作为一家机器人制造商，我们重视确保客户能够正确、安全地维护和升级他们的机器人设备。为此，我们提供以下详细的维护和保养指南，包括常见维护项目及维修或升级硬件的部分，请您认真阅读: 1. 常见维护项目及推荐周期 维护项目 描述 推荐周期 视觉检查 检查机器人有无明显的损坏、异物堆积或磨损。 日常 结构清洁 使用干净、干燥的布料清洁机器人结构部件。避免水分和侵蚀性清洁剂。 日常 紧固件检查 检查并紧固所有螺栓和连接件。 日常 润滑 对关节和移动部件进行润滑，使用制造商推荐的润滑油。 每 3 个月 电缆和接线检查 检查电缆和接线，确保无损坏或磨损。 每月 电气连接检查 确保所有电气连接牢固，无腐蚀或损坏。 每月 软件更新 检查并更新控制软件和应用程序。 每次有更新时 软件数据备份 定期备份关键软件配置和数据。 每季度 固件更新 定期检查并更新固件，以获取最新的功能和安全补丁。 每次有更新时 传感器和器件检查 检查传感器和其他关键器件，确保正常工作。 每月 紧急停止功能测试 定期测试紧急停止功能，确保其可靠性。 每月 环境条件监控 监控工作环境的温度、湿度、灰尘等，确保符合机器人的操作规格。 持续监控 安全配置复查 定期检查和确认机器人的安全配置，如限速和工作范围设定。 每月 预防性维护计划执行 按制造商的维护计划执行定期检查和维护。 按制造商指南 2. 独立更改机器人硬件的指南 我们理解客户可能会有自行升级或维修机器人硬件的需求。在进行任何升级操作之前，请务必详细阅读产品的相关参数，并与我们的官方人员确认是否被允许进行此类操作。未经官方允许的操作可能导致产品故障，且不在保修范围内。 物料要求 官方制造或推荐的物料：所有维修和升级所需的配件和组件必须是由我们官方制造或明确推荐的。这包括但不限于电子组件、传感器、电机、连接件和任何其他可更换部件。 物料获取：客户可通过我们的官方渠道购买所需的维修和升级物料。这确保了配件的质量和兼容性。 维修或升级流程 客户自行维修：客户应负责完成维修工作。我们将提供详细的维修指导和手册，以指导客户完成维修步骤。 遵循官方指导：维修操作应严格遵循我们提供的官方指导。任何偏离官方指导的操作都可能导致设备损坏。 责任和保修政策 责任划分：制造商：提供维修和升级的官方指导、官方制造或推荐的物料，并处理由制造缺陷导致的问题。 客户：负责按照官方指导完成维修，使用官方配件。 保修政策： 保修有效：只有当维修操作完全遵循我们的指导，且使用官方配件时，保修才有效。 保修无效：若客户未按官方指导操作，或使用非官方配件进行维修或升级，导致的任何损坏都将不在保修范围内。 注意事项 安全第一：在进行任何维修或升级操作前，请确保遵循所有安全指南，包括断电和使用适当的防护装备。 技术支持：如在维修过程中遇到问题，建议停止操作并联系我们的技术支持团队寻求帮助。 我们强烈建议客户严格遵循这些指南，以确保机器人设备的安全、有效运行。不当的维修操作可能导致设备损坏并影响保修状态。如需进一步的指导或支持，请及时联系我们的专业技术团队。 ← 上一章| 下一章 → "},"2-BasicSettings/3-UserNotes/3.4-FAQs.html":{"url":"2-BasicSettings/3-UserNotes/3.4-FAQs.html","title":"3.4 常见问题解决","keywords":"","body":"常见问题 本部分列出了一些常见问题，涵盖硬件、软件这几个方面。 1 软件问题 2 硬件问题 3 其他 ← 上一章 | 下一章 → "},"2-BasicSettings/3-UserNotes/3.4.1-software.html":{"url":"2-BasicSettings/3-UserNotes/3.4.1-software.html","title":"3.4.1 软件","keywords":"","body":"软件问题 1. mystudio相关 Q：关于mystudio下载固件的细节 一般情况下，出厂已经内置固件，除非在机器异常情况，否则无需重新刷固件 下载固件的过程中需要连接网络 选择对应机型的固件，不要选错其他机型 2. Python相关 Q：运行提示缺少库文件Q:遇到报错信息：ModuleNotFoundError: No module named “pymycobot”，如何处理？ A1：没有安装pymycobot，对应的解决方法是重新安装pymycobot，指令是pip3 install pymycobot --upgrade --user A2: 在安装python的过程中没有勾选下图的“Add Pythonxx to PATH”，需要卸载python后重新安装python，并将此选项勾选。 A3: 建议使用3.9版本的pyhton，pyhton12会出现不兼容的情况。 Q：send_coords(coords, speed, mode)中的mode有没有通俗一点的解释？ A：线性1代表机械臂末端以直线的方式抵达目标位置，如果因为限位、结构等原因无法走直线，那指令就不会完全执行； 线性0表示末端以任意姿态抵达目标位置，由于没有直线的限制，不容易出现指令不执行的现象。 Q：set_fresh_mode(mode) 的插补和刷新模式有什么区别？ A: 插补0是指起始点和终止点之间规划了很多密集的点位，从而达到控制中间段轨迹的效果。 如何达到程序并行的效果：非插补1就是没有中间段的规划，控制不了轨迹，但是运动会相对平滑。 Q：在仅改变Z轴的情况下，轨迹不是直上直下的，但是最后落点是只改了Z轴，这个正常吗，如何确保中间轨迹也是直线？ 开插补走直线就能确保轨迹了set_fresh_mode(0) # 开插补 send_coords(coords, speed, mode=1) # 走直线 注意一定要开插补之后，在send_coords设置的智能规划路线才有用。 插补是指起始点和终止点之间规划了很多密集的点位，从而达到控制中间段轨迹的效果。 非插补就是没有中间段的规划，控制不了轨迹。 Q:识别到的目标位置，末端无法到达，怎么判断这个坐标是否可以到达然后处理？ A：solve inv kinematics(target coords, current_angles)用这个接口看是否有解就可以了。 solve_inv_kinematics(target_coords, current_angles) 功能 : 将坐标转为角度。 参数： target_coords: list 所有坐标的浮点列表。 current_angles: list 所有角度的浮点列表，机械臂当前角度 返回值: list 所有角度的浮点列表。 3. ROS相关 Q：有没有配置好环境的虚拟机镜像？ A：我们有提供一个配置好ROS2环境且内置ROS源码的虚拟机环境，用户可以通过下面这个链接下载，并将虚拟机文件导入VirtualBox，省去自己配置环境的麻烦，当测试ROS案例时建议使用我们已经配置好的虚拟机环境进行验证，避免由于环境配置的原因导致的一些案例运行报错 请参考虚拟机文件导入虚拟机软件的操作步骤视频：https://drive.google.com/file/d/1KeYk_CUgDE46rVn7zbd0EhraIbgt3qZt/view?usp=sharing ROS2虚拟机文件下载 虚拟机软件VirtualBox下载 Q：导入ROS2虚拟机文件的时候报错怎么处理？ A: 这是因为虚拟机软件Oracle VM VirtualBox版本过低导致的，需更新虚拟机软件版本。 Q：如何重新下载ROS源码包？ A：使用指令拉取： git clone https://github.com/elephantrobotics/mycobot_ros2.git 或着手动下载，下载方法进入到ROS源码包地址按照下图进行操作，源码包地址：https://github.com/elephantrobotics/mycobot_ros2 Q: 运行ROS moveit案例发现报错ImprotError：No module named yaml咋办？ A：在这个脚本开头第一行，把Python解释器改为python3 Q：运行虚拟机找不到串口怎么处理？ A:使用USB线将M5机械臂与PC连接，打开虚拟机设置→USB设备→添加USB设备→选择串口号QinHeng xxxxx，这个就是机器的串口设备。 如果没有这个设备号，可以通过重新拔插设备获取对应的USB设备号，拔插有串口变化的即对应的机器串口设备号 Q：终端切换到~/catkin_ws/src中使用git安装并更新mycobot_ros时，出现目标路径\"mycobot_ros2\"已经存在，原因是什么？ A：说明~/catkin_ws/src中已经存在一个mycobot_ros2程序包，需要提前将其删掉，再重新执行git操作即可。 Q：rosrun运行时，终端报错显示counld not open port /dev/ttyUSB0：Permission: '/dev/ttyUSB0'，是为什么？ A：串口权限不够，终端输入sudo chmod 777 /dev/ttyUSB0赋予权限。 Q：rosrun运行时，终端提示Unable to register with master node [http://localhost:11311]: master may not be running yet. Will keep trying的原因是？ A：运行ros程序前，需开启ros节点，终端输入roscore。 Q：rosrun运行时，终端报错显示counld not open port /dev/ttyUSB0：No such file or directory: '/dev/ttyUSB1'，是为什么？ A：串口有误。需确认当前机械臂的实际串口。可通过ls /dev/tty*查看。 Q：刚克隆下来的mycobot_ros2程序包，然后直接运行rosrun程序，出现package 'mycobot_pro_450' not found的错误或者找不到该文件之类的错误？ A：刚克隆下来的mycobot_ros2需要构建代码进行ros环境编译。终端输入 cd ~/catkin_ws/ catkin_make source devel/setup.bash Q：编译完成后，新开终端运行launch指令时，为什么会出现下面的错误？ A1：系统没有添加ros环境变量，所以每次开启新终端都要source： cd ~/catkin_ws/ source devel/setup.bash A2：系统添加ros环境变量，每次开启新终端后无需执行source： # noetic为Ubuntu20.04系统 echo \"source /opt/ros/noetic/setup.bash\" >> ~/.bashrc source ~/.bashrc A3：可能是指令中的文件名与实际中mycobot_ros2包里面的文件名不一致，请仔细检查指令是否有误。 5 C++相关 Q：找不到各种dll文件怎么处理？ A1：如果myCobotCpp.dll缺失，将之前放到lib目录下的myCobotCpp.dl放到mycobotcppexample.exe所在目录下. A2: 如果报缺少QT5Core.dll，打开qt command (菜单栏搜索QT) ，选择msvc2017 64-bit，执行windeployqt--release myCobotCppExample.exe所在目录(如: windeployqt --release D:lvs2019myCobotCpploutlbuildlx64-Releaselbin) 此处执行命令后如果报找不到vs安装路径，请检查vs环境变量的设置. 以上步骤执行后，如果报缺少qt5serialport.dll文件，将gt安装目录处的此文件(路径如: D:lgt5.12.1015.12.10msvc2017 64bin)，拷贝到myCobotCppExample.exe所在目录 Q：生成myCobotCppExample.exe可执行文件，这个有可能是什么问题？ 选择下图中的启动 ← 上一章 | 下一章 → "},"2-BasicSettings/3-UserNotes/3.4.2-hardware.html":{"url":"2-BasicSettings/3-UserNotes/3.4.2-hardware.html","title":"3.4.2 硬件","keywords":"","body":"硬件问题 Q：机械臂上电锁不住如何解决？ 检查是否有接上原装电源适配器，或者适配器是否接触良好，可以尝试重新拔插电源适配器 检查关节在断电状态，能否正常转动，会不会出现阻力过大或者过小的情况，初步判断是否内部结构物理断裂，无物理断裂则接着往下检查. Q：按下急停后，释放急停锁不住了，怎么让机械臂再次锁住？ 需要给机器重新上电，例如以myblockly给机器上电 Q: 关节抖动、关节角度偏差过大或关节无力下坠如何优化？ 参考机器人参数介绍章节，检查实际负载是否在机械臂有效负载范围内，负载过大会导致关节抖动，可适当减轻实际关节的负载 将运动模式更改成刷新模式，这样会机械臂的运行轨迹会相对平滑，具体的API，请参考 set_fresh_mode(1) 查看以下链接内容调整pid：https://drive.google.com/file/d/1UWhaaSTuwLFImuEGY1J2tvgxTQDwWxK_/view?usp=sharing 查看gitbook第5章节，对机械臂进行零位校准，也可参考下面链接的校准步骤：https://drive.google.com/file/d/1XtKH-ykKWPH0q9Z_YHwzkgwNKRhstHhi/view?usp=sharing 使用时间较长的机器(3个月以上)可能会出现关节老化产生关节间隙的情况，可按照以下视频，手动掰动关节，查看是否存在关节虚位：https://drive.google.com/file/d/1tXDUALmfw1z0u6lM9uH5hOHivjbRoWxW/view?usp=sharing 如果存在关节老化虚位问题，这种抖动则属于机器自然老化无法避免。 Q: 什么是关节零位点？ 以下图为例，关节与关节外壳边缘之前会设计有一个拱形槽，这个就是关节零位点 一般校准后零点姿态如下： Q：有没有零位校准的方法？ 请参考gitbook第5章节或者下面这个链接： https://drive.google.com/file/d/1XtKH-ykKWPH0q9Z_YHwzkgwNKRhstHhi/view?usp=sharing Q: myCobot的关节的限位？ A: 一轴和五轴有限位，一轴顺时针约165°左右，逆时针165°左右。五轴可时针、逆时针可转动约165° 注意：转动机械臂时应小角度、轻轻地转动，到达限位后就不可用力继续转动。 Q：不同版本的机械臂支持什么通信接口？ A：基于微处理器的机械臂支持socket通信TCP；基于微控制器的机械臂可以USB转串口通信。 ← 上一章 | 下一章 → "},"2-BasicSettings/3-UserNotes/3.4.3-other.html":{"url":"2-BasicSettings/3-UserNotes/3.4.3-other.html","title":"3.4.3 其他","keywords":"","body":"其他 Q：机器异常时如何重置成出厂设置？ 恢复成出厂设置主要在于镜像、pid及零位的重置。以下为重置方案： 关于重置镜像：重置镜像时将清空原系统中的所有内容，如有重要文件，请注意提前保存，重置镜像的方法参考gitbook系统使用章节 关于重置pid：一般情况下当机器出现关节严重抖动，关节动作速度异常，关节蜷缩在一起的情况下可重置pid，重置方法参考：https://drive.google.com/file/d/1UWhaaSTuwLFImuEGY1J2tvgxTQDwWxK_/view?usp=sharing 关于重置零位：一般情况下当机器出现零位不正确，关节限位异常可重新零位校准，重置方法参考：https://drive.google.com/file/d/1XtKH-ykKWPH0q9Z_YHwzkgwNKRhstHhi/view?usp=sharing Q：urdf文件下载路径在哪里？ A：请参考以下路径，所有mycobot机型的urdf都在此路径中：https://github.com/elephantrobotics/mycobot_ros/tree/noetic/mycobot_description/urdf Q：通过串口或socket通讯，经过机器人的控制器控制电机，指令传输延时多大？有通讯时序图吗？实时性如何？ 这边没有串口或socket通讯的延时测试数据，据我们这边开发使用反馈来看，实时性还是挺高的，不会出现很滞后的情况 Q：mycobot pro 450 机械臂基座标系是怎么样的？ Q：450的关节是串口总线的控制方式吗？ A:是的 Q: 关于坐标的理解有更多的解释吗？ A：控制坐标运动的API是send_coords([x,y,z,rx,ry,rz], speed) x、y、z 坐标： 控制了机械臂末端执行器在空间中的位置。改变这些坐标值将使机械臂移动到不同的空间位置，从而实现在三维空间中的定位。 rx、ry、rz 姿态角度： 控制了机械臂末端执行器的姿态或朝向。这些值通常以欧拉角的形式给出，描述了机械臂末端执行器相对于基坐标系的旋转，欧拉角顺序是zyx。改变这些值将使机械臂的末端执行器旋转到不同的角度或方向。 例如： 当你调整 +X 时，这表示在当前机械臂末端执行器的位置沿着当前末端执行器的 X 轴正方向移动一定的距离。这个动作会导致机械臂整体向某个方向移动。而当你调整 RX 时，这表示在当前机械臂末端执行器的姿态绕当前末端执行器的 X 轴旋转一定的角度。这个动作会导致机械臂整体发生旋转，末端执行器的方向会发生改变。 综合来看，+X 和 RX 的调整都会直接影响机械臂的运动状态，+X 控制位置的移动，而 RX 控制姿态的变化。 如果你更直观的看到变化，我们建议你使用myblockly的串口控制工具，单次调整一个参数，观察其在坐标系中的变化，请注意在观察rx、ry、rz 的时候如果想更加直观，请注意调整J1关节为0的时候调整x，ry，在关节为90时，调整y和rx 你可以参考下文的坐标系图示： Q: 关于DH参数的Offset 有更多的解释吗？Offset 是绕z旋转吗? A:DH参数描述了机械臂中相邻连杆之间的几何和运动关系。 在DH参数表中，Offset参数表示前一个连杆绕其z轴旋转对下一个连杆位置的影响，即连接两个连杆时的偏移量。对于机械臂中的Offset参数，一般表示上一个连杆绕自己的z轴旋转对下一个连杆位置的影响，而不是绕下一个连杆的z轴旋转。因此Offset不是绕z旋转，而是表示连接两个连杆时的位移。 Q: 450机械臂供电的电压区间范围是多少?瞬间电流有多大? A: 24V ，9.2A Q：请问如果对各轴舵机进行角度控制和反馈获取，最短的通讯周期可以做到多少？ A：这个需要根据速度决定间隔时间，最低响应时间是50ms Q：mycobot系列机器有碰撞检测吗？ A：带算法碰撞自干涉，已经集成到设置关节角度及坐标的API里了 Q:vnc拖拽卡顿怎么处理？ A: 如果是由于在vnc中拖动任何窗口造成的卡顿断连，可以按照下面的图片做一些配置，选项需要与下面的图片一致。成功设置后，将解决由于拖动窗口导致VNC断开的问题。 Q：更换450的第2个关节，发现4颗螺丝滑丝了怎么拆出来？ 关于关节的替换问题，那4个螺丝可以不必拆卸，请拆卸中间那颗大螺丝，然后将J2关节主体固定回去，然后用力将整个连轴件一并抽取出来即可，具体操作我为你录制了一个视频，你可以参考 Q:关节扭矩信息提供吗？ A:我们的机器都只提供整体关节的整体信息，不提供舵机、电机执行单元的内部扭矩、电压电流等参数信息，公开的是机械臂整体参数，如重复定位精度，电源电压等等 Q:下图中的查看看两坐标之间的关系怎么理解？ A: 指的是如果你想查看名为 \"turtle1\" 的坐标系相对于名为 \"turtle2\" 的坐标系的变换关系，可以使用这个指令，通俗一点来说就是当你运行这个命令时，它会告诉你一个物体（\"turtle1\"）相对于另一个物体（\"turtle2\"）的位置和方向信息。就像在地图上你可以知道一个城市相对于另一个城市的位置一样 Q:ROS2的环境被不小心改动，我可以直接删掉ROS，自己重新安装吗？ A:关于ROS重新安装这个问题，我们不建议用户自己重新安装，因为ROS环境的搭建会相对复杂，容易出错，如果需要重置ROS环镜，我们建议用户重新刷写系统镜像，具体方法请参考 基于ROS开发使用 Q：主机如何将文件传输到虚拟机中 A:按下图设置共享文件夹，可以将PC中的文件传输到虚拟机中 Q:同一个位置，机械臂到位以后，重复定位偏差过大怎么解决？ 新旧机器都可以通过调pid，尽可能减少偏差， 附：https://docs.qq.com/doc/DU0VhT2JNVUdNUEJS，https://drive.google.com/file/d/1UWhaaSTuwLFImuEGY1J2tvgxTQDwWxK_/view?usp=sharing 但是旧版机器因为机械臂的2、4关节存在齿轮间隙，容易在重力的作用下产生关节偏差，最终影响末端精度，这四组关节值中2、4关节的受力不一致，所以精度也不太一样。目前建议通过程序进行调整，当机器到达点位后，可以在此点位再读一次点位，检查如果存在偏差，在此基础上再单关节调整具体偏差值，以达到到达指定点位的效果。 Q:API和串口指令直接控制关节有什么区别？ API 提供了简化、抽象化的接口，使开发更高效和容易，适合快速开发和集成。 串口指令 提供了直接、底层的控制，适合需要精细调整或开发自定义功能的场景，但通常开发和调试更复杂。 总得来说： 使用串口指令直接控制机械臂更加灵活，但也更加复杂，需要对通信协议有深入的了解；而使用API控制更加简单方便，但可能会受限于API提供的功能和性能。 Q:windows运行git指令报错 A:这是没有安装git导致的，需要先安装了git，再使用git指令 Q：MDI和JOG的区别是什么？ A: MDI（Manual Data Input）称为设定值直接给定运行方式。即上位控制器直接设 置目标位置、速度、加减速度后，轴自动移动到目标位置的定位方式。MDI 也是 实际应用中最常使用的一种定位功能。 JOG朝某一方向连续移动。 Q:各个机型pymycobot的最新支持版本是什么？ Q: DH表 如何区分标准和改进 sdh，std，标准 mdh，modify，改进 我们提供的是标准DH表，客户如果需要可以自己去转化，只是两种不同的描述方式。 Q:报错缺少opencv_camera,如何处理？ A:报错是显示缺少可执行权限，可能需要添加权限 改为用mycobot_280的，不需要用pi本身的了，因为m5那边占用有文件了，两边不能同时占有，否则会造成后面的编译失败。 Q:数据传输速度怎么看？ A：使用以下代码： import time from pymycobot.mycobot import MyCobot mc = MyCobot(\"COM8\",115200, debug = True) while 1: mc.get_angles() write表示下发的获取指令，read是返回的消息，左侧是时间。这里显示518write +611read，表示约100ms完成了一次get_angles的读取，频率是10hz。 Q:机械臂某一关节无法运动，如何处理？ A:可以通过python脚本，循环读角度，然后手动的去转动该关节，看角度有没有变化。 如果有返回值排查以下几点，蒋信息返回给技术支持人员。 1、get_servo_status查看J2舵机有没有欠压/过压等硬件问题 2、手动转动J2看有没有明显阻力，对比其它关节；单独给J2上使能focus_servo(2) 3、脚本，查看参数有没有问题。 Q：末端零位异常 A:长时间使用自适应夹爪夹取物品后会出现夹爪和末端零位异常的现象，需要将夹爪静止。 Q：什么的是正向运动学和逆向运动学？ A：正向运动学（Forward Kinematics）是指已知机器人各个关节的角度（或位移），求解机器人末端执行器（如机械臂的手爪）在笛卡尔空间中的位置和姿态。get_coords()的API中实现了，但是具体的算法不公开。 逆运动学（Inverse Kinematics）与正向运动学相反，它是指已知机器人末端执行器在笛卡尔空间中的位置和姿态，求解机器人各个关节的角度（或位移）write_coords()、send_coords() ← 上一章 | 下一章 → "},"2-BasicSettings/4-FirstInstallAndUse/":{"url":"2-BasicSettings/4-FirstInstallAndUse/","title":"4 首次安装","keywords":"","body":"首次安装和使用 感谢您选择我们的产品 在开始之前，我们衷心感谢您选择我们的产品。我们致力于为您提供卓越的用户体验。 首次使用和问题处理 本章将详细介绍产品收到后的初步使用方法，并提供解决问题的相关信息，确保您在使用过程中无后顾之忧。 跳转到各部分 4.1 产品标准清单 4.2 产品开箱指南 4.3 开机检测指南 ← 上一章 | 下一章 → "},"2-BasicSettings/4-FirstInstallAndUse/4.1-ProductStandardList.html":{"url":"2-BasicSettings/4-FirstInstallAndUse/4.1-ProductStandardList.html","title":"4.1 产品标准清单","keywords":"","body":"产品标准清单 1. 产品列表图片 感谢您选择大象机器人myCobot pro 450 机械臂，本章节内容旨在帮助您轻松上手大象机器人产品，享受产品带来的每一个精彩瞬间。 2. 产品标准清单对照表 序列号 产品 1 myCobot机械臂（型号myCobot pro 450） 2 24V电源适配器 3 安装底板 4 急停开关 5 固定底板G型来 6 M8航插线 7 背头M6螺丝 8 M5版手 9 M2抜手 10 14Pin插拔式接线端子 11 3Pin插拔式接线端子 12 myGripper 力控夹爪 F100 13 千兆网线2m 注： 包装箱到位后，请确认机器人包装完好无损。如有损坏，请及时联系物流公司和您所在地区的供应商。开箱后，请根据物品清单检查箱内的实际物品。 ← 上一章 | 下一章 → "},"2-BasicSettings/4-FirstInstallAndUse/4.2-ProductUnboxingGuide.html":{"url":"2-BasicSettings/4-FirstInstallAndUse/4.2-ProductUnboxingGuide.html","title":"4.2 产品开箱指南","keywords":"","body":"产品开箱指南 1. 产品开箱图文引导 为什么需要按照步骤拆卸产品 在本节中，我们强烈建议按照指定步骤拆卸产品。这不仅有助于确保产品在运输过程中不受损害，还能将意外故障的风险降至最低。请仔细阅读以下图解指南，以确保您的产品在开箱过程中的安全。 1 检查包装箱是否损坏。如有损坏或配件缺失，请及时联系物流公司和您所在地区的供应商。 2 打开包装盒，取出产品宣传册、海绵包装盖、myCobot 机器人手臂、配套电源、平板底座和附件包。 3 确保每一步都完成后再进行下一步，以防止不必要的损坏或遗漏。 注: 取出产品后，请仔细检查每件物品的外观。请对照物品清单检查包装箱中的实际物品。 2. 产品开箱视频引导 ！产品开箱视频正在制作中 --> ← 上一章 | 下一章 → "},"2-BasicSettings/4-FirstInstallAndUse/4.3-PowerOnDetectionGuide.html":{"url":"2-BasicSettings/4-FirstInstallAndUse/4.3-PowerOnDetectionGuide.html","title":"4.3 开机检测指南","keywords":"","body":"开机检测指南 1. 首次使用自查-机器关节功能验 注意: 在机械臂启动时，请注意不要让机械臂处于蜷缩或者关节之间触碰的姿态，建议启动时,机械臂姿态应如下图1所示，图2、图3均为错误启动姿态： 图1 (正确姿态) 图2（错误姿态） 图3（错误姿态） 2. 结构安装和固定 在 机械臂 的运动过程中，如果不将 myCobot 的底面与桌面或其他底面相连，仍然会造成 myCobot 的 摇晃或倾覆。 1.在开始组装之前，请清理工作台，并准备好需要用到的工具。 工作环境：不小于机械臂的工作范围，并有足够的安装、使用、维护和修理空间。 工具清单：mycobot pro 450 机械臂主体、产品配件包、产品使用指南等。 2.将.把机器臂平放在桌面上并正向放到桌面边，用G型夹固定。 3.结构安装完成后，方可进行下一步的电源连接。 注意：myCobot 底座的螺丝孔位连接 需要将机器人固定在牢固机座上才可以正常使用。机座重量要求：固定式机座，或移动式机座。 请确定固定底座上有对应螺纹孔位，再进行安装。 正式进行安装前，请确认： 待安装环境符合以上《工作环境与条件》表格的要求。 安装位置不小于机器人工作范围，且留有足够大的安装、使用、维护、维修的空间。 将机座放置到合适位置。 安装相关工具已准备好，如螺丝、扳手等。 确认以上内容后，请将机器人搬运至机座安装台面上，调整机器人位置，将机器人基座固定孔位与机座安装台面上的孔位对准。对准孔位后，将螺丝对准孔位，拧紧即可。 注意：在机座安装台面上调整机器人位置时，请尽量避免在机座安装台面上直接推拉机器人，以免产生划痕。人工移动机器人时请尽量避免对机器人本体脆弱部分施加外力，以免造成机器人不必要的损伤。 请尽可能详细描述下使用细节，如果方便的话请提供一个操作视频，这将会有助于快速分析定位问题，提前感谢！ --> ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/5-BasicApplication/":{"url":"3-FunctionsAndApplications/5-BasicApplication/","title":"5 基础功能","keywords":"","body":"什么是 myStudio Pro？ myStudio Pro 是一款一站式机器人编程控制软件，支持可视化编程交互、快捷移动控制、拖动教学、机器人状态查询配置，在myStudio Pro中有myBlockly模块。 myBlockly 在功能/设计上类似于麻省理工学院的儿童编程语言 Scratch。 使用 myBlockly 时，用户可以通过拖动模块来构建代码逻辑。这个过程就像搭积木一样。 从用户的角度来看，myBlockly 是一个简单易用的可视化代码生成工具。从开发人员的角度来看，myBlockly 是一个文本框，其中包含用户输入的代码。 在文本框中生成代码的过程，就是用户在 myStudio Pro 中的myBlockly中拖动代码的过程。 myStudio Pro 支持的操作系统如下： Windows macOS Linux arm64 myStudio Pro 支持的现代浏览器如下： Chrome Edge Safari ... 跳转到各部分： 5.1 首次使用 myStudio Pro 5.2 下载和卸载 5.3 接口描述 5.4 常见问题解答 5.5 myBlockly 5.5.1 首次使用 5.5.2 blockly主界面介绍 5.5.3 小案例 5.5.4 快速填入数据 5.5.5 快速移动 5.5.6 学习使用坐标控制 5.5.7 单步执行 5.5.8 程序控制 5.5.9 路点 5.5.10 夹爪的使用 5.6 快速移动 5.7 固件与应用 5.8 设置 ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/5-BasicApplication/5.1-myStudioFirstUse.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.1-myStudioFirstUse.html","title":"5.1 首次使用 myStudio Pro","keywords":"","body":"使用 myStudio Pro 前的准备工作 硬件配置。使用 myStudio Pro 之前，请确保机器上电并已开启服务端程序，同时确保nginx服务已开启。nginx在机器上电时默认自启动，为确保 myStudio Pro 的正常使用，您可以使用ssh连接的方式访问系统，同时在终端输入以下命令。 nginx myStudio默认运行在80端口。当然，您也可以通过修改对应配置文件，达到修改服务运行端口的效果。 软件配置。使用 myStudio Pro 之前，请确保已在您的计算机上安装浏览器。 ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/5-BasicApplication/5.2-install_uninstall.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.2-install_uninstall.html","title":"5.2 下载和卸载","keywords":"","body":"下载并安装 myStudio Pro 下载 myStudio Pro无需下载与安装，只需要在PC设备与机器处于同一网段/通过网线连接配置即可在浏览器实现访问 安装 由于 myStudio Pro 是Web应用，不需要传统意义上的安装。 您需要确认以下几点： 机械臂系统已正常运行，并开启了 Web 服务。 获取正确的访问 IP 和端口。 使用 Chrome / Edge / Safari 等现代浏览器访问。 建议使用最新版的浏览器，以获得最佳兼容性和性能体验 更新 浏览器访问时会自动加载最新的 Web 前端页面。 如页面未更新，可尝试清理缓存并刷新（快捷键：Ctrl + F5）。 卸载 由于系统为 Web 应用，不存在客户端卸载步骤。 若不再需要使用，只需停止机械臂系统的 Web 服务，或在浏览器删除相关书签/缓存 访问方式 确保设备与机械臂处于 同一局域网。 在浏览器地址栏输入： http://: 页面加载成功后即可使用系统，无需额外安装客户端。 ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/5-BasicApplication/5.3-interface_description.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.3-interface_description.html","title":"5.3 接口描述","keywords":"","body":"myStudio Pro 界面的显示和基本功能的使用 打开软件，主界面如下图所示 界面功能介绍，界面分成两个区域： 回零 功能实现 回零 此按钮功能为：控制机器人所有关节都回到零位位置。 注意：此按钮功能生效的前提的已经成功连接机器人的通信。鼠标左键长按点击此按钮以后，机器人开始执行回零指令，鼠标长按松开回零指令停止执行。 回零完成以后，会弹窗提示完成回零。 功能实现 这里可以选择你想要使用的功能，功能包含如下： blockly 图形化编程 快速移动 固件与应用 设置 myBlockly myBlockly是一个完全可视的模块化编程界面，属于图形化编程语言，适合初级用户熟悉编程。使用者以拖拽拼图的方式开发出应用程序，即可创造出简单及复杂的功能。支持图形化代码的保存、加载、单步调试执行、执行指定的单个积木块等功能。 注意：想要使用 myBlockly 必须要先连接设备通信。 此处为可点击按钮，鼠标左键点击以后，会跳转到myBlockly 图形化编程界面 打开文件 此处为可点击按钮，可以通过导入 JSON 文件自动加载 blockly 积木块。 鼠标左键点击以后，会弹窗一个可以选择文件的弹窗，选择通过 blockly 保存的 JSON 文件可以加载该文件，打开 myBlockly 并且在编程界面自动载入对应的积木块。 新建文件 此按钮与myBlockly\"功能一样。 快捷载入历史保存的 blockly 文件 当你在使用过 myBlockly 编程并且已经保存过 blockly 文件，如下图示位置会显示保存的文件名称以及保存时间，显示数量最多为 4 个，如果超过 4 个，只显示最新保存的 4 个。鼠标左键点击可以打开 myBlockly 并且自动加载选中的 blockly 文件。 常用工具 快速移动 功能：提供机器人 IO 快捷控制以及关节角度、坐标的快捷控制 快速移动功能详细介绍 固件与应用 功能：提供机器人嵌入式固件的更新升级、产品使用手册、官方视频、官方 GitHub 官方在线商城以及意见反馈功能。 固件与应用功能详细介绍 设置 功能：应用以及机器人基本信息的展示以及更改功能 设置功能详细介绍 ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/5-BasicApplication/5.4-Q&A.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.4-Q&A.html","title":"5.4 常见问题解答","keywords":"","body":"Q&A 本章列出了使用 myBlockly 控制机械臂的常见问题，以供参考。 Q1：运行 myBlockly 时，出现错误信息 ModuleNotFoundError: No module named 'pymycobot' A: 这是因为在设置 Python 环境时没有安装 pymycobot 库。要安装 pymycobot 库，需要打开终端（Win 键 + R 键），输入 pip install pymycobot --upgrade --user点击回车键，即可看到 \"成功安装 pymycobot\"。 Q2：由于未添加 sleep 方法模块，机械臂没有响应 A: 操作机械臂的程序需要一定时间才能完成，因此在完成一个动作后，需要连接一个 sleep 模块，让机械臂在进行下一个动作前有足够的时间（所需时间取决于具体情况和机器，机械臂的默认设置是运行 myBlockly 时休眠时间最短不少于 0.5 秒），否则机械臂将无法实现理想的动作。 Q3：输入 IP 后打不开？ A: 确认 PC 与机械臂处于同一局域网，尝试更换浏览器（推荐 Chrome / Edge），刷新缓存（Ctrl + F5） ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.1-blocklyFirstUse.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.1-blocklyFirstUse.html","title":"5.5.1 首次使用","keywords":"","body":"首次使用 myStudio软件已配置到机器系统中，您可以使用PC电脑打开浏览器并通过ip访问，首页加载完成后系统会自动与机器建立连接。 您可以点击blockly图标，或者点击新建文档按钮即可进入blockly编程页面 当然，如果您也可以通过选择点击打开文件按钮加载您保存好的工作区（关于如何保存工作区，请点击这里）。 这里的通过点击blockly图标和点击新建文档按钮进入blockly编程页面的操作相当于是新增工作区。 blockly主页如下图所示: ← 上一页 |下一页 → "},"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.2-interfaceDescription.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.2-interfaceDescription.html","title":"5.5.2 blockly主界面介绍","keywords":"","body":"blockly主界面介绍 序号 功能介绍 1 文件：可以进行 加载、保存、新建工作区 的操作； 2 快速上电：机械臂释放/抱紧关节； 3 路点：快速创建示教点并运行； 4 快速移动：用于快速控制机械臂运动； 5 返回：退出blockly主界面 6 单步执行：选中某个积木块，可以单击该按钮，只执行当前选中的积木块； 7 运行面板：打开运行面板，在此面板可以运行、调试工作区代码； 8 姿态：打开姿态页面，可以看到3D模型的实时仿真运动姿态； 9 工具箱（toolbox）：提供构建好的积木块供用户使用； 10 工作区校准：点击后 工作区（workspace）会回到原点； 11 放大：放大 工作区（workspace）； 12 缩小：缩小 工作区（workspace）； 13 垃圾箱（trashcan）：可将工作区中的积木块拖动到此处删除，也支持从此处取出已删除的积木块； 14 工作区（workspace）：可将工具箱（toolbox）中的积木块拖动到此处 进行编程； ← 上一页 |下一页 → "},"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.3-littleCase.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.3-littleCase.html","title":"5.5.3 小案例","keywords":"","body":"小案例 我们来写一个小案例，通过这个案例来介绍blockly的基础使用 案例描述：控制机械臂回零，然后控制一关节移动到20度的位置，然后再回到零位。 第一步：首先点击姿态按钮，打开姿态视图，在这里可以看到仿真机械臂的当前姿态。 1：切换姿态面板：当姿态面板隐藏时点击显示，反之点击收起。 2：机械臂仿真模型，可根据当前真实角度实时仿真运动。 第二步：开始编程 打开工具箱一级分类运动控制，选择二级分类角度&坐标，拖动设置全角度积木块到工作区。 此积木块用于控制机械臂各关节运动到给定的角度，运动速度默认20。 打开工具箱一级分类基础编程，选择二级分类时间，拖动睡眠积木块到工作区，并设置睡眠时间为3秒。 睡眠时间3秒的意思是：程序等待3秒钟后往下执行。为什么要等待3秒钟呢？因为组要确保机械臂先把第一个指令动作先完成后再执行后续其他动作。 复制设置全角度积木块并修改关节1角度为20： 鼠标点击选中工作区中设置全角度积木块； 按住键盘Ctrl + C复制设置全角度积木块； 按住键盘Ctrl + V粘贴设置全角度积木块； 将新积木块关节1修改为20； 拖动该积木块使其与睡眠积木块连接； 同上操作类似，复制睡眠积木块，并设置睡眠时间为 3 秒； 再次复制工作区第一个设置全角度积木块； 完整代码如下： 这段代码的意思是： 控制机械臂回到零点 等待3秒钟（等待机器回零点完成） 使一关节（J1）移动到20度的位置 等待3秒钟 控制机械臂回到零点 最后，点击运行面板按钮，打开面板后，点击运行按钮开始执行代码。 代码运行完成，点击面板X 可关闭面板 第三步：保存 和 加载 文件（或者说保存加载工作区） blockly 支持 工作区的保存和加载。 点击文件按钮，出现一个下拉菜单，点击其中的保存按钮，会显示文件命名模态窗，输入自命名并点击确认即可保存，保存结果会在左下角以消息提示的形式展示。 第四步： 新建工作区 操作（这个操作会清空工作区所有代码） 点击文件按钮，出现一个下拉菜单，点击其中的新建工作区按钮，会出现提示，点击确认按钮 新建工作区完成 第五步：加载工作区 操作，加载我们之前保存的工作区文件。 点击文件按钮，出现一个下拉菜单，点击菜单中 打开文件 按钮后，会展示已保存文件列表，选择需要加载的工作区文件并点击打开按钮即可实现加载，点击删除按钮可将该文件删除。 加载完成 ← 上一页 |下一页 → "},"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.4-autofill.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.4-autofill.html","title":"5.5.4 快速填入数据","keywords":"","body":"快速填入数据 本章介绍积木块的中 快速填入 功能。 当一个积木块拥有过多的数据项，一个一个填入未免过于麻烦。 于是对于数据项填入项过多的积木块，我们可以使用快速填入功能。 目前支持快速填入的积木块有以下几个： 如何使用快速填入 以设置设置全角度积木块为例，首先需要选中积木块，然后点击积木块中的 快速填入按钮即可。 当页面上出现下图提示框，即填入成功。 ← 上一页 |下一页 → "},"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.5-quickMove.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.5-quickMove.html","title":"5.5.5 快速移动","keywords":"","body":"快速移动 什么是 快速移动 ？简单来讲就是，无需编程，仅通过鼠标点击的方式快速控制机器人移动。 备注：myStudio 中有两个 快速移动 控制面板，两者功能相差不大 第一步：点击快速移动按钮，打开 快速移动 面板，等待机器人数据返回。 如果没有数据全为零，请检查是否已连接机械臂，机械臂是否正常 第二步：尝试点击- / +按钮控制机械臂的不同关节。 第三步：控制坐标。 首先需要先将 关节 3 移动到 -90左右的位置，如下图。 然后就可以点击不同坐标轴的- / + 按钮来控制坐标了 对于其它功能，请查阅快速移动 ← 上一页 |下一页 → "},"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.6-useCoords.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.6-useCoords.html","title":"5.5.6 学习使用坐标控制","keywords":"","body":"学习使用坐标控制 开始之前 1、确保机器已上电 2、确保机器服务器端已开启 3、确保机器处于零位 本章介绍如何使用坐标来控制机械臂。 主要涉及到的API： 设置坐标 原型：send_coords(values,speed) 接口说明：设置机械臂多坐标 参数： values：[X,Y,Z,RX,RY,RZ] speed：速度，范围为 1-100 小案例 首次使用坐标移动前，需要执行的一些操作： 机械臂回到零位，可参考控制机械臂回零 设置机械臂坐标运动的初始姿态（机器J3需要与地面平行） 如下图代码所示： 打开运行面板，运行代码。 坐标移动 拖动一个设置坐标积木块到工作区，并点击积木块中的快速填入按钮填入数据，并将 Z 轴数据修改为 400 完整代码如下： 执行代码，整个过程观察到机械臂在上下移动 ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.7-singleStep.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.7-singleStep.html","title":"5.5.7 单步执行","keywords":"","body":"单步执行 所谓的单步执行，是指：单积木块执行。当工作区存在大量积木块时，我只想执行其中的一个积木块，看看是什么效果。这个时候就可以用到 单步执行 单步执行 按钮 默认处于禁用状态，是不可点击的 第一步：拖动几个设置关节积木块进入工作区 第二步：选中 设置关节积木块，观察到 单步执行 按钮已被解锁（颜色变为了深色） 第三步：点击 单步执行 按钮，会打开运行面板，点击面板中的运行按钮开始执行代码。同时，观察机械臂运动变化。 ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.8-program.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.8-program.html","title":"5.5.8 程序控制","keywords":"","body":"程序控制 开始之前 1、确保机器已上电 2、确保机器连接正常 本章介绍如何通过运行面板来调试积木块代码，实现程序的 暂停、恢复、单步执行、停止。 编辑一段控制 机械臂 关节1 运动的程序 点击运行面板按钮，当运行面板弹出后，点击运行全部，马上点击 暂停按钮，程序会在执行完第一条指令mc.send_angle(1,0,20) 后暂停。 程序已暂停。出现下一条要执行的指令time.sleep(3) 此时： 如果点击恢复按钮，程序将会自动往下执行； 如果点击单步执行按钮，程序会执行下一条指令，即mc.send_angle(1,-90,20)； 如果点击停止按钮，程序会被终止； 至于接下来如何操作，由您自己决定吧！ ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.9-waypoint.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.9-waypoint.html","title":"5.5.9 路点","keywords":"","body":"路点 开始之前 1、确保机器已上电 2、确保机器连接正常 3、服务端已开启 本章介绍如何使用路点功能来控制机械臂。 功能描述：通过录入多个路点数据（机械臂的关节和坐标）信息，快速控制机械臂到达每个路点的位置。打开路点列表页面，打开自由移动，放松机械臂，手动调整机械臂姿态，点击新增点位，可以添加一条路点数据。 序号 说明 1 点击“导入”按钮，可以把之前保存好的路点信息json文件导入进来。 2 点击“导出”按钮，可以把路点信息全部导出合成一个json文件。 3 点击“删除”按钮，可以把当前路点列表中所有选中路点进行删除。 4 点击“复制”按钮，可以把当前所有选中路点进行坐标信息复制操作。 5 点击“重命名”按钮，可以把当前所有选中路点进行路点名重命名。 6 点击“覆盖当前点”按钮，可以把当前机械臂坐标信息快速覆盖所有选中路点的坐标信息。 7 列表数据勾选列，功能3-6以该功能为前提。 8 点击“运行”按钮，机械臂会运动到当前所录的路点位置 9 点击“自由移动”按钮，会弹出二次确认弹窗，点击确认时按钮会变成黄色。机械臂会变成放松状态，调整机械臂的姿态。 10 点击“新增点位”按钮，会录入此时机械臂的坐标信息 11 点击“生成代码”按钮会快速生成路点积木块到blockly程序编码区 在blockly中选择路点积木块，加入到程序编码区。或者使用路点列表中的生成代码按钮，会在工作区最后一个积木块上拼接生成的路点积木块。 路点积木块关联路点列表中的数据，选择路点列表中任意路点进行关联。 路点积木块新增点位信息。选择新增点位，点击编辑图标打开新增路点弹框，这时会默认自定义路点名字，通过+或者-进行调整好路点信息，点击保存路点按钮，即可添加路点数据。 此外，路点积木块可对运动的模式进行修改，关节运动模式：以当前路点的关节信息进行运动，直线运动模式：以当前路点坐标信息进行运动。 序号 说明 1 选择路点，点击编辑图标后，会打开路点编辑弹框 2 输入路点名称 3 显示机械臂的关节和坐标数据，通过按钮左边(-)和右边(+)按钮进行调整路点数据 4 点击保存路点，可以新增或者修改路点数据 ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.10-gripperUse.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.5-blockly/5.5.10-gripperUse.html","title":"5.5.10 夹爪的使用","keywords":"","body":"夹爪的使用 开始之前 1、确保机器已上电 2、确保机器连接正常 3、服务端已开启 本章介绍如何使用blockly控制连接机械臂的Pro力控夹爪。 API display 我们将用到以下积木块 1: 设置Pro力控夹爪角度：使夹爪以指定的角度进入指定的状态（张开或闭合） 参数介绍： 该积木块有两个可以调整的参数： 夹爪ID参数：默认14 夹爪角度参数：表示需要设置的角度，取值范围0~100 2: 读取Pro力控夹爪角度：读取当前夹爪的角度值 该积木块有一个可以调整的参数： 夹爪ID参数：默认14 小案例 图形代码如下： 代码的执行效果： 控制Pro力控夹爪到达值为 80 的位置 等待 3 秒 控制Pro力控夹爪到达值为 20 的位置 等待 3 秒 读取当前Pro力控夹爪的角度值 等待 3 秒 控制Pro力控夹爪到达值为 0 的位置 注意: 如果您无法从以上的示例中控制夹爪，请确保您的Pro力控夹爪通信方式是modbus协议控制。 设置完成后，然后再次运行小案例代码。 ← 上一页 |下一页 → "},"3-FunctionsAndApplications/5-BasicApplication/5.6-quickmove/5.6.1-quickmovefirstuse.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.6-quickmove/5.6.1-quickmovefirstuse.html","title":"5.6 快速移动","keywords":"","body":"快速移动 开始之前 1、确保机器已上电 2、确保机器连接正常、通信正常 3、确保机器处于零位状态 4、机器服务端已开启 1 界面介绍 序号 说明 1 MyCobotPro450 3D仿真模型 2 末端IO引脚号1、2，输入 3 末端IO引脚号1、2，输出，可用于控制Pro力控夹爪 4 打开自由移动模式 5 退出快速移动界面 6 角度控制，通过点击 + - 按钮，对机械臂进行关节角度控制，数值代表当前机械臂的关节角度信息，也可以直接修改数值进行关节控制 7 坐标控制，通过点击+ -按钮，对机械臂进行坐标控制，数值代表当前机械臂的坐标姿态信息，也可以直接修改数值进行坐标控制 8 设置机械臂的运动速度，默认 10 mm/s 9 角度步长，调整角度时每次增加或减小的角度值 10 坐标步长，调整坐标姿态时每次增加或减小的坐标值 2 角度控制 在角度控制区域中，通过点击+ -按钮，对机械臂进行关节角度控制，数值代表当前机械臂的关节角度信息，也可以直接修改数值进行关节控制。 3 坐标控制 在使用坐标控制之前，需要将 关节3 移动到-90左右的角度位置。 在坐标控制区域中，通过点击 + - 按钮，对机械臂进行坐标控制，数值代表当前机械臂的坐标姿态信息，也可以直接修改数值进行坐标控制。 4 自由移动 通过点击 自由移动 按钮，打开自由移动模式，界面按钮颜色变成橘黄色，代表机器处于自由移动模式状态，可进行机器的拖拽移动。 按钮变为黄色： 当自由移动按钮处于黄色状态时，再次点击该按钮，则代表关闭自由移动模式。 5 IO 控制 5.1 末端IO 设置末端IO引脚号 1-2 输出，可以控制Pro力控夹爪。 通过点击 开 关 按钮，打开Pro力控夹爪。 通过点击 关 开 按钮，关闭Pro力控夹爪。 ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/5-BasicApplication/5.7-firmware/5.7.1-firmware_main.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.7-firmware/5.7.1-firmware_main.html","title":"5.7 固件与应用","keywords":"","body":"固件与应用 1 界面介绍 首页如下图： myCobotPro450支持用户远程升级并且烧录最新版本的末端固件，机器出厂默认是使用的最新版本的固件，后续有新版本的固件发布，只需要在使用myStudio的时候保持网络畅通连接，myStudio会自动下载最新版本的固件。 2 通用固件 功能介绍： AtomMain 末端固件名称 版本号 默认是最新已经发布的固件版本，也可以选择其他的版本进行烧录。 描述信息 固件对应版本的描述信息，一般会包含此版本固件的更新信息。 删除 删除按钮：固件删除按钮，用于删除存储在本地指定版本的固件。 点击此按钮，会弹出提示信息，提示你确认是否要删除固件，点击\"确定\"按钮，表示确认删除；点击\"取消\"按钮，表示取消删除。 当有是未下载的固件或者删除固件以后，\"烧录\"按钮就会变成\"下载\"按钮，并且\"删除\"按钮会消失，点击\"下载\"会自动下载固件。 下载完成以后，会恢复\"烧录\"和\"删除\"按钮。 3 文档手册 此功能为网页跳转链接，点击以后，会在当前使用浏览器上打开产品的gitbook页面。 4 视频教程 此功能为网页跳转链接，点击以后，会在当前使用浏览器上打开官方的视频号。英文版本会跳转到YouTube，中文版本会跳转到bilibili，并且会以内嵌的形式访问对应链接。 5 Github 此功能为网页跳转链接，点击以后，会在当前使用浏览器上打开官方Github。 6 在线商城 此功能为网页跳转链接，点击以后，会在当前使用浏览器上打开对应产品的购买界面。中文版本会跳转到淘宝，英文版本的会跳转到，并且会以内嵌的形式访问对应链接。 7 联系我们 如果你有任何的问题或者想法，可以通过这里来联系我们。 功能介绍： 名称 这里可以输入您的昵称 此处是必填项，如果你不填直接提交，会有对应文字提示您。 电子邮箱 这里可以输入您的电子邮箱 此处是必填项，这里可以输入你的邮箱地址，方便官方人员后续回复您，如果你不填直接提交，会有对应文字提示您。 您的意见 这里可以输入您的意见 此处是必填项，这里可以输入您的问题或者想法，如果你不填直接提交，会有对应文字提示您。 上传 点击此按钮，可以上传文件，最多上传3个文件，并且每个文件不得超过50M。 点击以后会弹窗以供选择文件。 如果你选中的文件大小超过50M，在点击\"打开\"以后，会打开失败，并且弹窗提示你文件过大。 当你要上传的文件数量超过3个时，会弹窗提示你。 提交 点击提交按钮，可以将所有信息进行提交，该步骤需要的时间可能较长，请您耐心等待 ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/5-BasicApplication/5.8-setting/5.8.1-setting_main.html":{"url":"3-FunctionsAndApplications/5-BasicApplication/5.8-setting/5.8.1-setting_main.html","title":"5.8 设置","keywords":"","body":"设置 1 界面介绍 序号 功能介绍 1 通用设置模块，主要设置语言 2 限位设置模块 3 检查更新模块 4 初始姿态模块 5 测试模块 6 语言选择模块 7 设置保存按钮 8 退出设置 2 通用设置 点击 通用 图标按钮，将进入语言设置页面，语言选择支持中文和英文。 选择对应语言之后，点击 保存 按钮，会出现二次确认提示信息弹窗，点击确认，即可成功设置语言。 3 限位设置 注意：限位参数修改仅支持关节的最小角度和最大角度，其它参数均不支持修改。 点击 限位 图标按钮，将进入关节限位设置页面。限位设置 界面默认显示当前机械臂的关节限位和坐标限位的相关参数。 参数锁定 按钮默认处于锁定状态，按钮颜色为蓝色，代表不能修改限位参数。 当处于参数锁定状态时，点击 参数锁定 按钮，按钮颜色变成灰色，此时处于开锁状态，代表可以修改限位参数（仅能修改最小角度和最大角度的数值）。 点击 保存 按钮，根据弹窗的提示定义文件名，即可将当前限位页面的参数保存到本地文件（json文件），并且设置机械臂的关节限位。 4 检查更新 点击 更新 图标按钮，将进入检查更新状态页面。 更新页面主要检查机械臂的Atom固件版本状态。 如果检查到机械臂的Atom固件不是最新版本时，将会提示需要更新固件信息。 5 初始姿态 点击初始姿态图标按钮, 将进入初始姿态页面 初始姿态页面：显示机械臂的初始姿态模型图、关节角度信息和坐标姿态信息。 6 测试 点击 测试 图标按钮，将进入测试页面。 测试 页面：主要测试机械臂的通讯连接、固件、舵机等状态。 点击 开始检测 按钮，即可开始进行测试。 测试完成后，点击 保存测试日志 按钮，根据弹窗提示信息，即可将测试结果保存到本地日志文件。 ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/","title":"6 软件开发指南","keywords":"","body":"第六章 软件开发指南 1 使用环境 mycobot Pro 450 是基于 PC 开发和使用的。由于机械臂内没有内置系统，因此在使用过程中需要机械臂和 PC 相结合。使用前请先准备好 PC。 2 开发环境 为了满足机器人在不同场景下的多样化应用需求，我们对机器人进行了多种编程语言的适配。到目前为止，我们已经适配了以下主流编程语言，我们认为您可以使用以下任何一种语言进行开发。请务必严格按照说明进行操作。任何遗漏的步骤都可能导致相应语言无法成功运行。祝您顺利使用机器人。 6.1 Python 我们的机器人支持 Python，Python API 库的开发也日趋完善。机器人的关节角度、坐标、抓手和其他方面都可以通过 Python 进行控制。 6.2 基于 ROS1 开发使用 ROS（Robot Operating System）作为一个开源的机器人操作系统，为机器人的开发和控制提供了无限的可能性。我们的机器人可以通过ROS丰富的控制功能，通过模块化的方式对机器人进行控制。无论是关节控制、路径规划还是感知反馈，ROS都提供了相应的工具和库，使得控制过程更加灵活和高效。 6.3 基于 ROS2 开发使用 ROS 2（Robot Operating System 2）是一个灵活的软件框架，专为机器人软件开发而设计。我们的机器人可以通过它提供的硬件抽象、设备驱动、库函数、可视化工具、消息传递以及包管理等一系列服务和功能，使得应用程序的开发变得更为高效和模块化。 6.4 C++ C++是C语言的继承，既可以进行C语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计。使用c++语言，您可以通过我们公司开发的c++动态库，进行自由开发（坐标控制、角度控制、io控制、夹爪控制等），控制我们公司已经研发出来的部分机器人。 6.5 Communication 如果您对信息论、编码和机器人通信功能有一定的了解，那么您就应该明白，所有的通信都源于数据传输。为了方便用户操作机器人，我们开放了基于串口通信的通信协议。您可以使用串口助手或将其封装到您熟悉的任何编程语言中来控制机器人。 ← 上一章 | 下一节 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/","title":"6.1 基于python 开发使用","keywords":"","body":"Python 是什么？ 我司产品对于python的支持较为友好，对于pythonAPI库的开发也日益完善，通过python能对机器人的关节角度，坐标，夹爪等多方面进行操控，选择性较多，如果你想通过Python编程来控制我们的机械臂，那么您可学习该章节。 Python 由荷兰数学和计算机科学研究学会的 Guido van Rossum 于1990 年代初设计，作为一门叫做 ABC 语言的替代品。 Python 提供了高效的高级数据结构，还能简单有效地面向对象编程。 Python 语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的编程语言， 随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。 Python 解释器易于扩展，可以使用 C 或 C++（或者其他可以通过C调用的语言）扩展新的功能和数据类型。 Python 也可用于可定制化软件中的扩展程序语言。Python 丰富的标准库，提供了适用于各个主要系统平台的源码或机器码。 python开发使用引导 您可以根据以下指引来使用python对我们的机械臂进行开发 1.环境搭建 2.api说明 3.关节控制 4.坐标控制 5.IO控制 6.夹爪控制 7.机器人异常处理 ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/1_download.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/1_download.html","title":"6.1.1 环境搭建","keywords":"","body":"环境搭建 pymycobot 是一个和 myCobot 进行串口通讯的 Python 包，支持 Python3.5 及之后版本。 在使用 pymycobot控制机械臂之前需要搭建Python环境，下面就对Python的下载安装做出详细说明。 Linux系统 在控制台终端安装pymycobot库即可： pip install pymycobot --upgrade --user Windows 系统 Python下载和安装 适用设备： myCobot Pro 450 目前，Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的。由于3.x版越来越普及，我们的教程将以最新的3.10.7版本为例进行说明。 安装Python 注意：安装之前，请先确认您的电脑是64位还是32位。右键点击我的电脑，选择属性。如下图显示是64位的操作系统，所以选择64位的Python安装包。 Python官方下载地址： https://www.python.org/downloads/ 点击Downloads选项，开始下载Python，点击Add Python 3.10 to PATH,点击Install Now，开始安装Python 出现“Setup was successful”提示，说明安装完成 运行Python 安装成功后，打开命令提示符窗口（Win+R，输入cmd回车），敲入python后，会出现两种情况。 情况一： 出现图片中的提示表示Python安装成功。 出现提示符>>> 就表示我们已经在Python交互式环境中了，可以输入任何Python代码，回车后会立刻得到执行结果。 情况二： 假如输入错误（比如输入pythonn），则会出现错误提示： 注意：出现错误的信息一般都是没有配置环境变量导致的，可以参考下文 配置环境变量修改环境变量。 配置环境变量 由于Windows会根据一个Path的环境变量设定的路径去查找python.exe，如果没找到，就会报错。因此，如果安装时漏掉了勾选Add Python 3.10 to PATH，则需要手动把python.exe所在的路径添加到Path中，或者重新安装一遍Python，记得勾选上Add Python 3.10 to PATH选项即可。 以下是手动添加python.exe所在的路径步骤。 右键我的电脑–>选择属性–>选择高级系统设置–>选择右下角的环境变量： 环境变量主要有包括用户变量和系统变量，需要设置的环境变量就在这两个变量中。如下图所示： 用户变量是将自己的下载的程序可以在cmd命令中使用。把程序的绝对路径写到用户变量中即可使用，如下图所示： 以上步骤完成后，打开命令提示符窗口（Win+R，再输入cmd，回车），敲入Python，出现下图中的提示表示成功： PyCharm安装和使用 PyCharm是一款功能强大的Python编辑器，具有跨平台性。首先介绍PyCharm在Windows系统中的安装步骤。 下载地址： https://www.jetbrains.com/pycharm/download/#section=windows 下载安装 进入该网站后，我们会看到如下界面： 根据界面介绍下载文件，Professional表示专业版，Community是社区版，推荐安装社区版，因为是免费使用的。 下载好之后开始安装，点击Next： 按照个人喜好选择相应选项，然后点击Next： 出现下图界面继续点击Next： 点击Finish结束安装： 创建项目 PyCharm安装完成之后进入该软件，创建第一个程序。 单击桌面上的PyCharm图标，进入到PyCharm中，如下图所示，点击New Project： 点击之后找到Interpreter，开始对解释器进行设置，点击Add Interpreter： 点击New，找到python.exe存储位置，勾选Inherit global site-package选项： 设置Location。Location是存储PyCharm项目的地方，可根据需要自行选择。 新建PyCharm文件。右击箭头指向的文档图标，点击New，点击Python File，新建成功。 命名Python File： 文件创建成功后便进入如下的界面，便可以编写自己的程序了 使用之前 固件烧录。固件是指设备内部保存的设备“驱动程序”。操作系统只有通过固件才能按照标准的设备驱动实现特定机器的运行动作。不同版本的机械臂需要烧录不同的固件（可以参考 MyStudio章节）。 pymycobot安装。打开一个控制台终端(快捷键Win+R,输入cmd进入终端)，输入以下命令： pip install pymycobot --upgrade --user 出现了以下字样则证明pymycobot包安装成功 源码安装。打开一个控制台终端(快捷键Win+R,输入cmd进入终端)，输入以下命令即可安装： git clone -b develop https://github.com/elephantrobotics/pymycobot.git #其中填写你的安装地址，不填默认在当前路径 cd /pymycobot #进入到下载包的pymycobot文件夹 #根据你的python版本运行下面其一命令 # Install python3 setup.py install Python简单使用 上述准备工作完成之后，开始通过Python代码实现对机械臂的操控。这里以MyCobot Pro 450版本为例进行演示。 首先，打开您安装好的PyCharm，新建一个Python文件，输入以下代码，导入我们的库： from pymycobot import Pro450Client 注意： 如果输入from pymycobot.mycobotpro450 import MyCobotPro450，字体下方没有出现红色波浪线证明已经安装成功可以使用了，如果出现红色波浪线可以参考如何安装API库 ，如何调用API库。 如果不想通过上述命令安装API库，可以通过以下github下载项目到本地。 首先，进入项目地址：https://github.com/elephantrobotics/pymycobot/tree/develop 。然后点击网页右边Code按钮，再点击Download ZIP下载到本地，将压缩包pymycobot文件项目中的 pymycobot文件夹放入你python依赖库目录中，就可以直接导入使用。 简单演示 import time from pymycobot import Pro450Client pro450 = Pro450Client('192.168.0.232', 4500) # 客户端连接通信 print(pro450.get_angles()) # 读取全关节角度信息 pro450.send_angle(1, 90, 50) # 控制J1关节运动至90度，速度为50 ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/2_API.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/2_API.html","title":"6.1.2 API说明","keywords":"","body":"Pro 450 Python Socket API [toc] API 使用介绍 API（Application Programming Interface），又称应用程序编程接口函数，是预先定义好的函数。使用以下函数接口时，请在一开始就导入我们的API库，导入方式为输入如下代码，否则将无法成功运行： # Example from pymycobot import Pro450Client pro450 = Pro450Client('192.168.0.232', 4500) print(pro450.get_angles()) 1. 系统状态 get_system_version() 功能： 读取机器主控版本 返回值： 主控版本号 get_modified_version() 功能：读取修正版本号，仅内部使用 返回值： 修正版本号 get_robot_type() 功能： 检测机器型号 返回值： 定义规则：实际机器型号。例如，MyCobot Pro 450 型号为 4503 get_atom_version() 功能： 读取末端版本号 返回值： 版本号(float) get_tool_modify_version() 功能： 读取末端更正版本号 返回值： 更正版本号 2. 机器人整体运行状态 is_init_calibration() 功能： 检查机器是否已设置零位 返回值: bool: 如果机器人已初始化校准零位，则为 True，否则为 False get_fresh_mode() 功能: 查询运动模式 返回值: 0: 插补模式 1: 刷新模式 set_fresh_mode() 功能: 设置刷新模式 参数: 1: 总是首先执行最新的命令。 0: 以队列的形式按顺序执行指令。 get_debug_state() 功能: 获取当前机器人的调试日志模式。 返回值: int: 当前调试日志状态。 0: 不记录任何调试日志 1: 仅常规调试日志 (_debug.log) 2: 仅运动相关日志 (_move.log) 3: 常规 + 运动相关日志 (_debug.log + _move.log) 4: 仅电机读/控制频率日志 (_clock_rate_debug.log) 5: 常规 + 电机频率日志 (_debug.log + _clock_rate_debug.log) 6: 运动 + 电机频率日志 (_move.log + _clock_rate_debug.log) 7: 记录全部日志 set_debug_state(log_state) 功能: 设置当前机器人的调试日志模式。 参数: log_state: int, 调试日志状态（0 ~ 7） 0: 不记录任何调试日志 1: 仅常规调试日志 (_debug.log) 2: 仅运动相关日志 (_move.log) 3: 常规 + 运动相关日志 (_debug.log + _move.log) 4: 仅电机读/控制频率日志 (_clock_rate_debug.log) 5: 常规 + 电机频率日志 (_debug.log + _clock_rate_debug.log) 6: 运动 + 电机频率日志 (_move.log + _clock_rate_debug.log) 7: 记录全部日志 返回值：int 1-成功 0-失败 -1-错误 3. 机器人异常检测 get_robot_status() 功能： 机器人错误安全状态 返回值: 0 - 正常。其他 - 机器人触发碰撞检测 servo_restore(joint_id) 功能：清除关节异常 参数： joint_id: int. 关节 id 1 - 6，254-所有关节恢复。 get_comm_error_counts(joint_id) 功能：读取通信异常次数 参数： joint_id: int. 关节 id 1 - 6 4.MDI Mode and Operation get_angles() 功能： 获取所有关节的度数 返回值：list所有度数的浮点列表 send_angle(id, degree, speed) 功能： 向机械臂发送一个关节度数 参数： id：关节 id（genre.Angle），范围 int 1-6 degree：度数值（float） | 关节 Id | 范围 | | ---- | ---- | | 1 | -165 ~ 165 | | 2 | -120 ~ 120 | | 3 | -158 ~ 158 | | 4 | -165 ~ 165 | | 5 | -165 ~ 165 | | 6 | -175 ~ 175 | speed：机械臂运动速度及范围 1~100 send_angles(angles, speed) 功能： 将所有角度发送到机械臂的所有关节 参数： angles：度数列表（List[float]），长度 6 speed：（int）1 ~ 100 get_coords() 功能： 从基于基准的坐标系获取机械臂坐标 返回值： 坐标浮点列表：[x, y, z, rx, ry, rz] send_coord(id, coord, speed) 功能： 向机械臂发送一个坐标 参数： id：向机械臂发送一个坐标，1-6 对应 [x, y, z, rx, ry, rz] coord：坐标值（float） | 坐标 ID | 范围 | | ---- | ---- | | x | -466 ~ 466 | | y | -466 ~ 466 | | z | -230 ~ 614 | | rx | -180 ~ 180 | | ry | -180 ~ 180 | | rz | -180 ~ 180 | speed：（int）1-100 send_coords(coords, speed) 功能：：发送整体坐标和姿态，将机械臂头部从原点移动到您指定的点 参数： coords: 坐标列表，值[x,y,z,rx,ry,rz]，长度6 speed (int)：1 ~ 100 stop(deceleration=False) 功能： 停止机器人运动 参数: deceleration: ： 是否减速并停止。默认为 False。 返回值: 1 - 已停止 0 - 未停止 -1 - 错误 is_moving() 功能： 检测机器人是否在运动 返回值: 1 正在运动 0 停止运动 -1 错误 5. 软件关节限位 get_joint_min_angle(joint_id) 功能: 获取指定关节的最小运动角度 参数: joint_id : 输入关节ID（范围1-6） 返回值：float 角度值 get_joint_max_angle(joint_id) 功能: 获取指定关节的最大运动角度 参数: joint_id : 输入关节ID（范围1-6） 返回值：float 角度值 参数(id, angle) 功能: 设置最小关节角度限制 参数: id : 输入关节ID（范围1-6） angle: 参考send_angle()接口中对应关节的限制信息，不得小于最小值 set_joint_max(id, angle) 功能： 设置最大关节角度限制 参数： id ：输入关节ID（范围1-6） angle：参考send_angle()接口中对应关节的限制信息，不得大于最大值 6. 关节电机辅助控制 get_servo_encoders() 功能：读取全关节编码器值 返回值： 长度为6的列表 is_servo_enable(servo_id) 功能： Detecting joint connection status 参数: servo id 1-7 返回值: 1: Connection successful 0: not connected -1: error is_all_servo_enable() 功能： Detect the status of all joint connections 返回值: 1: Connection successful 0: not connected -1: error --> set_servo_calibration(servo_id) 功能： 校准关节执行器的当前位置为角度零点 参数: servo_id: 1 - 6 set_break（joint_id, value） 功能： 设置关节刹车 参数： joint_id: int. 关节 id 1 - 6 value: int. 0 - 掉使能, 1 - 使能 返回值: 0 : 失败; 1 : 成功 set_motor_enabled(joint_id, state 功能： 设置机器人力矩状态。（释放关节接口） 参数： joint_id: int. 关节 id 1 - 6, 254-所有关节 state: int. 0 - 掉使能, 1 - 使能 7. 运行辅助信息 get_zero_pos() 功能: 读取零位编码器值 返回值: list6个关节的零编码器的值 get_servo_speeds() 功能：获取所有关节的运动速度 返回值： 一个列表 get_servo_currents() 功能：获取关节电流 返回值：一个列表, 0 ~ 5000 mA get_servo_status() 功能：获取所有关节的运动状态 返回值： 值为 0 表示没有错误 8. 末端 IO 控制 set_digital_output(pin_no, pin_signal) 功能: 设置末端IO状态 参数 pin_no (int): 引脚号，范围 1 ~ 2 pin_signal (int): 0 / 1, 0 - 低电平，1 - 高电平 返回值: 1: 完成 get_digital_input(pin_no) 功能: 获取末端IO状态 参数: pin_no (int)，范围 1 ~ 2 返回值: int 0 / 1, 0 - 低电平，1 - 高电平 9. 底部 IO 控制 set_base_io_output(pin_no, pin_signal) 功能：设置底部IO输出状态 参数： pin_no (int) 引脚号，范围 1 ~ 12 pin_signal (int): 0 - 低电平. 1 - 高电平 get_base_io_output(pin_no) 功能： 获取底部IO输入状态 参数: pin_no (int) 引脚号，范围 1 ~ 12 返回值: 0 - 低电平. 1 - 高电平 10. 设置末端485通信 tool_serial_read_data(data_len) 功能： 读取固定长度数据，读取前先读取缓冲区长度，读取完成后数据会被清除 参数： data_len (int): 需要读取的字节数，范围1~45 返回值: 0：未设置 1：设置完成 tool_serial_write_data() 功能： 末端485发送数据，数据长度范围为1~45字节 返回值: 0-正常 1-机器人触发碰撞检测 set_over_time(timeout=1000) 功能： 设置超时时间(默认1s,超时时间内未读取数据缓冲区会清除) 参数： timeout (int): 超时时间，单位ms，范围0~65535 flash_tool_firmware() 功能： 烧录末端固件 11. Pro 力控夹爪 get_pro_gripper_firmware_version( gripper_id=14) 功能：读取Pro力控夹爪固件主次版本号 参数： gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值: (float) 版本号, x.x get_pro_gripper_firmware_modified_version(gripper_id=14) 功能：读取Pro力控夹爪固件修正版本号 参数： gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值：(int) 修正版本号 set_pro_gripper_id(target_id, gripper_id=14) 功能：设置力控夹爪ID。 参数： target_id (int): 范围1 ~ 254。 gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值： 0 - 失败 1 - 成功 get_pro_gripper_id(gripper_id=14) 功能：读取力控夹爪ID。 参数： gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值：int 范围1 ~ 254。 set_pro_gripper_angle(gripper_angle, gripper_id=14) 功能：设置力控夹爪角度。 参数： gripper_angle (int): 夹爪角度，取值范围 0 ~ 100。 gripper_id (int): 夹爪ID，默认14，取值范围1 ~ 254。 返回值： 0 - 失败 1 - 成功 get_pro_gripper_angle(gripper_id=14) 功能：读取力控夹爪角度。 参数： gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值：int 0 ~ 100 set_pro_gripper_open(gripper_id=14) 功能：打开力控夹爪。 参数： gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值： 0 - 失败 1 - 成功 set_pro_gripper_close(gripper_id=14) 功能：关闭力控夹爪。 参数： gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值： 0 - 失败 1 - 成功 set_pro_gripper_calibration(gripper_id=14) 功能：设置力控夹爪零位。（首次使用需要先设置零位） 参数： gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值： 0 - 失败 1 - 成功 get_pro_gripper_status(gripper_id=14) 功能：读取力控夹爪夹持状态。 参数： gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值: 0 - 正在运动。 1 - 停止运动，未检测到夹到物体。 2 - 停止运动，检测到夹到物体。 3 - 检测到夹到物体之后，物体掉落。 set_pro_gripper_enabled(state, gripper_id=14) 功能：设置力控夹爪使能状态。 参数： state (bool) ：0 或者1， 0 - 掉使能 1 - 上使能 gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值： 0 - 失败 1 - 成功 set_pro_gripper_torque(torque_value, gripper_id=14) 功能：设置力控夹爪扭矩。 参数： torque_value (int) ：扭矩值，取值范围 0 ~ 100。 gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值： 0 - 失败 1 - 成功 get_pro_gripper_torque(gripper_id=14) 功能：读取力控夹爪扭矩。 参数： gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值: (int) 0 ~ 100 set_pro_gripper_speed(speed, gripper_id=14) 功能：设置力控夹爪速度。 参数： speed (int): 夹爪运动速度，取值范围 1 ~ 100。 gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值： 0 - 失败 1 - 成功 get_pro_gripper_speed(gripper_id=14) 功能：读取力控夹爪速度。 参数： gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值：夹爪默认运动速度，范围 1 ~ 100。 set_pro_gripper_abs_angle(gripper_angle, gripper_id=14) 功能：设置力控夹爪绝对角度。 参数： gripper_angle (int): 夹爪角度，取值范围 0 ~ 100。 gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值： 0 - 失败 1 - 成功 set_pro_gripper_io_open_angle(gripper_angle, gripper_id=14) 功能：设置力控夹爪IO张开角度。 参数： gripper_angle (int): 夹爪角度，取值范围 0 ~ 100。 gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值： 0 - 失败 1 - 成功 get_pro_gripper_io_open_angle(gripper_id=14) 功能：读取力控夹爪IO张开角度。 参数： gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值：int 0 ~ 100 set_pro_gripper_io_close_angle(gripper_angle, gripper_id=14) 功能：设置力控夹爪IO闭合角度。 参数： gripper_angle (int): 夹爪角度，取值范围 0 ~ 100。 gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值： 0 - 失败 1 - 成功 get_pro_gripper_io_close_angle(gripper_id=14) 功能：读取力控夹爪IO闭合角度。 参数： gripper_id (int): 夹爪ID，默认14，取值范围 1 ~ 254。 返回值：int 0 ~ 100 set_pro_gripper_mini_pressure(pressure_value, gripper_id=14) 功能：设置力控夹爪最小启动力 参数： pressure_value (int): 启动力值，范围 0 ~ 254。 gripper_id (int) 夹爪ID，默认14，取值范围 1 ~ 254。 返回值： 0 - 失败 1 - 成功 get_pro_gripper_mini_pressure(gripper_id=14) 功能：读取力控夹爪最小启动力 参数： gripper_id (int) 夹爪ID，默认14，取值范围 1 ~ 254。 返回值：(int) 启动力值，范围 0 ~ 254。 set_pro_gripper_protection_current(current_value, gripper_id=14) 功能：设置力控夹爪夹持电流 参数： current_value (int): 夹持电流值，范围 100 ~ 300。 gripper_id (int) 夹爪ID，默认14，取值范围 1 ~ 254。 返回值： 0 - 失败 1 - 成功 get_pro_gripper_protection_current(gripper_id=14) 功能：读取力控夹爪夹持电流 参数： gripper_id (int) 夹爪ID，默认14，取值范围 1 ~ 254。 返回值：(int) 夹持电流值，范围 100 ~ 300。 ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/3_angle.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/3_angle.html","title":"6.1.3 关节控制","keywords":"","body":"关节控制 对于串联式多关节机器人，关节空间的控制是针对机器人各个关节的变量进行的控制，目标是让机器人各个关节按照一定速度达到目标位置。 注意： 在设置角度时，不同系列的机械臂限位有所不同，具体可查看对应型号的参数介绍。 案例使用 import time from pymycobot import Pro450Client pro450 = Pro450Client('192.168.0.232', 4500) # 客户端连接通信 print(pro450.get_angles()) # 读取全关节角度信息 pro450.send_angles([0, 0, 0, 0, 0, 0], 50) # 发送全关节角度，速度为50，使机械臂所有关节运动到零位 time.sleep(3) pro450.send_angle(1, 90, 50) # 发送单关节角度，速度为50，使J1关节运动至90度 time.sleep(2) pro450.send_angles([0, -10, -123, 45, 0, 90], 50) # 发送全关节角度，速度为50 time.sleep(3) ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/4_coord.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/4_coord.html","title":"6.1.4 坐标控制","keywords":"","body":"坐标控制 主要用于实现智能规划路线让机械臂从一个位置到另一个指定位置。分为[x,y,z,rx,ry,rz]，其中[x,y,z]表示的是机械臂头部在空间中的位置（该坐标系为直角坐标系），[rx,ry,rz]表示的是机械臂头部在该点的姿态（该坐标系为欧拉坐标）。算法的实现以及欧拉坐标的表示需要一定的学术知识，这里不对其过多的讲解，我们只要懂得直角坐标系就可以很好的使用这个函数了。 注意： 在设置坐标时，不同系列的机械臂关节构造有所不同，同一组坐标，不同系列的机械臂会展示不同的姿态。 案例使用 import time from pymycobot import Pro450Client pro450 = Pro450Client('192.168.0.232', 4500) # 客户端连接通信 print(pro450.get_coords()) # 读取坐标姿态信息 pro450.send_angles([0, -10, -123, 45, 0, 0], 50) # 发送角运动到某一姿态以进行坐标控制，速度为 50 time.sleep(3) pro450.send_coord(1, 200, 50) # 发送单坐标控制，速度为50，使X轴运动到200mm的位置 time.sleep(2) pro450.send_coords([300, 86.8, 256.9, -178.0, 0.0, -90.0], 50) # 发送多坐标控制，速度为50 time.sleep(3) ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/5_IO.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/5_IO.html","title":"6.1.5 IO控制","keywords":"","body":"IO控制 IO即数据的输入与输出，在我们的机械臂的Basic和Atom上有多个pin脚，这里主要说明末端IO控制夹爪的使用 案例使用 import time from pymycobot import Pro450Client pro450 = Pro450Client('192.168.0.232', 4500) # 客户端连接通信 # 打开夹爪 def open_gripper(): pro450.set_digital_output(1, 0) # 设置引脚1为低电平 pro450.set_digital_output(2, 1) # 设置引脚2为高电平 time.sleep(0.05) # 关闭夹爪 def close_gripper(): pro450.set_digital_output(1, 1) # 设置引脚1为高电平 pro450.set_digital_output(2, 0) # 设置引脚2为低电平 time.sleep(0.05) # 夹爪重复开合两次 for i in range(2): open_gripper() time.sleep(3) close_gripper() ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/6_gripper.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/6_gripper.html","title":"6.1.6 夹爪控制","keywords":"","body":"夹爪控制 使用Python控制夹爪之前，需要先在机械臂上安装连接好夹爪。不同夹爪适配不同的机械臂，这里使用myGripper F100 Pro力控夹爪。 注意：使用之前，确保夹爪小屏幕上的通信方式为modbus模式，否则无法正常控制夹爪。参考 夹爪屏幕控制 案例使用 import time from pymycobot import Pro450Client pro450 = Pro450Client('192.168.0.232', 4500) # 客户端连接通信 print(pro450.get_pro_gripper_firmware_version()) # 读取夹爪主次版本号 time.sleep(1) print(pro450.get_pro_gripper_angle()) # 读取夹爪角度信息 time.sleep(1) pro450.set_pro_gripper_angle(50) # 设置夹爪角度为50 time.sleep(2) pro450.set_pro_gripper_speed(70) # 设置夹爪的运行速度为70 time.sleep(1) pro450.set_pro_gripper_open() # 设置夹爪全打开 time.sleep(2) pro450.set_pro_gripper_close() # 设置夹爪全闭合 time.sleep(2) ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/7_exception_description.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.1-python/7_exception_description.html","title":"6.1.7 机器人异常处理","keywords":"","body":"机械臂异常查看以及处理方法 当机械臂未成功执行运动指令时，可以在python终端中查询到对应的异常信息, 例如 读取机器人状态 状态反馈解析 正常情况下此接口反馈全0，读取机器人状态如下： from pymycobot import Pro450Client pro450 = Pro450Client('192.168.0.232', 4500) pro450.get_robot_status() #读取机器人状态 返回: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 表示机器人未在运动，无关节超限，无关节硬件报错、无关节软件报错 各个值完整解析如下: [保留，是否正在运动，J1是否超限，J2是否超限，J3是否超限，J4是否超限，J5是否超限，J6是否超限，J1是否电机硬件报错，J2是否电机硬件报错，J3是否电机硬件报错，J4是否电机硬件报错，J5是否电机硬件报错，J6是否电机硬件报错，J1是否软件通信报错，J2是否软件通信报错，J3是否软件通信报错，J4是否软件通信报错，J5是否软件通信报错，J6是否软件通信报错] 案例如下： [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0] 表示机器人在运动时报错，J4报控制错误。 [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 表示机器人J2超限。 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0] 表示机器人J5线路异常--接收报错 异常解决 关节超限 关节超限时，可使用以下解决方法之一： 执行超限回零接口： pro450.over_limit_return_zero() #机器人会以较慢速度回到原点 执行关节放松，手动将关节移动到限位内 pro450.set_motor_enable(254, 0) 关节硬件报错 大部分硬件报错可以使用异常恢复 pro450.servo_restore(joint_id) 若使用异常恢复或者机器人重启后，仍然频繁出现此问题，请联系我方工程师，具体各关节硬件详细报错见图1： 关节软件报错 软件上的错误反馈主要为：线路异常、can模块异常、编码器异常、掉使能等，当出现掉使能，请使用pro450.set_motor_enable(254, 1)上使能再运动，其它异常，请联系我方工程师，具体各关节软件详细报错见图2、图3： 机器人处于运动状态，机器人无法运动 机器人处于运动状态，发送运动点位不响应，请先将机器人运动停止，执行pro450.stop()、pro450.resume()，如仍然无法继续运动，请联系我方工程师。 ← 上一页 | 下一节 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.2-ROS1/":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.2-ROS1/","title":"6.2 基于 ROS1 开发使用","keywords":"","body":"ROS ROS 是开源的，是用于机器人控制的一种后操作系统，或者说次级操作系统。它提供类似操作系统所提供的功能，包含硬件抽象描述、底层驱动程序管理、共用功能的执行、程序间的消息传递、程序发行包管理，它也提供一些工具程序和库用于获取、建 立、编写和运行多机整合的程序。 ROS 运行时的 \"图 \"是一个基于 ROS 通信基础设施的松散耦合点对点进程网络。ROS 实现了多种不同的通信方法，包括基于同步 RPC 式通信的服务机制、基于异步流媒体数据的主题机制和用于数据存储的参数服务器。 ROS 并非实时框架，但可以嵌入实时程序中。Willow Garage 的 PR2 机器人使用一个名为 pr2_etherCAT 的系统来实时发送或接收 ROS 消息。ROS 还可以与 Orocos 实时工具包无缝集成。 ROS Logo ： 1 ROS 的设计目标和特点 很多人问：\"ROS 和其他机器人软件平台有什么不同？这个问题很难回答。因为 ROS 并不是一个集成了大多数功能或特性的框架。事实上，ROS 的主要目标是为机器人研发提供代码重用支持。ROS 是一个用于分布式进程的框架（即节点），这些进程封装在程序和功能包中，可以轻松共享和分发。ROS 还支持类似于代码库的联合系统，该系统还能实现项目的协作和分发。这种设计使项目的开发和实现从文件系统到用户界面都可以完全独立决定（ROS 没有限制）。同时，所有项目都可以与 ROS 的基本工具集成。 为了支持共享和协作的主要目标，ROS 框架还具有其他一些功能： 精简：ROS 的设计尽可能精简，这样为 ROS 编写的代码就可以与其他机器人软件框架一起使用。由此必然得出的结论是，ROS 可以轻松集成到其他机器人软件平台中：ROS 已经可以与 OpenRAVE、Orocos 和 Player 集成。 对 ROS 不敏感的库：ROS 的首选开发模式是编写不依赖于 ROS 的简洁库函数。 语言独立性：ROS 框架可以简单地用任何现代编程语言实现。ROS 已经实现了 Python 版本、C++ 版本和 Lisp 版本。它还有 Java 和 Lua 版本的实验库。 松耦合：ROS 中的功能模块封装在独立的功能包或元功能包中，易于共享。功能包中的模块以节点为单位运行。使用 ROS 标准 IO 作为接口，开发人员无需关注模块的内部实现，只要了解接口规则，就能实现模块间的重用和点对点松耦合。 便捷的测试：ROS 内置名为 rostest 的单元/集成测试框架，可轻松安装或卸载测试模块。 可扩展：ROS 适用于大型运行系统和大型开发流程。 免费、开源：它有许多开发人员和许多功能包。 2 为什么使用 ROS？ 通过 ROS，我们可以在虚拟环境中实现对机械臂的模拟控制。 我们将通过rviz将机械臂可视化，以多种方式操作机械臂，并通过MoveIt规划和执行机械臂的动作路径，从而达到自由控制机械臂的效果。 在接下来的章节中，我们将学习如何通过 ros 平台控制我们的产品。 MoveIt MoveIt 是目前最先进的机械臂运动操作软件，已用于 100 多台机器人。它集成了运动规划、控制、三维感知、运动控制、控制和导航等方面的最新成果，为开发先进的机器人应用提供了一个易于使用的平台，并为工业、商业、研发等领域的机器人新产品设计和集成评估提供了一个集成软件平台。 MoveIt Logo : 1 说明 MoveIt 是一个 ROS 集成开发平台，由各种用于操纵机械臂的功能包组成，包括运动规划、操作、控制、逆运动学、三维感知、碰撞检测等。 下图显示了 Moveit 提供的主节点move_group的高层结构。它就像一个组合器：将所有单独的组件整合在一起，为用户提供一系列操作和服务。 2 用户界面 用户可以通过三种方式访问 move_group 提供的操作和服务： 在 C++ 中，通过使用 move_group_interface 软件包，可以轻松使用 move_group。 在 Python 中，使用 moveit_commander 软件包。 通过图形用户界面：使用 Motion-commander 的 Rviz（ROS 可视化工具）。 move_group 可以通过 ROS 参数服务器进行配置，也可以通过该服务器获取机器人的 URDF 和 SRDF。 3 配置 move_group 是一个 ROS 节点。它使用 ROS 参数服务器获取三种信息： URDF - move_group 会在 ROS 参数服务器中查找 robot_description 参数，以获取机器人的 URDF。 SRDF - move_group 会在 ROS 参数服务器中查找 robot_description_semantic 参数，以获取机器人的 SRDF。SRDF 通常由用户使用 MoveIt 设置助手创建。 MoveIt configuration - move_group 将在 ROS 参数服务器中查找其他 MoveIt 特定配置，包括关节约束、运动学、运动规划、感知等信息。 这些组件的配置文件由 MoveIt 设置助手自动生成，并存储在机器人相应 MoveIt 配置包的配置目录中。有关配置助手的使用，请参阅： MoveIt 安装助手 ← 上一节 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.2-ROS1/6.2.1-Environment_Setup.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.2-ROS1/6.2.1-Environment_Setup.html","title":"6.2.1 环境搭建","keywords":"","body":"ROS1 环境搭建 本教程提供两种方式来搭建 Ubuntu20.04 + ROS1 开发环境： 方式一：导入虚拟机镜像（推荐） → 最快上手，内置完整环境 方式二：自定义安装环境 → 从零开始搭建，适合需要灵活定制的用户 方式一：导入虚拟机镜像 推荐：这是最快捷的方法，适合初学者。注意： 为了降低环境搭建难度，我们将给出 Linux 系统镜像（Ubuntu 20.04）、Virtual Box 安装包以及其扩展包。 接下来将教导大家如安装 Virtual Box 以及导入 Linux 系统镜像（默认用户为u202, 默认密码为 123）。 已内置环境： ROS1 + Moveit + Git + pymycobot + mycobot_ros 1 安装虚拟机 前往官方网站下载虚拟机 Virtual Box VirtualBox 安装包：Windows hosts VirtualBox 拓展包：VirtualBox 7.0.10 Oracle VM VirtualBox Extension Pack 当然，如果您已经拥有您的虚拟机，您可以跳过该步骤。 我们选择下载 Virtual box，因为它是免费的。 2 下载 Linux 系统镜像 点击下载：Linux ubuntu20.04 3 导入 Linux 系统镜像 在 Virtual Box 界面中点击 管理 -> 导入虚拟电脑 -> 选择虚拟镜像 -> 选择安装路径并进行导入，如下安装即可。 等待镜像导入即可，如下图即为安装成功。 然后启动系统即可，用户名为 u202, 默认密码为 123 4 更新pymycobot 为了能使用最新的机械臂驱动库，请打开终端执行下面命令更新： pip3 install pymycobot --upgrade 5 更新mycobot_ros 为了保证用户能及时使用最新的官方包，可以通过文件管理器进入/home/u202/catkin_ws/src文件夹，打开控制台终端（ 快捷键 Ctrl+Alt+T ) ，输入以下命令进行更新： # 克隆github上的代码 cd ~/catkin_ws/src # 删除原来的mycobot_ros包 sudo rm -rf mycobot_ros git clone --depth 1 https://github.com/elephantrobotics/mycobot_ros.git cd .. # 回到工作区 catkin_make # 在工作区中构建代码 source devel/setup.bash # 添加环境变量 方式二：自定义安装环境 1 虚拟机安装 前往官方网站下载虚拟机 Virtual Box VirtualBox 安装包：Windows hosts VirtualBox 拓展包：VirtualBox 7.0.10 Oracle VM VirtualBox Extension Pack 当然，如果您已经拥有您的虚拟机，您可以跳过该步骤。 我们选择下载 Virtual box，因为它是免费的。 2 新建虚拟机 在控制中选择新建 输入虚拟机名称和虚拟机存放的位置，选择虚拟机类型为Linux，选择 ubuntu64 位版本，进行下一步。 按照自己的需求配置内存大小，进行下一步。 选择现在创建虚拟硬盘，进行创建。 虚拟硬盘类型选择VDI类型，进行下一步。 分配虚拟硬盘大小，由于需要安装 ubuntu 系统，而且还会在该系统中进行操作，建议大小不要低于 20G。 3 下载 ubuntu 系统 请根据自己的需要选择 ubuntu 版本进行安装，默认使用 ubuntu 20.04系统版本 注意： ROS2需要下载20.04 版本。 20.04 版本 每个版本的安装方法和过程都是相同的，这里以 18.04 版本作为例子进行安装 下载完成后有如图文件： 4 导入 ubuntu 到虚拟机中 在 Virtual box 中找到之前安装的虚拟机，进入设置，并在存储中给控制器分配光盘： 然后打开虚拟机进行 ubuntu 安装，并点击启动。 5 ubuntu 安装 等待系统启动，进入欢迎界面，选中“中文（简体）”，并点击“安装 Ubuntu”按钮； 点击“继续”按钮； 选中“清除整个磁盘并安装 Ubuntu”选项，点击“现在安装”按钮； 在弹出的对话框中点击“继续”按钮； 设置地理位置，点击“继续”按钮； 设置用户名和密码，点击“继续”按钮； 进入系统安装界面，请耐心等待； 待安装完成，在弹出的对话框中，点击“现在重启”按钮，完成安装。 6 ROS 安装 基本的开发环境搭建需要安装机器人操作系统 ROS、MoveIt 以及 git 版本管理器，以下分别介绍其安装方法及流程。 myCobot Pro 450 的设备可参考以下介绍的安装方式及流程。 在这里我们选择的系统为 Ubuntu 20.04, 对应 ROS 版本为 ROS Noetic NOTE: 目前我们不提供 windows 安装 ROS 的任何参考, 若有需要请参考 https://www.ros.org/install/ 6.1 开始安装 1 添加源 Ubuntu 本身的软件源列表中没有 ROS 的软件源，所以需要先将 ROS 软件源配置到软件列表仓库中，才能下载 ROS 。打开一个控制台终端(快捷键Ctrl+Alt+T),输入如下指令： 官方源： sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' 若下载速度缓慢，推荐就近选择一个镜像源替换上面的命令。例如，Tsinghua University 为： sudo sh -c '. /etc/lsb-release && echo \"deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main\" > /etc/apt/sources.list.d/ros-latest.list' 这里会要求输入用户密码，输入安装 Ubuntu 时设置的用户密码即可。 2 设置秘钥 配置公网秘钥,这一步是为了让系统确认我们的路径是安全的的，这样下载文件才没有问题，不然下载后会被立刻删掉： sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 执行结果显示如下： 3 安装 在加入了新的软件源后，需要更新软件源列表，打开一个控制台终端(快捷键Ctrl+Alt+T),输入如下指令： sudo apt-get update 执行安装 ROS，打开一个控制台终端(快捷键Ctrl+Alt+T),请按照自己的 Ubuntu 版本选择输入以下指令： # Ubuntu 20.04 sudo apt install ros-noetic-desktop-full 这里推荐安装完整的 ROS，防止库和依赖的缺失。 安装过程耗时比较长，需要耐心等待 若安装过程中，控制台终端出现如下错误信息，则需要更换/etc/apt/sources.list 中的软件源列表。 打开一个控制台终端(快捷键Ctrl+Alt+T)，输入如下指令： sudo gedit /etc/apt/sources.list 将 sources.list 中的官方软件源全部替换成下面的阿里云软件源： Ubuntu 20.04 版本： deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse 配置完成后，sources.list 文件内容如下所示，点击保存并退出。 更新软件源列表，在控制台终端输入: sudo apt-get update 在控制台终端输入安装 ROS 的指令： # Ubuntu 20.04 sudo apt install ros-noetic-desktop-full 安装过程耗时比较长，需要耐心等待 4 配置 ROS 环境到系统 rosdep 让你能够轻松地安装被想要编译的源代码，或被某些 ROS 核心组件需要的系统依赖，在终端依次执行以下命令，打开一个控制台终端(快捷键Ctrl+Alt+T)。 如果您的系统没有安装 rosdep,请使用命令sudo apt install python-rosdep进行安装。 如果您的安装的 Ubuntu 系统是 20.04 版本，请使用命令sudo apt install python3-rosdep进行安装，完成后执行 rosdep 初始化命令。 初始化 rosdep： sudo rosdep init 若出现如下图所示的错误提示： 解决方法： 修改 hosts 文件，控制台终端输入下面的指令： sudo gedit /etc/hosts 在文件内容末端，加入以下两个网址的 IP 地址实现访问： 199.232.28.133 raw.githubusercontent.com 151.101.228.133 raw.github.com 修改完成后，在控制台终端执行： sudo rosdep init rosdep update 初始化完成后，为了避免每次关掉终端窗口后都需要重新生效 ROS 功能路径，我们可以把路径配置到环境变量中，这样在每次打开新的终端时便可自动生效 ROS 功能路径 在终端依次执行以下命令，打开一个控制台终端(快捷键Ctrl+Alt+T)： 6.2 设置 ros 环境 执行以下命令： # Ubuntu 20.04 echo \"source /opt/ros/noetic/setup.bash\" >> ~/.bashrc source ~/.bashrc 6.3 安装 ROS 额外依赖项 在终端输入以下命令安装 ROS 额外依赖项，打开一个控制台终端(快捷键Ctrl+Alt+T)： sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential # Ubuntu 20.04 sudo apt install ros-noetic-joint-state-publisher-gui 6.4 验证安装 ROS 系统的启动需要一个 ROS Master，即节点管理器，我们可以在终端输入 roscore 指令来启动 ROS Master。 为了验证 ROS 是否安装成功，打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端执行以下命令： roscore 当显示如下界面，则表示 ROS 安装成功 roscore 命令启动了一个节点管理器，其作用就是用于节点管理，在一个 ros 系统中，有且只有一个，它是 ros 节点运行的前提，所以在执行启动 ros 节点前，第一步都需要执行 roscore。 更多更详细的安装指导，可以参考官方的安装指导，网址: http://wiki.ros.org/ROS/Installation 7 MoveIt 安装 MoveIt 是 ros 中一系列移动操作的功能包的组成，主要包含运动规划，碰撞检测，运动学，3D 感知，操作控制等功能。 7.1 更新软件源列表 打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端窗口输入以下命令，以更新软件源列表： sudo apt-get update 7.2 安装 MoveIt 打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端窗口输入以下命令，执行 MoveIt 的安装： # Ubuntu20.04 sudo apt-get install ros-noetic-moveit 8 git 安装 8.1 添加软件源 将 git 安装的软件源添加到 ubuntu 的软件源列表中，打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端窗口输入以下命令： sudo add-apt-repository ppa:git-core/ppa 8.2 更新软件源列表 打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端窗口输入以下命令，以更新软件源列表： sudo apt-get update 8.3 安装 git 打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端窗口输入以下命令，执行 git 的安装： sudo apt-get install git 8.4 验证安装 读取 git 版本，打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端窗口输入以下命令： git --version 在终端中可以显示 git 版本号，如下，即为安装成功 8.5 使用 在后续下载 ros 包需要用到 git，git 的使用可以参考下面链接： https://git-scm.com/book/zh/v2 https://www.runoob.com/git/git-tutorial.html 9 mycobot_ros 安装 mycobot_ros 是 ElephantRobotics 推出的，适配旗下桌面型六轴机械臂 mycobot 系列 的 ROS 包。 项目地址：http://github.com/elephantrobotics/mycobot_ros 9.1 前提 在安装包之前，请保证拥有 ros 工作空间。 这里我们给出创建工作空间的样例命令，默认为catkin_ws, 打开一个控制台终端(快捷键Ctrl+Alt+T)，在命令行输入以下命令： mkdir -p ~/catkin_ws/src # 创建文件夹 cd ~/catkin_ws/src # 进入文件夹 catkin_init_workspace # 把当前目录初始化为一个ROS工作空间 cd .. # 返回上级目录 catkin_make # 构建工作区中的代码。 添加工作空间的环境 官方默认的 ROS1 工作区是 catkin_ws。 # Ubuntu 20.04 echo \"source ~/catkin_ws/devel/setup.bash\" >> ~/.bashrc source ~/.bashrc 9.2 安装 NOTE： 本包依赖于 ROS 和 MoveIT，使用前确保以成功安装 ROS 和 MoveIT。 本包与真实机械臂的交互依赖于 PythonApi - pymycobot Api 项目地为：https://github.com/elephantrobotics/pymycobot 快速安装：pip install pymycobot --upgrade 执行 pip install pymycobot --upgrade 命令时，若出现如下图错误提示： 根据提示输入以下命令安装 pip sudo apt install python3-pip pip 安装完成后，终端再次执行 pip install pymycobot --upgrade 安装方式依赖于 Git，请确保电脑中已安装 Git。 官方默认的 ROS1 工作区是 catkin_ws。 cd ~/catkin_ws/src # 进入工作区的src文件夹中 # 克隆github上的代码 git clone --depth 1 https://github.com/elephantrobotics/mycobot_ros.git cd .. # 返回工作区 catkin_make # 构建工作区中的代码 source devel/setup.bash # 添加环境变量 至此 ROS1 环境搭建完成，ROS1 的使用请参考 ROS基础 or ROS基础功能案例 ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.2-ROS1/6.2.2-ROS_Basics.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.2-ROS1/6.2.2-ROS_Basics.html","title":"6.2.2 ROS 基础","keywords":"","body":"1 ROS 项目结构 1.1 catkin workspace Catkin workspace 是创建、修改和编译 Catkin 软件包的目录。Catkin 的工作区可以直观地描述为一个仓库，其中包含各种 ROS 项目，便于系统的组织、管理和调用。 Create workspace: mkdir -p ~/catkin_ws/src # 创建文件夹 cd ~/catkin_ws/src # 进入文件夹 catkin_init_workspace # 将当前目录初始化为 ROS 工作区 cd .. # 返回父目录 catkin_make # 在工作区中构建代码 catkin 的结构非常清晰。它包括三个路径：src、build 和 devel。在某些编译选项下，它还可能包含其他路径。但这三个文件夹是 catkin 编译系统的默认文件夹。它们的具体功能如下： src/: ROS catkin 软件包（源代码包） build/: catkin的缓存信息和中间文件 (CMake) devel/: 生成的目标文件（包括头文件、动态链接库、静态链接库、可执行文件等）、环境变量 一个简单的工作区是这样的 workspace_folder/ -- WORKSPACE src/ -- SOURCE SPACE CMakeLists.txt -- 'Toplevel' CMake 文件，由 catkin 提供 package_1/ CMakeLists.txt -- package_1 的 CMakeLists.txt 文件 package.xml -- package_1的package清单 ... package_n/ CMakeLists.txt -- package_n 的 CMakeLists.txt 文件 package.xml -- package_n的package清单 1.2 ROS 软件包 包不仅是 Linux 上的软件包，也是 catkin 编译的基本单位。我们使用 catkin_make 来编译的对象就是每个 ROS 软件包。 +--PACKAGE +-- CMakeLists.txt +-- package.xml +-- src/ +-- include/ +-- scripts/ +-- msg/ +-- srv/ +-- urdf/ +-- launch/ CMakeLists.txt: 定义软件包的名称、依赖关系、源文件、目标文件和其他编译规则。它是软件包的重要组成部分。 package.xml: 描述软件包的名称、版本号、作者、依赖关系等信息，是软件包不可或缺的组成部分。 src/: 存储 ROS 源代码，包括 C++ 源代码 (.cpp) 和 Python 模块 (.py) include/: 存储与 C++ 源代码相对应的头文件 scripts/: 存储可执行脚本，如 shell 脚本 (.sh) 和 Python 脚本 (.py) msg/: 以自定义格式（.msg）存储信息 srv/: 以自定义格式（.srv）存储服务 urdf/: 存储机器人的模型描述（.urdf 或 .xacro）和 3D 模型文件（.sda、.stl、.dae 等）。 launch/: 存储启动文件（.launch 或 .xml） 创建自己的 package: 命令格式: catkin_create_pkg 命令会要求你输入软件包名称。如有必要，您还可以稍后添加其他依赖软件包： catkin_create_pkg [depend1] [depend2] [depend3] 例如: catkin_create_pkg beginner_tutorials std_msgs rospy roscpp 2 ROS 通信架构 2.1 Master and node（主机和节点） 1 Master（主机） 节点管理器。每个节点在启动前都必须向主节点注册，并管理节点之间的通信。 2 roscore 启动主控程序还将启动 rosout（日志管理）和参数服务器（参数管理器） 3 node（节点） pkg 中的 ROS 进程和运行可执行文件的实例。 $rosrun [pkg_name] [node_name] # 启动 $rosnode list # 列出当前运行的节点信息 $rosnode info [node_name] # 显示节点的详细信息 $rosnode kill [node_name] # 结束一个节点 4 launch 启动主节点和多个节点 $roslaunch [pkg_name] [file_name.launch] 2.2 Service and Topic（服务和主题） 我们提供一些与 mycobot 互动的服务和话题。 1 Service 在命令行中输入: source ~/catkin_ws/devel/setup.bash # 添加环境变量 roslaunch mycobot_pro450_communication communication_service.launch 支持参数： port：连接串行字符 baud：波特率 打开新的命令行: # 显示活动服务信息 rosservice list #/get_joint_angles #/get_joint_coords #/set_joint_angles #/set_joint_coords #/switch_gripper_status 相关命令和说明: 命令 详细说明 rosservice list 显示活动服务信息 rosservice info [service name] 显示指定服务的信息 rosservice type [service name] 显示服务类型 rosservice find [service name] 查找指定服务类型的服务 rosservice uri [service name] 显示 ROSRPC URI 服务 rosservice args [service name] 显示服务参数 rosservice call [service name] [parameters] 请求提供带输入参数的服务 2 主题 在命令行中输入: source ~/catkin_ws/devel/setup.bash roslaunch mycobot_pro450_communication communication_topic.launch 支持参数: port：连接串行字符 baud：波特率 打开新的命令行： # 显示活动服务信息 rostopic list #/mycobot/angles_goal #/mycobot/coords_goal #/mycobot/angles_real #/mycobot/coords_real #/mycobot/pump_status 相关命令和说明: 命令 详细说明 rostopic list 显示活动主题列表 rostopic echo [topic name] 实时显示指定主题的信息内容 rostopic find [type name] 显示带有指定类型信息的线程 rostopic type [topic name] 显示指定主题的信息类型 rostopic bw [topic name] 显示指定主题的信息带宽（带宽） rostopic hz [topic name] 显示指定主题的信息数据发布周期 rostopic info [topic name] 显示指定主题的信息 rostopic pub [topic name] [message type] [parameters] 以指定的主题名称发布消息 服务与主题的区别: 服务 主题 同步 异步 同步 沟通模式 pub/sub server/client 基本协议 ROSTCP/ROSUDP ROSTCP/ROSUDP 反馈机制 No Yes 缓冲区 Yes No 实时 弱 强 节点关系 多对多 一对多 适用情景 数据传输 逻辑处理 您可以访问服务 和主题 了解有关使用这两项功能的更多信息 2.3 msg 和 srv 简介 msg：msg 文件是描述 ROS 消息字段的简单文本文件。 srv：srv 文件用于描述服务。它由两部分组成：请求（request）和响应（response）。 msg 文件保存在软件包的 msg 目录中，srv 文件保存在 srv 目录中。 1 rosmsg rosmsg 是一种命令行工具，用于显示有关 ROS 消息类型的信息。 rosmsg 演示: rosmsg show # 显示信息描述 rosmsg info # 显示信息 rosmsg list # 列出所有消息 rosmsg md5 # 显示 md5 加密信息 rosmsg package # 显示功能包下的所有信息 rosmsg packages # 列出包含信息的功能包 rosmsg list 将列出当前 ROS 中的所有 msgs rosmsg packages 列出包含信息的所有软件包 rosmsg package 列出软件包下的所有 msgs //rosmsg package # 软件包名称 rosmsg package turtlesim rosmsg show 显示信息描述 //rosmsg show # 消息名称 rosmsg show turtlesim/Pose # 结果: float32 x float32 y float32 theta float32 linear_velocity float32 angular_velocity rosmsg info 工作原理与 rosmsg 显示相同 rosmsg md5 一种确保数据传输一致性的检查算法 2 rossrv rossrv 是一种显示 ROS 服务类型信息的命令行工具，其语法与 rosmsg 非常相似。 rossrv show # 显示服务信息详情 rossrv info # 显示服务信息 rossrv list # 列出所有服务信息 rossrv md5 # 显示 md5 加密服务信息 rossrv package # 显示软件包下的所有服务信息 rossrv packages # 显示包含服务信息的所有软件包 rossrv list 将列出当前 ROS 中的所有 srv 消息 rossrv packages 列出包含服务信息的所有软件包 rossrv package 列出软件包下的所有 msgs //rossrv package # 软件包名称 rossrv package turtlesim rossrv show 显示信息描述 //rossrv show # 消息名称 rossrv show turtlesim/Spawn # result: float32 x float32 y float32 theta string name --- string name rossrv info 效果与 rossrv show 相同 rossrv md5 对服务数据使用 md5 校验和（加密 3 URDF 简介 统一机器人描述格式（Unified Robot Description Format），简称 URDF。ROS 中的 urdf 包包含 URDF 的 C++ 解析器，URDF 文件以 XML 格式描述机器人模型。 *URDF 不能单独使用，需要与 Rviz 或 Gazebo 结合使用。URDF 只是一个需要在 Rviz 或 Gazebo 中渲染成图形机器人模型的文件。 3.1 urdf 文件说明 代码示例: 这里只截取部分代码进行显示： 可以看出，urdf 文件并不复杂，主要由 \"link \"和 \"joint \"两部分组成，这两部分不断重复。 3.2 link 部分 link 元素描述了一个具有惯性、视觉特征和碰撞属性的刚体 3.2.1 属性 名字： 用于描述 link 本身的名称 3.2.2 内容 (可选的) 连杆的惯性特性 (可选，未指定时默认为身份) 定义惯性参考系相对于连杆坐标系的参考坐标。该坐标必须在连杆重心处定义，其坐标轴不得与惯性主轴平行。 xyz (可选，默认为零向量) 表示在 x、y、z x、y、zx、y、z 方向上的偏移量，单位为米。 rpy(可选：defaults to identity if not specified) 表示坐标轴沿 RPY 方向的旋转角度，单位为弧度。 连杆的质量特性 3×3 转动惯量矩阵，由六个独立量组成：ixx、ixx、ixz、iyy、iyz、izz。 (可选的) 连杆的视觉属性。它用于指定连杆显示的形状（矩形、圆柱形等）。同一连杆中可以有多个视觉元素，连杆的形状由两个元素构成。一般来说，模型比较复杂，可以通过 soildwork 绘制生成 stl 调用，简单的形状如添加末端效应器可以直接编写。同时，可以根据理论模型与实际模型的差距调整几何图形的位置。 (可选的) 连杆几何形状的名称。 (可选，未指定时默认为身份) 相对于连杆坐标系的几何坐标系。 xyz (可选：默认为零向量) 表示在 x、y、z x、y、zx、y、z 方向上的偏移量，单位为米。 rpy (可选：defaults to identity if not specified) 表示坐标轴沿 RPY 方向的旋转角度，单位为弧度。 （必需） 可视化的形状，可以是以下形状之一： 一个包含长、宽、高等元素的矩形。原点位于中心。 圆柱体，元素包括半径和长度。原点中心。 球体，包含半径的元素。原点位于中心。 由文件确定的网格还提供了一个比例尺来定义其边界。建议使用 Collada .dae 文件，也支持 .stl 文件，但必须是本地文件。 (可选) 可视化组件的材料。它可以在链接标记之外定义，但必须在机器人标记之内。在链接标记外定义时，链接名称必须加引号。 (可选) 颜色，由红/绿/蓝/α 组成，范围 [0,1]。 (可选) 材料属性，由文件定义。 (可选) 连杆的碰撞属性。碰撞属性不同于连杆的视觉属性，通常使用简单的碰撞模型来简化计算。同一连杆可以有多个碰撞属性标签，连杆的碰撞属性表示由其定义的一组几何图形组成。 (可选) 指定连杆几何形状的名称 (可选，defaults to identity if not specified) 碰撞组件的参考坐标系是相对于链接坐标系的参考坐标系而言的。 xyz (可选, 默认零向量) 表示在 x、y、z x、y、zx、y、z 方向上的偏移量，单位为米。 rpy (可选, defaults to identity if not specified) 表示坐标轴沿 RPY 方向的旋转角度，单位为弧度。 与上述几何元素描述相同 详细的元素和每个元素的作用可登录 官方文档 查看 3.3 joint part 关节(JOINT)部分描述了关节的运动学和动力学特性，并规定了关节的安全限制。 3.3.1 joint 特性: name： 指定关节的唯一名称 type： 指定接头类型，类型可以是以下之一： revolute - 沿轴线旋转的铰链关节，其范围由上下限指定。 棱柱形 Continuous - 连续铰接接头，可绕轴旋转，没有上下限。 固定 Prismatic - 沿轴滑动的滑动接头，其滑动范围由上下限规定。所有自由度都被锁定。这种关节不需要轴、校准、动力学、限值或安全控制器。 浮动 Floating - 该关节允许所有 6 个自由度的运动。 平面 Plane - 该关节允许在垂直于轴线的平面内运动。 3.3.2 关节要素 (可选，defaults to identity if not specified) 在从父链接到子链接的转换中，接头位于子链接的原点。修改该参数可以调整连杆的位置。可用于调整实际模型与理论模型之间的误差，但不建议大幅修改，因为该参数会影响连杆 stl 的位置，容易影响碰撞检测效果。 xyz (可选: 默认为零向量) 代表 x、y、z 轴方向的偏移量，单位为米。 rpy (可选: 默认为零向量) 表示绕固定轴的旋转角度：滚动绕 x 轴，俯仰绕 y 轴，偏航绕 z 轴，用弧度表示。 (必需) 父链接的名称是必填属性。 link父链接的名称是机器人结构树中链接的名称。 (必需) 子链接的名称是必填属性。 link子链接的名称是机器人结构树中链接的名称。 (可选: 默认为 (1,0,0)) 关节轴位于关节坐标系中。这是旋转轴（旋 转关节）、棱柱关节的运动轴和平面关节的标准平面。该轴在关节坐标系中指定。修改该参数可以调整关节绕其旋转的轴线。它通常用于调整旋转方向。如果模型旋转方向与实际旋转方向相反，只需乘以-1 即可。固定关节和浮动关节不需要这个元素。 xyz(必需)代表轴向量的 x , y , z x,y,zx,y,z 分量，为标准化的向量。 (可选) 关节的参考点，用于修正关节的绝对位置。 rising (可选) 当关节向前移动时，参考点会触发一个上升沿。 falling (可选) 当关节向前移动时，参考点触发下降沿。 (可选) 该元素用于指定接头的物理属性。其值用于描述接头的建模性能，尤其是在模拟过程中。 (当关节是旋转或平移关节时必需) 该元素是关节运动学约束。 lower (可选, 默认为 0) 指定关节运动范围下限的属性（旋转关节的单位是弧度，棱柱关节的单位是米）。连续关节忽略该属性。 upper (可选, 默认为 0) 指定关节运动范围上限的属性（旋转关节的单位是弧度，棱柱关节的单位是米）。连续关节忽略该属性。 effort (必需) 该属性指定了接头运行时的最大力。 velocity (必需) 该属性指定了联合运行时的最大速度。 (可选) 该标签用于指定一个已定义的 joint，以模仿现有 joint。该 joint 的值可通过以下公式计算： value = multiplier * other_joint_value + offset joint(必需) 要模仿的关节名称。 multiplier(可选) 指定上述公式中的乘数系数。 offset(可选) 指定上述公式中的偏移项。默认值为 0 (可选) 该元素是安全控制限制。该元素下的数据将被读入 move_group，但实际上是无效的。Move_group 会跳过此限制，直接读取限制下的参数内容。同时，设置该元素可能会导致规划失败。 soft_lower_limit (可选, 默认为 0) 此属性指定联合安全控制边界的下限，即联合安全控制的起始限制点。该值必须大于上述限制的下限值。 soft_upper_limit (可选, 默认为 0) 该属性指定联合安全控制边界的上限，即联合安全控制的起始限制点。该值必须小于上述限制的上限值。 k_position(可选, 默认为 0) 该属性用于描述位置和速度之间的关系。 k_velocity(必需) 这一特性用于描述力和速度之间的关系。 详细的元素和每个元素的作用可以到 http://wiki.ros.org/urdf/XML/joint查看。 4 常用命令工具 在 ROS 中，有许多常用的命令行工具，可以帮助您开发、调试和管理 ROS 节点等。下面是一些常用的 ROS 命令行工具： 4.1 编译工作区 caktin_make 4.2 roscore 启动 ROS 主节点，在运行 ROS 节点之前，通常需要先启动 roscore roscore 4.3 rosrun 运行指定的 ROS 节点。 rosrun package_name node_name 4.4 roslaunch 使用启动文件启动一个或多个 ROS 节点。 roslaunch package_name launch_file.launch 4.5 rosnode 查看运行中的 ROS 节点信息。 rosnode list rosnode info node_name 4.6 rostopic 查看有关运行 ROS 主题的信息。 rostopic list rostopic echo topic_name 4.7 rosservice 查看和调用 ROS 服务。 rosservice list rosservice call service_name 4.8 rosparam 获取和设置 ROS 参数。 rosparam get parameter_name rosparam set parameter_name value 4.9 rosmsg 查看 ROS 消息类型。 rosmsg show message_type 4.10 rosdep 安装 ROS 软件包的依赖项。 rosdep install package_name 4.11 Environment variables 查看 ROS_PACKAGE_PATH 环境变量 echo $ROS_PACKAGE_PATH ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.2-ROS1/6.2.3-RVIZ_Introduction.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.2-ROS1/6.2.3-RVIZ_Introduction.html","title":"6.2.3 Rivz 使用","keywords":"","body":"rviz 简介和使用 rviz 是 ROS 中的三维可视化平台。它一方面可以实现外部信息的图形化显示，另一方面也可以通过 rviz 向对象发布控制信息，实现对机器人的监控。 1 安装 rviz 并介绍其界面 安装 ros 时，如果执行的是完全安装，rviz 已经安装，可以尝试直接运行；如果未完全安装，可以单独安装 rviz： # Ubuntu16.04 sudo apt-get install ros-kinetic-rviz # Ubuntu18.04 sudo apt-get install ros-melodic-rviz # Ubuntu20.04 sudo apt-get install ros-noetic-rviz 打开一个新终端（快捷键：Ctrl+Alt+T）并输入以下命令： roscore 然后打开一个新的终端（快捷键：Ctrl+Alt+T），输入以下命令打开 rviz。 rosrun rviz rviz # or rviz 打开 rviz，将显示以下界面： 各个区域介绍 左侧有一个显示器列表。显示器是在三维世界中绘图的设备，在显示列表中可能有一些可用选项。 顶部是一个工具栏，用户可以使用各种功能按钮选择具有多种功能的工具。 中间部分是 3D 视图：这是一个主屏幕，可以在其中查看各种三维数据。三维视图的背景颜色、固定框架、网格等可以在左侧显示的全局选项和网格项目中进行详细设置。 下面是时间显示区域，包括系统时间和 ROS 时间。 右侧为观察角度设置区，可设置不同的观察角度。 本部分仅作粗略介绍。如果您想了解更多详情，请访问 用户指南。 2 简单使用 本示例基于您已经完成的 环境搭建，并且您已成功地将公司代码从 GitHub 复制到您的虚拟机。 打开新终端（快捷键：Ctrl+Alt+T 输入命令 配置 ROS 环境。 cd ~/catkin_ws/ source devel/setup.bash 再次输入： roslaunch mycobot_pro_450 test.launch 打开 rviz，就会得到如下结果： 如果您想了解有关 rviz 的更多信息，请访问 官方文件。 ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.2-ROS1/6.2.4-Basic_Functions.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.2-ROS1/6.2.4-Basic_Functions.html","title":"6.2.4 基本功能案例","keywords":"","body":"机械臂的控制 注意：pymycobot 驱动库的版本必须大于4.0.0 1 滑块控制 --> 打开命令行并运行： roslaunch mycobot_pro_450 slider_control.launch # 如果末端配有myGripper F100 力控夹爪，则运行： roslaunch mycobot_pro_450 slider_control_force_gripper.launch 打开 rviz 和一个滑块组件，您将看到如下界面： 如果末端装有myGripper F100 力控夹爪，则会看到以下界面： 然后你就可以在 rviz 中 控制模型，通过拖动滑块使其移动。如果想让真实的霉菌机器人随着模型移动，则需要打开另一个命令行并运行： # Pro450 默认ip地址为\"192.168.0.232\"，端口号为 4500。 rosrun mycobot_pro_450 slider_control.py # 如果末端配有myGripper F100 力控夹爪，则运行： rosrun mycobot_pro_450 slider_control_force_gripper.py 请注意：由于在命令输入的同时机械臂会移动到模型目前的位置，在您使用命令之前请确保 rviz 中的模型没有出现穿模现象 不要在连接机械臂后做出快速拖动滑块的行为，防止机械臂损坏 2 模型跟随 除了上述控制外，我们还可以让模型跟随真实的机械臂移动。 --> 打开命令行，启动ros节点： roscore 然后打开新的命令行并运行： rosrun mycobot_pro_450 follow_display.py 运行成功后，需要同时按住机器末端按钮才能拖拽关节移动，终端输出信息如下 Trying to connect to real MyCobot Pro450... IP: 192.168.0.232, port: 4500 Please press the button at the end of the machine to drag the joint. 请按下机器末端按钮进行关节拖拽运动 Publishing ... 最后打开另一个命令行并运行： roslaunch mycobot_pro_450 follow_display.launch 它将 打开 rviz，显示模型跟随效果。此时拖动真实机械臂关节，仿真模型将会跟随真实机械臂运动。 3 GUI 控制 在前述内容的基础上，本软件包还提供了一个简单的图形用户界面（GUI）控制界面。连接到 mycobot。 --> 打开命令行： # Pro450 默认ip地址为\"192.168.0.232\"，端口号为 4500。 roslaunch mycobot_pro_450 simple_gui.launch # 如果末端配有myGripper F100 力控夹爪，则运行： roslaunch mycobot_pro_450 simple_gui_force_gripper.launch 如果末端装有myGripper F100 力控夹爪，则会看到以下界面： 运行成功后，终端信息输出如下： SUMMARY ======== PARAMETERS * /mycobot_services/ip: 192.168.0.232 * /mycobot_services/port: 4500 * /robot_description: 然后在GUI界面输入相关角度和坐标信息，点击对应按钮，即可实现真实机器与仿真模型的同步运动 注意： 使用夹爪开关按钮前，请确保自适应夹爪已连接至机器人手臂末端。 4 键盘控制 在 mycobot_pro_450 软件包中添加了键盘控制功能，并在 rviz 中执行实时同步。 该功能依赖于 pythonApi，因此请务必与真正的机械臂连接。 --> 打开命令行并运行： # Pro450 默认ip地址为\"192.168.0.232\"，端口号为 4500。 roslaunch mycobot_pro_450 teleop_keyboard.launch # 如果末端配有myGripper F100 力控夹爪，则运行： roslaunch mycobot_pro_450 teleop_keyboard_force_gripper.launch 运行效果如下 如果末端装有myGripper F100 力控夹爪，则会看到以下界面： mycobot 的信息将在命令行中输出如下： SUMMARY ======== PARAMETERS * /mycobot_services/ip: 192.168.0.232 * /mycobot_services/port: 4500 * /robot_description: 然后打开另一个命令行运行: rosrun mycobot_pro_450 teleop_keyboard.py 你将看到命令行输出如下: Mycobot Pro450 Teleop Keyboard Controller (ROS1 - Topic Version) --------------------------------------------------------- Movement (Cartesian): w (x+) a (y+) s (x-) d (y-) z (z-) x (z+) Rotation (Euler angles): u (rx+) i (ry+) o (rz+) j (rx-) k (ry-) l (rz-) Movement Step: + : Increase movement step size - : Decrease movement step size Gripper: g - open h - close Other: 1 - Go to init pose 2 - Go to home pose 3 - Save current pose as home q - Quit currently: speed: 50 change percent: 5 在该终端中，您可以控制机械臂的状态，并使用命令行中的按键移动机械臂。 注意：先输入2机械臂回到起始点之后，再进行其他坐标控制操作，终端会有如下提示： [WARN] [1758001794.385321]: Coordinate control disabled. Please press '2' first. [INFO] [1758001804.552778]: Home pose reached. Coordinate control enabled. [INFO] [1758001817.069637]: Home pose reached. Coordinate control enabled. [WARN] [1758001836.301070]: Returned to zero. Press '2' to enable coordinate control. [WARN] [1758001848.830702]: Coordinate control disabled. Please press '2' first. [INFO] [1758001863.383565]: Home pose reached. Coordinate control enabled. [WARN] [1758001933.596504]: Returned to zero. Press '2' to enable coordinate control. [WARN] [1758001942.051899]: Coordinate control disabled. Please press '2' first. 本脚本支持的参数： _speed：机械臂的运动速度 _change_percent：移动距离百分比 5 moveit 使用 mycobot_ros 整合了 MoveIt 部分。 打开命令行并运行： roslaunch mycobot_pro450_moveit demo.launch 运行效果如下： 终端将输出如下信息，代表成功启动moveit： [ INFO] [1757321505.678763337]: Loading robot model 'firefighter'... [ INFO] [1757321505.782983258]: Set joints of group 'arm_group' to pose 'init_pose'. [ INFO] [1757321505.783324504]: Fake controller 'fake_arm_group_controller' with joints [ joint1 joint2 joint3 joint4 joint5 joint6 ] [ INFO] [1757321505.783798265]: Returned 1 controllers in list [ INFO] [1757321505.792047465]: Trajectory execution is managing controllers [ INFO] [1757321505.792117958]: MoveGroup debug mode is ON Loading 'move_group/ApplyPlanningSceneService'... Loading 'move_group/ClearOctomapService'... Loading 'move_group/MoveGroupCartesianPathService'... Loading 'move_group/MoveGroupExecuteTrajectoryAction'... Loading 'move_group/MoveGroupGetPlanningSceneService'... Loading 'move_group/MoveGroupKinematicsService'... Loading 'move_group/MoveGroupMoveAction'... Loading 'move_group/MoveGroupPickPlaceAction'... Loading 'move_group/MoveGroupPlanService'... Loading 'move_group/MoveGroupQueryPlannersService'... Loading 'move_group/MoveGroupStateValidationService'... Loading 'pilz_industrial_motion_planner/MoveGroupSequenceAction'... [ INFO] [1757321505.848190702]: initialize move group sequence action [ INFO] [1757321505.853932419]: Reading limits from namespace /robot_description_planning Loading 'pilz_industrial_motion_planner/MoveGroupSequenceService'... [ INFO] [1757321505.867558584]: Reading limits from namespace /robot_description_planning [ INFO] [1757321505.884930897]: ******************************************************** * MoveGroup using: * - ApplyPlanningSceneService * - ClearOctomapService * - CartesianPathService * - ExecuteTrajectoryAction * - GetPlanningSceneService * - KinematicsService * - MoveAction * - PickPlaceAction * - MotionPlanService * - QueryPlannersService * - StateValidationService * - SequenceAction * - SequenceService ******************************************************** [ INFO] [1757321505.885485766]: MoveGroup context using planning plugin ompl_interface/OMPLPlanner [ INFO] [1757321505.885536833]: MoveGroup context initialization complete You can start planning now! [ INFO] [1757321508.935642298]: Loading robot model 'firefighter'... [ INFO] [1757321509.253483659]: Starting planning scene monitor [ INFO] [1757321509.257223628]: Listening to '/move_group/monitored_planning_scene' [ INFO] [1757321509.375270577]: Constructing new MoveGroup connection for group 'arm_group' in namespace '' [ INFO] [1757321510.628737935]: Ready to take commands for planning group arm_group. 基本路径规划操作如下： 如果想让真正的机械臂同步执行计划，则需要打开另一个命令行并运行： # Pro450 默认ip地址为\"192.168.0.232\"，端口号为 4500。 rosrun mycobot_pro450_moveit sync_plan.py 修改运动速度 为了防止关节在实际机械臂运动过程中晃动，需要降低关节的运动速度。 在sync_plan.py文件中，修改机械臂 Python API 的速度参数，此处改为 25。 ... def callback(data: JointState): \"\"\"Callback function for ROS JointState subscription. This function converts incoming joint positions (radians) to angles in degrees and sends them to the Pro450 robotic arm. Args: data (JointState): Joint state message containing joint positions. \"\"\" data_list = [] for index, value in enumerate(data.position): radians_to_angles = round(math.degrees(value), 2) data_list.append(radians_to_angles) rospy.loginfo(data_list) mc.send_angles(data_list, 25) ... 在 Moveit RViz 界面中，修改速度和加速度的缩放比例。在这里，将其改为 0.1，然后保存当前配置。 ← 上一页 | 下一节 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.3-ROS2/":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.3-ROS2/","title":"6.3 基于 ROS2 开发使用","keywords":"","body":"ROS2 介绍 ROS2的前身是ROS，ROS就是机器人操作系统（Robot Operating System）。 但ROS本身并不是一个操作系统，而是一个软件库和工具集。 Ros的出现解决了机器人各个部件的通信问题。 后来，越来越多的机器人算法被集成到ROS中。 ROS2继承了ROS，比ROS更强大更好用。 ROS2的设计目标和特点 ROS2肩负着改变智能机器人时代的历史使命。 在设计之初，就考虑到满足各种机器人应用的需求。 多机器人系统： 未来机器人不再是独立的个体，机器人之间也需要交流和协作。 ROS2为多机器人系统的应用提供了标准的方法和通信机制。 跨平台： 机器人应用场景不同，使用的控制平台也会有很大差异。 为了让所有的机器人都能运行ROS2，ROS2可以跨平台运行在Linux、Windows、MacOS、RTOS上。 实时： 机器人运动控制和许多行为策略都要求机器人是实时的。 例如，机器人必须在 100 毫秒内可靠地检测到前方的行人，或在 1 毫秒内完成运动学和动力学计算。 ROS2 是像这样实时提供基本要求的。 产品化： 大量的机器人已经进入我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接安装在 产品并进入消费市场。 这也对ROS2的稳定性和鲁棒性提出了巨大的挑战。 项目管理： 机器人开发是一项复杂的系统工程。 设计、开发、调试、测试、部署全过程的项目管理工具和机制也将在ROS2中得到体现，方便我们开发机器人。 发行版本 ROS2和Ubuntu对应的发行版本和维护周期。 ROS2 版本 发布日期 维护期限 Ubuntu 版本 Dashing 2019.5 2021.5 Ubuntu 18.04 (Bionic Beaver) Eloquent 2019.11 2020.11 Ubuntu 18.04 (Bionic Beaver) Foxy 2020.6 2023.5 Ubuntu 20.04(Focal Fossa) Galactic 2021.5 2022.11 Ubuntu 20.04(Focal Fossa) Humble 2022.5 2027.5 Ubuntu 22.04(Jammy Jellyfish) ROS和ROS2的比较 ROS2重新设计了系统架构。 两代ROS的架构变化如下： OS Layer： OS层。在ROS2中，它可以构建在linux或其他系统上，甚至是没有操作系统的裸机。 Middleware Layer： 中间件层。ROS1的通信系统基于TCPROS/UDPROS，而ROS2的通信系统基于DDS。 DDS是分布式实时系统中数据发布/订阅的标准解决方案。 Application Layer： 应用层。ROS1依赖于ROS Master，而在ROS2中，节点之间使用了一种名为“Discovery”的发现机制来帮助彼此建立连接。 ROS设计了一套完整的通信机制（主题、服务、参数、动作）来简化机器人开发。 通过这种机制，可以连接机器人的各个部件。 这种机制设计了一个叫做Ros Master的节点，所有其他组件的通信都必须经过master节点。 一旦主节点挂掉，就会导致整个机器人系统的通信崩溃！ 所以不能利用Ros的不稳定性来做一些自动驾驶等高风险的机器人。 此外，还有以下缺点： 基于TCP的通信实时性差，系统开销大 对 python3 支持不友好 消息机制不兼容 无加密机制，安全性低 ROS2首先移除ROS中存在的master节点。 去掉主节点后，各个节点可以通过DDS节点相互发现，各个节点是平等的，可以实现一对一、一对多、多对多的通信。 使用DDS进行通信后，可靠性和稳定性得到了增强。 与只支持Linux系统的ROS相比，ROS2还支持windows、mac甚至RTOS平台。 Moveit2 MoveIt2 简介 MoveIt2 是ROS2中的一个集成开发平台，由多种用于操纵机械臂的功能包组成，包括：运动规划、操作、控制、逆运动学、3D感知和碰撞检测等。 核心功能 运动规划（Motion Planning）MoveIt 2 提供基于 OMPL（Open Motion Planning Library）和其他第三方库的运动规划能力，支持多种规划算法和约束。 逆向运动学（Inverse Kinematics, IK）MoveIt 2 使用插件机制支持不同的 IK 解算器，能够快速计算机械臂的目标位姿。 碰撞检测与避免（Collision Detection & Avoidance）MoveIt 2 内置强大的碰撞检测功能，确保机器人在规划和执行运动时不会与周围环境发生碰撞。 动态场景感知（Dynamic Scene Awareness）MoveIt 2 支持动态更新环境模型，可以实时感知障碍物的变化。 控制与执行（Control & Execution）MoveIt 2 提供运动控制接口，与机器人硬件紧密集成，确保规划路径可以准确执行。 可视化工具（Visualization Tools）与 RViz 2 集成，支持直观的交互和调试功能，可以实时显示运动规划和执行过程。 MoveIt 2 的优势 基于 ROS 2 的实时性支持ROS 2 的 DDS 通信架构赋能 MoveIt 2，在实时性和可靠性上有显著提升。 模块化设计MoveIt 2 采用模块化架构，支持用户根据需要加载或替换模块，提供极大的灵活性。 跨平台支持MoveIt 2 支持在多种操作系统（如 Ubuntu、Windows）和硬件平台上运行。 活跃的社区支持MoveIt 2 拥有一个全球化的开发者社区，持续提供更新、功能扩展和技术支持。 配置 URDF - 通用机器人描述格式。 SRDF - 包括机器人的关节组、虚拟关节和被动关节、机器人姿势、自碰撞，通常由用户使用 MoveIt2 设置助手创建。 MoveIt2 配置 - 包括关节限制、运动学、运动规划、感知和其他信息。这些组件的配置文件由MoveIt2设置助手自动生成 (MoveIt2配置助手)，并存储在机器人的相应MoveIt2配置包的配置目录中。 ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.3-ROS2/6.3.1-EnvironmentSetup.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.3-ROS2/6.3.1-EnvironmentSetup.html","title":"6.3.1 环境搭建","keywords":"","body":"ROS2 环境搭建 本教程提供两种方式来搭建 Ubuntu20.04/22.04 + ROS1 开发环境： 方式一：导入虚拟机镜像（推荐） → 最快上手，内置完整环境 方式二：自定义安装环境 → 从零开始搭建，适合需要灵活定制的用户 方式一：导入虚拟机镜像 适用案例功能：使用ROS2或者MoveIt2 注意： 为了降低环境搭建难度，我们将给出 Linux系统镜像（Ubuntu 22.04）、Virtual Box安装包以及其扩展包。 接下来将教导大家如安装Virtual Box以及导入Linux系统镜像（默认密码为123）。 已内置环境： ROS2 humble + MoveIt2 + Git + pymycobot + mycobot_ros2 1 安装虚拟机 前往官方网站下载虚拟机Virtual Box 或者前往官方网站下载虚拟机 VM ware VirtualBox 安装包：Windows hosts VirtualBox 拓展包：VirtualBox 7.0.10 Oracle VM VirtualBox Extension Pack 当然，如果您已经拥有您的虚拟机，您可以跳过该步骤。 我们选择下载Virtual box，因为它是免费的。 2 下载Linux系统镜像 点击下载：Linux ubuntu22.04 3 导入Linux系统镜像 注意: 导入方式可参考ubuntu 20.04系统的导入方式 在Virtual Box界面中点击 管理 -> 导入虚拟电脑 -> 选择虚拟镜像 -> 选择安装路径并进行导入，如下安装即可。 等待镜像导入即可，如下图即为安装成功。 然后启动系统即可，默认密码为 123 4 更新pymycobot 为了能使用最新的机械臂驱动库，请打开终端执行下面命令更新： pip3 install pymycobot --upgrade 5 更新mycobot_ros2 为了保证用户能及时使用最新的官方包，可以通过文件管理器进入/home/u22/catkin_ws/src文件夹，打开控制台终端（ 快捷键 Ctrl+Alt+T ) ，输入以下命令进行更新： # 克隆github上的代码 cd ~/colcon_ws/src # 删除原来的mycobot_ros2包 sudo rm -rf mycobot_ros2 git clone --depth 1 https://github.com/elephantrobotics/mycobot_ros2.git cd .. # 回到工作区 colcon build # 在工作区中构建代码 source install/setup.bash # 添加环境变量 为了减少编译时间，可以单独编译某个功能包，其中 package_name 是具体的功能包名称，请根据实际进行修改。 cd ~/colcon_ws colcon build --packages-select package_name source install/setup.bash 方式二：自定义安装环境 1 虚拟机安装 注意： 安装虚拟机系统时，请安装Ubuntu 20.04 版本的系统，安装方法与 ubuntu 18.04 一致。若使用moveIt2的功能，需要安装 Ubuntu 22.04 版本的系统。 在 Linux 中安装不同版本的 Ubuntu 系统，具体安装方法请参阅 6.2 ROS1 环境搭建 章节。 2 ROS2 安装 要构建基本的开发环境，您需要安装机器人操作系统 ROS2 和 git 版本管理器。下面将介绍安装方法和过程。 2.1 选择版本 ROS2 和 ubuntu 之间有一一对应的关系。不同版本的 ubuntu 对应不同版本的 ROS2。参考网站如下：http://docs.ros.org/en/foxy/Releases.html 这里给出对应 Ubuntu 支持的 ROS2 版本: ROS2 版本 发布日期 维护截止日期 Ubuntu 版本 Foxy 2020 年 6 月 5 日 2023 年 5 月 Ubuntu 20.04(Focal Fossa) Galactic 2021 年 5 月 23 日 2022 年 11 月 Ubuntu 20.04(Focal Fossa) Humble 2022 年 5 月 23 日 2027 年 5 月 Ubuntu 22.04(Jammy Jellyfish) 请根据自己安装的 Ubuntu 版本进行对应 ROS2 版本的安装 如果版本不同，下载将会失败.在这里我们选择的系统为 Ubuntu 20.04 (推荐), 对应 ROS2 版本为 ROS2 Foxy NOTE: 目前我们不提供 windows 安装 ROS2 的任何参考, 若有需要请参考 http://docs.ros.org/en/foxy/Installation/Alternatives/Windows-Development-Setup.html 2.2 开始安装 1 添加源 Ubuntu 本身的软件源列表中没有 ROS2 的软件源，所以需要先将 ROS2 软件源配置到软件列表仓库中，才能下载 ROS2 。打开一个控制台终端(快捷键Ctrl+Alt+T),输入如下指令： 官方源： echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(source /etc/os-release && echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 若下载速度缓慢，推荐就近选择一个镜像源替换上面的命令。例如，huawei cloud 为： echo \"deb [arch=$(dpkg --print-architecture)] https://repo.huaweicloud.com/ros2/ubuntu/ $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 2 设置秘钥 配置公网秘钥,这一步是为了让系统确认我们的路径是安全的的，这样下载文件才没有问题，不然下载后会被立刻删掉： sudo apt install curl gnupg2 -y curl -s https://gitee.com/ohhuo/rosdistro/raw/master/ros.asc | sudo apt-key add - 3 安装 在加入了新的软件源后，需要更新软件源列表，打开一个控制台终端(快捷键Ctrl+Alt+T),输入如下指令： sudo apt-get update 执行安装 ROS2，打开一个控制台终端(快捷键Ctrl+Alt+T),请按照自己的 Ubuntu 版本选择输入以下指令： # Ubuntu 20.04 foxy版本 sudo apt install ros-foxy-desktop # Ubuntu 20.04 galactic版本 sudo apt install ros-galactic-desktop # Ubuntu 22.04 humble版本 sudo apt install ros-humble-desktop 安装过程耗时比较长，需要耐心等待 安装完成后刷新环境变量： source /opt/ros/foxy/setup.bash 2.3 设置 ros2 环境 为了避免每次关掉终端窗口后都需要重新生效 ROS2 功能路径，我们可以把路径配置到环境变量中，这样在每次打开新的终端时便可自动生效 ROS2 功能路径，在终端依次执行以下命令，打开一个控制台终端(快捷键Ctrl+Alt+T)执行以下命令： # Ubuntu 20.04 foxy版本 # 将 ros 环境加入到当前控制台的环境变量 echo \"source /opt/ros/foxy/setup.bash\" >> ~/.bashrc # Ubuntu 20.04 galactic版本 echo \"source /opt/ros/galactic/setup.bash\" >> ~/.bashrc # Ubuntu 22.04 humble版本 echo \"source /opt/ros/humble/setup.bash\" >> ~/.bashrc source ~/.bashrc 2.4 安装 ROS2 额外依赖项 在终端输入以下命令安装 ROS2 额外依赖项，打开一个控制台终端(快捷键Ctrl+Alt+T)： sudo apt install python3-argcomplete -y sudo apt install ros-foxy-xacro sudo apt-get install python3-colcon-common-extensions # Ubuntu 20.04 foxy版本 sudo apt install ros-foxy-joint-state-publisher-gui # Ubuntu 20.04 galactic版本 sudo apt install ros-galactic-joint-state-publisher-gui # Ubuntu 22.04 humble版本 sudo apt install ros-humble-joint-state-publisher-gui 2.5 验证安装 为了验证 ROS2 是否安装成功，打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端执行以下命令： ros2 当显示如下界面，则表示 ROS2 安装成功 3 MoveIt2 安装 注意： 这里仅提供 ubuntu 22.04系统的安装方式 MoveIt2 是 ros2 中一系列移动操作的功能包的组成，主要包含运动规划，碰撞检测，运动学，3D 感知，操作控制等功能。 3.1 更新软件源列表 打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端窗口输入以下命令，以更新软件源列表： sudo apt update 3.2 安装 MoveIt2 sudo apt-get install ros-humble-moveit sudo apt install ros-humble-ros2-control ros-humble-ros2-controllers ros-humble-joint-trajectory-controller ros-humble-joint-state-broadcaster 4 git 安装 4.1 更新软件源清单 打开控制台终端（快捷键：Ctrl+Alt+T），在终端窗口输入以下命令，更新软件源代码列表： sudo apt-get update 4.2 安装 git 打开控制台终端（快捷键：Ctrl+Alt+T），在终端窗口输入以下命令，执行 git 的安装： sudo apt-get install git 4.3 验证安装 阅读 git 版本，打开控制台终端（快捷键：Ctrl+Alt+T），在终端窗口输入以下命令： git --version 在终端中可以显示如下的 git 版本号，即安装成功。 5 mycobot_ros2 安装 mycobot_ros2 是 Elephant Robotics 推出的 ROS2 软件包，适用于其 mycobot 系列桌面六轴机械臂。 Project address: http://github.com/elephantrobotics/mycobot_ros2 5.1 前提 在安装包之前，请保证拥有 ros2 工作空间。 这里我们给出创建工作空间的样例命令，打开一个控制台终端(快捷键Ctrl+Alt+T)，在命令行输入以下命令： mkdir -p ~/colcon_ws/src # 创建文件夹 cd ~/colcon_ws colcon build # 编译工作空间 添加工作空间的环境 官方默认的 ROS2 工作空间是 colcon_ws。 echo \"source ~/colcon_ws/install/setup.bash\" >> ~/.bashrc source ~/.bashrc 5.2 安装 NOTE： 本包依赖于 ROS2 和 MoveIT2，使用前确保以成功安装 ROS2 和 MoveIT2。 本包与真实机械臂的交互依赖于 PythonApi - pymycobot Api 项目地为：https://github.com/elephantrobotics/pymycobot 快速安装：pip install pymycobot --upgrade 执行 pip install pymycobot --upgrade 命令时，若出现如下图错误提示： 在提示符下输入以下命令安装 pip sudo apt install python3-pip pip 安装完成后，终端再次执行 pip install pymycobot --upgrade 安装方式依赖于 Git，请确保电脑中已安装 Git。 请根据不同的ROS2版本选择下载不同的分支代码： Ubuntu 20.04 / ROS2 Foxy - branch foxy Ubuntu 20.04 / ROS2 Galactic - branch galactic Ubuntu 22.04 / ROS2 Humble - branch humble 官方默认的 ROS2 工作区是 colcon_ws。 cd colcon_ws/src # 进入工作区的src文件夹中 # 针对 humble 分支 git clone -b humble --depth 1 https://github.com/elephantrobotics/mycobot_ros2.git # 针对 foxy 分支 git clone -b foxy --depth 1 https://github.com/elephantrobotics/mycobot_ros2.git # 针对 galactic 分支 git clone -b galactic --depth 1 https://github.com/elephantrobotics/mycobot_ros2.git cd .. # 返回工作区 colcon build --symlink-install # 构建工作区中的代码，--symlink-install：避免每次调整 python 脚本时都需要重新编译 source install/setup.bash # 添加环境变量 为了减少编译时间，可以单独编译某个功能包，其中 package_name 是具体的功能包名称，请根据实际进行修改。 cd ~/colcon_ws colcon build --packages-select package_name source install/setup.bash 至此 ROS2 环境搭建完成，ROS2 的使用请参考 ROS2 基础知识 or ROS2 基础功能 ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.3-ROS2/6.3.2-ROS2_Basics.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.3-ROS2/6.3.2-ROS2_Basics.html","title":"6.3.2 ROS2 基础","keywords":"","body":"1 ROS2 项目结构 1.1 Colcon 工作区 Colocn 工作区是创建、修改和编译软件包的目录。Colcon 的工作区可以直观地描述为一个仓库，其中包含各种 ROS 项目，便于系统的组织、管理和调用。 Create workspace: mkdir -p ~/colcon_ws/src # 创建文件夹 cd ~/colcon_ws/ # 输入文件夹 colcon build # 在工作区中构建代码。 注意： colcon 支持选项 -symlink-install。这允许通过更改源空间中的文件（如 Python 文件或其他未编译的资源）来更改已安装的文件，从而加快迭代速度。避免每次修改 Python 脚本时都需要重新编译。 colcon build --symlink-install ROS 工作区是一个具有特定结构的目录。通常会有一个 src 子目录。在该子目录中，存放着 ROS 软件包的源代码。通常情况下，该目录一开始是空的。 colcon 会进行源代码外编译。默认情况下，它将创建以下目录作为 src 目录的同级目录： src/: 用于 ROS2 的 colcon 软件包（源代码包） build/: 存放中间文件的位置。例如，为每个软件包创建一个子文件夹，在其中调用 CMake。 install/: 每个软件包的安装位置。默认情况下，每个软件包都会安装到一个单独的子目录中。 log/: 包含每个 colcon 调用的各种日志信息。 ROS2 工作区的目录结构如下： WorkSpace --- 定制的工作空间 |--- build: 存放中间文件的目录。在此目录下，将为每个功能包创建一个单独的子目录。 |--- install: 安装目录中的每个功能包都将创建一个单独的子目录。 |--- log: 日志目录，用于存储日志文件。 |--- src: 用于存储功能包源代码的目录。 |-- C++ 功能包 |-- package.xml: 软件包信息，如：软件包名称、版本、作者、依赖关系。 |-- CMakeLists.txt: 配置编译规则，如源文件、依赖关系和目标文件。 |-- src: C++ 源文件目录。 |-- include: 头文件目录。 |-- msg: 消息接口文件目录。 |-- srv: 服务接口文件目录。 |-- action: 行动界面文件目录。 |-- Python 功能包 |-- package.xml: 软件包信息，如：软件包名称、版本、作者、依赖关系。 |-- setup.py: 类似于 C++ 功能包的 CMakeLists.txt。 |-- setup.cfg: 功能包基本配置文件。 |-- resource: 资源目录。 |-- test: 存储与测试相关的文件。 |-- 与函数包同名的目录：Python 源文件目录。 1.2 ROS2 包 软件包不仅是 Linux 上的软件包，也是 colcon 编译的基本单元。我们使用 \"colcon build \"编译的对象就是每个 ROS2 软件包。 创建自己的包： 使用 Python 创建软件包的命令语法是 ros2 pkg create --build-type ament_python 例如： ros2 pkg create --build-type ament_python --node-name my_node my_package 2 基本工具命令 本章将介绍 ROS2 的常用命令工具。 2.1 Topics ROS 2 将复杂的系统分解成许多模块化节点。主题是 ROS 图形的一个重要元素，是节点交换信息的总线。 主题是节点之间移动数据的主要方式之一，因此也是系统不同部分之间移动数据的主要方式之一。 具体参考: 官方教程 主题帮助 ros2 topics -h 启动海龟模拟和键盘控制 ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key 节点关系图 rqt_graph 了解与主题相关的命令 ros2 topics -h 主题列表 ros2 topic list ros2 topic list -t # Display the corresponding message type 查看主题内容 ros2 topic echo ros2 topic echo /turtle1/cmd_vel 显示与主题相关的信息，键入 ros2 topic info # 输出 /turtle1/cmd_vel 主题相关信息 ros2 topic info /turtle1/cmd_vel 显示接口相关信息 ros2 interface show # 输出几何_msgs/msg/Twist 接口相关信息 ros2 interface show geometry_msgs/msg/Twist 发布命令 ros2 topic pub '' # 发出速度命令 ros2 topic pub --once /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" # 以一定频率发出速度指令 ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 查看发布主题的频率 ros2 topic hz # 输出 /turtle1/cmd_vel 发布频率 ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 2.2 Nodes ROS 中的每个节点都应负责一个单一的模块目的（例如，一个节点负责控制车轮电机，一个节点负责控制激光测距仪等）。每个节点都可以通过主题、服务、操作或参数向其他节点发送和接收数据。 一个完整的机器人系统由许多协同工作的节点组成。在 ROS 2 中，单个可执行文件（C++ 程序、Python 程序等）可包含一个或多个节点。 具体参考: 官方教程 nodes 帮助 ros2 nodes -h 启动海龟模拟和键盘控制 ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key 查看节点列表 ros2 node list 查看节点关系图 m rqt_graph Remapping ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle ros2 node list 查看节点信息 ros2 node info ros2 node info /my_turtle 2.3 Servics 服务是 ROS 图中节点的另一种通信方式。与主题的 \"发布者-订阅者 \"模式相比，服务基于 \"调用-响应 \"模式。主题允许节点订阅数据流并获得持续更新，而服务只有在客户端特别调用时才会提供数据。 具体参考资料： 官方教程 服务帮助 ros2 service -h 启动海龟模拟和键盘控制 ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key 查看服务列表 ros2 service list # Display service list and message type ros2 service list -t 查看服务接收的信息类型 ros2 service type ros2 service type /clear 查找使用特定信息类型的服务 ros2 service find ros2 service find std_srvs/srv/Empty 查看服务信息类型定义 ros2 interface show .srv ros2 interface show std_srvs/srv/Empty.srv 调用服务命令清除行走轨道 ros2 service call ros2 service call /clear std_srvs/srv/Empty 生成一只新乌龟 ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: 'turtle2'}\" 2.4 Parameters 参数是节点的配置值。可以把参数看作节点的设置。节点可以将参数存储为整数、浮点数、布尔值、字符串和列表。在 ROS 2 中，每个节点都维护自己的参数。有关参数的更多背景信息，请参阅概念文档。 具体参考资料：官方教程 参数帮助 ros2 param -h 启动海龟模拟和键盘控制 ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key 查看服务列表 ros2 param list 获取参数值 ros2 param get ros2 param get /turtlesim background_g 设置参数值 ros2 param set ros2 param set /turtlesim background_r 150 导出参数值 ros2 param dump ros2 param dump /turtlesim 独立导入参数 ros2 param load ros2 param load /turtlesim ./turtlesim.yaml 同时启动节点和导入参数 ros2 run --ros-args --params-file ros2 run turtlesim turtlesim_node --ros-args --params-file ./turtlesim.yaml 2.5 Actions 行动是 ROS 2 中的通信类型之一，适用于长时间运行的任务。行动由三部分组成：目标、反馈和结果。 操作建立在主题和服务的基础上。它们的功能与服务类似，只是操作可以抢占（可以在执行时取消）。与只返回单一响应的服务不同，它们还能提供稳定的反馈。 行动使用客户端-服务器模式，类似于发布者-订阅者模式（在主题教程中有所描述）。行动客户端 \"节点向 \"行动服务器 \"节点发送目标，后者确认目标并返回反馈流和结果。 具体参考资料：官方教程 action 帮助 ros2 action -h 启动海龟模拟和键盘控制 ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key 按 G|B|V|C|D|E|R|T，实现旋转，按 F 取消。 查看节点操作的服务器和客户端 ros2 node info /turtlesim 查看行动列表 ros2 action list ros2 action list -t # show action type 查看行动信息 ros2 action info ros2 action info /turtle1/rotate_absolute 查看行动信息内容 ros2 interface show turtlesim/action/RotateAbsolute 发送行动目标信息 ros2 action send_goal ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: 1.57}\" # With feedback information ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: 0}\" --feedback 2.6 RQt RQt 是一个图形用户界面框架，它以插件的形式实现了各种工具和界面。人们可以在 RQt 中以停靠窗口的形式运行所有现有的图形用户界面工具！这些工具仍能以传统的独立方式运行，但 RQt 使其更易于在单一屏幕布局中管理所有不同的窗口。 具体参考资料：官方教程 您可以通过以下方式轻松运行任何 RQt 工具/插件： rqt rqt 帮助 rqt -h 启动海龟模拟和键盘控制 ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key 动作浏览器：/ Plugins -> Actions ->Action Type Browser 参数重新配置: / Plugins -> configuration ->Parameter Reconfigure 节点图: /Node Graph 控制转向: /Plugins -> Robot Tools -> Robot Steering 服务调用: /Plugins -> Services -> Service Caller 服务类型浏览器: Plugins -> Services -> Service Type Browser 消息发布: Plugins -> Topics -> Message Publisher 消息类型浏览器: Plugins -> Topics -> Message Type Browser 话题列表: Plugins -> Topics -> Topic Monitor 绘制曲线图: Plugins -> Visualization -> Plot 查看日志： rqt_console ros2 run rqt_console rqt_console ros2 run turtlesim turtlesim_node ros2 topic pub -r 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}\" 2.7 TF2 tf2 是一个变换库，用户可以利用它跟踪多个坐标框架的时间变化。tf2 将坐标框架之间的关系保存在一个以时间为缓冲的树状结构中，用户可以在任意时间点对任意两个坐标框架之间的点、矢量等进行变换。 具体参考资料：官方教程 让我们先安装演示软件包及其依赖项。 sudo apt-get install ros-foxy-turtle-tf2-py ros-foxy-tf2-tools ros-foxy-tf-transformations 跟随 启动 2 只小乌龟，第一只小乌龟自动跟上第二只小乌龟 ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py 通过键盘控制第一只小乌龟的移动 ros2 run turtlesim turtle_teleop_key 查看 TF 树 ros2 run tf2_tools view_frames.py evince frames.pdf 查看两个坐标系之间的关系 ros2 run tf2_ros tf2_echo [reference_frame] [target_frame] ros2 run tf2_ros tf2_echo turtle2 turtle1 在 rviz 上查看 TF 关系 ros2 run rviz2 rviz2 -d $(ros2 pkg prefix --share turtle_tf2_py)/rviz/turtle_rviz.rviz 2.8 URDF URDF 是统一机器人描述格式，用于在 ROS 中指定机器人的几何形状和组织结构。 具体参考资料：官方教程 部分代码示例 可以看出，urdf 文件并不复杂，主要由 \"link \"和 \"joint \"两部分组成，这两部分不断重复。 link 部分 link 元素描述了一个具有惯性、视觉特征和碰撞属性的刚体, 名字用于描述 link 本身的名称，内容如下： (可选的) 连杆的惯性特性 (可选，未指定时默认为身份) 定义惯性参考系相对于连杆坐标系的参考坐标。该坐标必须在连杆重心处定义，其坐标轴不得与惯性主轴平行。 xyz (可选，默认为零向量) 表示在 x、y、z x、y、zx、y、z 方向上的偏移量，单位为米。 rpy(可选：defaults to identity if not specified) 表示坐标轴沿 RPY 方向的旋转角度，单位为弧度。 连杆的质量特性 3×3 转动惯量矩阵，由六个独立量组成：ixx、ixx、ixz、iyy、iyz、izz。 (可选的) 连杆的视觉属性。它用于指定连杆显示的形状（矩形、圆柱形等）。同一连杆中可以有多个视觉元素，连杆的形状由两个元素构成。一般来说，模型比较复杂，可以通过 soildwork 绘制生成 stl 调用，简单的形状如添加末端效应器可以直接编写。同时，可以根据理论模型与实际模型的差距调整几何图形的位置。 (可选的) 连杆几何形状的名称。 (可选，未指定时默认为身份) 相对于连杆坐标系的几何坐标系。 xyz (可选：默认为零向量) 表示在 x、y、z x、y、zx、y、z 方向上的偏移量，单位为米。 rpy (可选：defaults to identity if not specified) 表示坐标轴沿 RPY 方向的旋转角度，单位为弧度。 （必需） 可视化的形状，可以是以下形状之一： 一个包含长、宽、高等元素的矩形。原点位于中心。 圆柱体，元素包括半径和长度。原点中心。 球体，包含半径的元素。原点位于中心。 由文件确定的网格还提供了一个比例尺来定义其边界。建议使用 Collada .dae 文件，也支持 .stl 文件，但必须是本地文件。 (可选) 可视化组件的材料。它可以在链接标记之外定义，但必须在机器人标记之内。在链接标记外定义时，链接名称必须加引号。 (可选) 颜色，由红/绿/蓝/α 组成，范围 [0,1]。 (可选) 材料属性，由文件定义。 (可选) 连杆的碰撞属性。碰撞属性不同于连杆的视觉属性，通常使用简单的碰撞模型来简化计算。同一连杆可以有多个碰撞属性标签，连杆的碰撞属性表示由其定义的一组几何图形组成。 (可选) 指定连杆几何形状的名称 (可选，defaults to identity if not specified) 碰撞组件的参考坐标系是相对于链接坐标系的参考坐标系而言的。 xyz (可选, 默认零向量) 表示在 x、y、z x、y、zx、y、z 方向上的偏移量，单位为米。 rpy (可选, defaults to identity if not specified) 表示坐标轴沿 RPY 方向的旋转角度，单位为弧度。 与上述几何元素描述相同 详细的元素和每个元素的作用可登录 官方文档 查看 joint 部分 关节(JOINT)部分描述了关节的运动学和动力学特性，并规定了关节的安全限制。名字是指定关节的唯一名称 类型： 指定接头类型，类型可以是以下之一： revolute - 沿轴线旋转的铰链关节，其范围由上下限指定。 棱柱形 Continuous - 连续铰接接头，可绕轴旋转，没有上下限。 固定 Prismatic - 沿轴滑动的滑动接头，其滑动范围由上下限规定。所有自由度都被锁定。这种关节不需要轴、校准、动力学、限值或安全控制器。 浮动 Floating - 该关节允许所有 6 个自由度的运动。 平面 Plane - 该关节允许在垂直于轴线的平面内运动。 关节要素： (可选，defaults to identity if not specified) 在从父链接到子链接的转换中，接头位于子链接的原点。修改该参数可以调整连杆的位置。可用于调整实际模型与理论模型之间的误差，但不建议大幅修改，因为该参数会影响连杆 stl 的位置，容易影响碰撞检测效果。 xyz (可选: 默认为零向量) 代表 x、y、z 轴方向的偏移量，单位为米。 rpy (可选: 默认为零向量) 表示绕固定轴的旋转角度：滚动绕 x 轴，俯仰绕 y 轴，偏航绕 z 轴，用弧度表示。 (必需) 父链接的名称是必填属性。 link父链接的名称是机器人结构树中链接的名称。 (必需) 子链接的名称是必填属性。 link子链接的名称是机器人结构树中链接的名称。 (可选: 默认为 (1,0,0)) 关节轴位于关节坐标系中。这是旋转轴（旋 转关节）、棱柱关节的运动轴和平面关节的标准平面。该轴在关节坐标系中指定。修改该参数可以调整关节绕其旋转的轴线。它通常用于调整旋转方向。如果模型旋转方向与实际旋转方向相反，只需乘以-1 即可。固定关节和浮动关节不需要这个元素。 xyz(必需)代表轴向量的 x , y , z x,y,zx,y,z 分量，为标准化的向量。 (可选) 关节的参考点，用于修正关节的绝对位置。 rising (可选) 当关节向前移动时，参考点会触发一个上升沿。 falling (可选) 当关节向前移动时，参考点触发下降沿。 (可选) 该元素用于指定接头的物理属性。其值用于描述接头的建模性能，尤其是在模拟过程中。 (当关节是旋转或平移关节时必需) 该元素是关节运动学约束。 lower (可选, 默认为 0) 指定关节运动范围下限的属性（旋转关节的单位是弧度，棱柱关节的单位是米）。连续关节忽略该属性。 upper (可选, 默认为 0) 指定关节运动范围上限的属性（旋转关节的单位是弧度，棱柱关节的单位是米）。连续关节忽略该属性。 effort (必需) 该属性指定了接头运行时的最大力。 velocity (必需) 该属性指定了联合运行时的最大速度。 (可选) 该标签用于指定一个已定义的 joint，以模仿现有 joint。该 joint 的值可通过以下公式计算： value = multiplier * other_joint_value + offset joint(必需) 要模仿的关节名称。 multiplier(可选) 指定上述公式中的乘数系数。 offset(可选) 指定上述公式中的偏移项。默认值为 0 (可选) 该元素是安全控制限制。该元素下的数据将被读入 move_group，但实际上是无效的。Move_group 会跳过此限制，直接读取限制下的参数内容。同时，设置该元素可能会导致规划失败。 soft_lower_limit (可选, 默认为 0) 此属性指定联合安全控制边界的下限，即联合安全控制的起始限制点。该值必须大于上述限制的下限值。 soft_upper_limit (可选, 默认为 0) 该属性指定联合安全控制边界的上限，即联合安全控制的起始限制点。该值必须小于上述限制的上限值。 k_position(可选, 默认为 0) 该属性用于描述位置和速度之间的关系。 k_velocity(必需) 这一特性用于描述力和速度之间的关系。 详细的元素和每个元素的作用可以到 http://wiki.ros.org/urdf/XML/joint查看。 安装依赖库 sudo apt install ros-foxy-joint-state-publisher-gui ros-foxy-joint-state-publisher sudo apt install ros-foxy-xacro 下载源代码 cd ~/dev_ws git clone -b ros2 https://github.com/ros/urdf_tutorial.git src/urdf_tutorial 编译源代码 colcon build --packages-select urdf_tutorial 运行示例 ros2 launch urdf_tutorial display.launch.py model:=urdf/01-myfirst.urdf 2.9 Launch ROS 2 中的启动系统负责帮助用户描述其系统的配置，然后按描述执行。系统配置包括运行哪些程序、在哪里运行、传递哪些参数，以及 ROS 特有的约定，通过为每个组件提供不同的配置，可以方便地在整个系统中重复使用组件。此外，它还负责监控已启动进程的状态，并对这些进程的状态变化做出报告和/或反应。 用 Python、XML 或 YAML 编写的启动文件可以启动和停止不同的节点，并触发和执行各种事件。 具体参考资料：官方教程 设置 创建一个新目录来存储启动文件: mkdir launch 编写启动文件 让我们使用 turtlesim 软件包及其可执行文件制作一个 ROS 2 启动文件。如上所述 将完整代码复制并粘贴到 launch/turtlesim_mimic_launch.py 文件中： from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description(): return LaunchDescription([ Node( package='turtlesim', namespace='turtlesim1', executable='turtlesim_node', name='sim' ), Node( package='turtlesim', namespace='turtlesim2', executable='turtlesim_node', name='sim' ), Node( package='turtlesim', executable='mimic', name='mimic', remappings=[ ('/input/pose', '/turtlesim1/turtle1/pose'), ('/output/cmd_vel', '/turtlesim2/turtle1/cmd_vel'), ] ) ]) 运行 ros2 启动文件 要运行上文创建的启动文件，请进入之前创建的目录并运行以下命令： 语法格式为 ros2 launch cd launch ros2 launch turtlesim_mimic_launch.py 启动帮助 ros2 launch -h 运行节点 ros2 launch turtlesim multisim.launch.py 检查启动文件的参数 ros2 launch turtlebot3_fake_node turtlebot3_fake_node.launch.py -s ros2 launch turtlebot3_fake_node turtlebot3_fake_node.launch.py --show-arguments ros2 launch turtlebot3_bringup robot.launch.launch.py -s 运行带参数的启动文件 ros2 launch turtlebot3_bringup robot.launch.launch.py usb_port:=/dev/opencr 运行节点并调试 ros2 launch turtlesim turtlesim_node.launch.py -d 只有输出节点说明 ros2 launch turtlesim turtlesim_node.launch.py -p 运行部件 ros2 launch composition composition_demo.launch.py 2.10 Run run 用于运行单个节点、组件程序 运行帮助 ros2 run -h 运行节点 ros2 run turtlesim turtlesim_node 带参数运行节点 ros2 run turtlesim turtlesim_node --ros-args -r __node:=turtle2 -r __ns:=/ns2 运行组件容器 ros2 run rclcpp_components component_container 运行部件 ros2 run composition manual_composition 2.11 Package 软件包可以看作是 ROS 2 代码的容器。如果你想安装你的代码或与他人分享，那么你就需要将其整理成一个软件包。有了软件包，你就可以发布你的 ROS 2 作品，并允许他人轻松构建和使用。 ROS 2 中的软件包创建使用 ament 作为构建系统，使用 colcon 作为构建工具。您可以使用官方支持的 CMake 或 Python 创建软件包，当然也存在其他构建类型。 具体参考资料：官方教程 创建工作区 为每个新工作区创建一个新目录。名称并不重要，但最好能说明工作区的用途。我们选择 ros2_ws 作为 \"开发工作区 \"的目录名： mkdir -p ~/ros2_ws/src cd ~/ros2_ws/src pkg 帮助 ros2 pkg -h 功能包列表 ros2 pkg executable turtlesim 输出功能包执行程序 ros2 pkg executable turtlesim 创建 Python 软件包 运行软件包创建命令前，请确保您已进入 src 文件夹。 cd ~/ros2_ws/src 在 ROS 2 中创建新软件包的命令语法是 ros2 pkg create --build-type ament_python # 你将使用可选参数 --node-name 在软件包中创建一个简单的 Hello World 类型的可执行文件。 ros2 pkg create --build-type ament_python --node-name my_node my_package 构建软件包 将软件包放在工作区中尤为重要，因为通过在工作区根目录下运行 colcon build，可以一次性构建多个软件包。否则，您将不得不单独构建每个软件包。 # 返回工作区的根目录： cd ~/ros2_ws # 现在，您可以构建软件包了： colcon build 获取设置文件 要使用新软件包和可执行文件，首先要打开一个新终端，并将 ROS 2 的主安装程序作为源代码。 然后，在 ros2_ws 目录下运行以下命令，获取工作区的源代码： source install/setup.bash 现在工作区已添加到路径中，您就可以使用新软件包的可执行文件了。 Use the package 要运行创建软件包时使用 --node-name 参数创建的可执行文件，请输入命令： ros2 run my_package my_node ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.3-ROS2/6.3.3-RVIZ2_Introduction.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.3-ROS2/6.3.3-RVIZ2_Introduction.html","title":"6.3.3 Rviz2 使用","keywords":"","body":"rviz2 简介和使用 Rviz2 是一种可视化工具，用于显示机器人环境中的信息，提供三维视角来查看机器人的状态和活动。它可以帮助开发人员更好地了解机器人的当前状态和活动，以及其他可视化信息。Rviz2 提供了一系列可视化工具，可以帮助开发人员更好地了解机器人的状态和活动，如可视坐标系、激光扫描信息、点云信息、机器人模型等。使用 Rviz2 可以轻松查看和调试机器人系统，从而更好地实现机器人目标。 1 rviz2 简介 ros2 安装成功表明 rviz2 也一起安装成功，因为 ros2 的安装包括 rviz2。 打开一个新终端 (快捷键Ctrl+Alt+T)输入命令打开 rviz2 ros2 run rviz2 rviz2 # 或 rviz2 打开 rviz2 并显示以下界面： 各领域介绍 左侧是监视器列表，监视器是在 3D 世界中绘制某样东西的东西，在显示列表中可能有一些可用的选项。包括添加、删除、复制、重命名插件、显示插件和设置插件属性等功能。 上面是工具栏，用户可以使用各种功能按钮选择具有多种功能的工具 中间部分是三维视图：这是一个主屏幕，在这里可以以三维方式查看各种数据。三维视图的背景颜色、固定框架、网格等可以在左侧显示的全局选项和网格项目中进行详细设置。 下面是时间显示区域，包括系统时间和 ROS 时间。 右侧为观察角度设置区，可设置不同的观察角度。 我们在这一部分只做了粗略的介绍。如果您想了解更详细的内容，可以访问 用户指南 查看。 2 使用简单 本示例基于以下事实：您已完成 环境设置 并成功从 GitHub 复制了公司代码。 打开一个新终端 (快捷键 Ctrl+Alt+T)输入以下命令配置 ROS2 环境。 cd ~/colcon_ws/ colcon build --symlink-install source install/setup.bash 再次输入： ros2 launch mycobot_pro_450 test.launch.py 打开 rviz2，得到如下结果： 如果您想了解有关 rviz 的更多信息，可以访问 官方文档 查看。 ← 上一页 | 下一页 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.3-ROS2/6.3.4-Basic_Functions.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.3-ROS2/6.3.4-Basic_Functions.html","title":"6.3.4 基本功能案例","keywords":"","body":"控制机械臂 注意：pymycobot 驱动库的版本必须大于4.0.0， Moveit2仅支持 ROS2 Humble版本，请使用对应分支的代码运行 1 滑块控制 --> 打开命令行并运行： # Pro450 默认ip地址为\"192.168.0.232\"，端口号为 4500。 ros2 launch mycobot_pro_450 slider_control.launch.py # 如果末端配有myGripper F100 力控夹爪，则运行： ros2 launch mycobot_pro_450 slider_control_force_gripper.launch.py 它会打开 rviz2 和一个滑块组件，你会看到类似下面的内容： 如果末端装有myGripper F100 力控夹爪，则会看到以下界面： 然后，您可以在 rviz2 中通过拖动滑块来控制模型的移动。真实的 mycobot 机器人也会随之移动。 请注意：由于在命令输入的同时机械臂会移动到模型目前的位置，在您使用命令之前请确保 rviz 中的模型没有出现穿模现象 不要在连接机械臂后做出快速拖动滑块的行为，防止机械臂损坏 2 模型跟随 除了上面的控制，我们也可以让模型跟随真实的机械臂运动。 --> 打开一个命令行运行： # Pro450 默认ip地址为\"192.168.0.232\"，端口号为 4500。 ros2 launch mycobot_pro_450 mycobot_follow.launch.py 运行成功后，机械臂所有关节处于释放状态。它将打开 rviz 以显示模型跟随效果 。此时拖动真实机械臂关节，仿真模型将会跟随真实机械臂运动。 运行成功后，需要同时按住机器末端按钮才能拖拽关节移动，终端输出信息如下： [INFO] [launch]: Default logging verbosity is set to INFO [INFO] [robot_state_publisher-1]: process started with pid [12048] [INFO] [follow_display-2]: process started with pid [12050] [INFO] [rviz2-3]: process started with pid [12052] [robot_state_publisher-1] Parsing robot urdf xml string. [robot_state_publisher-1] Link link1 had 1 children [robot_state_publisher-1] Link link2 had 1 children [robot_state_publisher-1] Link link3 had 1 children [robot_state_publisher-1] Link link4 had 1 children [robot_state_publisher-1] Link link5 had 1 children [robot_state_publisher-1] Link link6 had 0 children [robot_state_publisher-1] [INFO] [1757408024.256520696] [robot_state_publisher]: got segment base [robot_state_publisher-1] [INFO] [1757408024.256679159] [robot_state_publisher]: got segment link1 [robot_state_publisher-1] [INFO] [1757408024.256692374] [robot_state_publisher]: got segment link2 [robot_state_publisher-1] [INFO] [1757408024.256697373] [robot_state_publisher]: got segment link3 [robot_state_publisher-1] [INFO] [1757408024.256701681] [robot_state_publisher]: got segment link4 [robot_state_publisher-1] [INFO] [1757408024.256705999] [robot_state_publisher]: got segment link5 [robot_state_publisher-1] [INFO] [1757408024.256710327] [robot_state_publisher]: got segment link6 [rviz2-3] [INFO] [1757408024.565241287] [rviz2]: Stereo is NOT SUPPORTED [rviz2-3] [INFO] [1757408024.565493504] [rviz2]: OpenGl version: 3.1 (GLSL 1.4) [rviz2-3] [INFO] [1757408024.647227371] [rviz2]: Stereo is NOT SUPPORTED [follow_display-2] [INFO] [1757408024.783281010] [follow_display]: ip:192.168.0.232, port:4500 [rviz2-3] Parsing robot urdf xml string. [follow_display-2] [INFO] [1757408024.905252117] [follow_display]: Please press the button at the end of the machine to drag the joint. [follow_display-2] [INFO] [1757408024.905252117] [follow_display]: 请按下机器末端按钮进行关节拖拽运动. [follow_display-2] [INFO] [1757408024.937815658] [follow_display]: Publishing ... 3 GUI 控制 在前者的基础上，本软件包还提供了一个简单的图形用户界面控制接口。这种方法意味着真正的机械臂是相互连接的，请连接到 mycobot。 --> 打开命令行： # Pro450 默认ip地址为\"192.168.0.232\"，端口号为 4500。 ros2 launch mycobot_pro_450 simple_gui.launch.py # 如果末端配有myGripper F100 力控夹爪，则运行： ros2 launch mycobot_pro_450 simple_gui_force_gripper.launch.py 如果末端装有myGripper F100 力控夹爪，则会看到以下界面： 运行成功后，终端信息输出如下： [INFO] [launch]: Default logging verbosity is set to INFO [INFO] [robot_state_publisher-1]: process started with pid [17196] [INFO] [rviz2-2]: process started with pid [17198] [INFO] [listen_real_service-3]: process started with pid [17200] [INFO] [simple_gui-4]: process started with pid [17202] [robot_state_publisher-1] Parsing robot urdf xml string. [robot_state_publisher-1] Link link1 had 1 children [robot_state_publisher-1] Link link2 had 1 children [robot_state_publisher-1] Link link3 had 1 children [robot_state_publisher-1] Link link4 had 1 children [robot_state_publisher-1] Link link5 had 1 children [robot_state_publisher-1] Link link6 had 0 children [robot_state_publisher-1] [INFO] [1757414162.529535554] [robot_state_publisher]: got segment base [robot_state_publisher-1] [INFO] [1757414162.530006477] [robot_state_publisher]: got segment link1 [robot_state_publisher-1] [INFO] [1757414162.530445098] [robot_state_publisher]: got segment link2 [robot_state_publisher-1] [INFO] [1757414162.530788098] [robot_state_publisher]: got segment link3 [robot_state_publisher-1] [INFO] [1757414162.531159021] [robot_state_publisher]: got segment link4 [robot_state_publisher-1] [INFO] [1757414162.531476222] [robot_state_publisher]: got segment link5 [robot_state_publisher-1] [INFO] [1757414162.531788353] [robot_state_publisher]: got segment link6 [listen_real_service-3] [INFO] [1757414163.139592125] [listen_real_service]: ip:192.168.0.232, port:4500 [rviz2-2] [INFO] [1757414163.306409248] [rviz2]: Stereo is NOT SUPPORTED [rviz2-2] [INFO] [1757414163.306709577] [rviz2]: OpenGl version: 3.1 (GLSL 1.4) [rviz2-2] [INFO] [1757414163.372621603] [rviz2]: Stereo is NOT SUPPORTED [rviz2-2] Parsing robot urdf xml string. 然后在GUI界面输入相关角度和坐标信息，点击对应按钮，即可实现真实机器与仿真模型的同步运动 注意： 使用夹爪开关按钮前，请确保自适应夹爪已连接至机器人手臂末端。 4 键盘控制 在 mycobot_pro_450 包中添加了键盘控制功能，并在 rviz2 中实时同步。 该功能依赖于 pythonApi，因此请确保与真正的机械臂连接。 --> 打开命令行并运行： # Pro450 默认ip地址为\"192.168.0.232\"，端口号为 4500。 ros2 launch mycobot_pro_450 teleop_keyboard.launch.py # 如果末端配有myGripper F100 力控夹爪，则运行： ros2 launch mycobot_pro_450 teleop_keyboard_force_gripper.launch.py 运行效果如下： 如果末端装有myGripper F100 力控夹爪，则会看到以下界面： 命令行中将会输出 mycobot 信息，如下： [INFO] [launch]: Default logging verbosity is set to INFO [INFO] [robot_state_publisher-1]: process started with pid [13684] [INFO] [rviz2-2]: process started with pid [13686] [INFO] [listen_real_service-3]: process started with pid [13688] [robot_state_publisher-1] Parsing robot urdf xml string. [robot_state_publisher-1] Link link1 had 1 children [robot_state_publisher-1] Link link2 had 1 children [robot_state_publisher-1] Link link3 had 1 children [robot_state_publisher-1] Link link4 had 1 children [robot_state_publisher-1] Link link5 had 1 children [robot_state_publisher-1] Link link6 had 0 children [robot_state_publisher-1] [INFO] [1757409378.488848950] [robot_state_publisher]: got segment base [robot_state_publisher-1] [INFO] [1757409378.489029099] [robot_state_publisher]: got segment link1 [robot_state_publisher-1] [INFO] [1757409378.489038676] [robot_state_publisher]: got segment link2 [robot_state_publisher-1] [INFO] [1757409378.489043355] [robot_state_publisher]: got segment link3 [robot_state_publisher-1] [INFO] [1757409378.489047552] [robot_state_publisher]: got segment link4 [robot_state_publisher-1] [INFO] [1757409378.489051760] [robot_state_publisher]: got segment link5 [robot_state_publisher-1] [INFO] [1757409378.489055988] [robot_state_publisher]: got segment link6 [rviz2-2] [INFO] [1757409378.801155196] [rviz2]: Stereo is NOT SUPPORTED [rviz2-2] [INFO] [1757409378.801390966] [rviz2]: OpenGl version: 3.1 (GLSL 1.4) [rviz2-2] [INFO] [1757409378.860460962] [rviz2]: Stereo is NOT SUPPORTED [listen_real_service-3] [INFO] [1757409379.155013599] [listen_real_service]: ip:192.168.0.232, port:4500 [rviz2-2] Parsing robot urdf xml string. 接下来，打开另一个 命令行： ros2 run mycobot_pro_450 teleop_keyboard 您将在终端看到以下输出： Mycobot Teleop Keyboard Controller --------------------------- Movimg options(control coordinations [x,y,z,rx,ry,rz]): w(x+) a(y-) s(x-) d(y+) z(z-) x(z+) u(rx+) i(ry+) o(rz+) j(rx-) k(ry-) l(rz-) +/- : Increase/decrease movement step size Force Gripper control: g - open h - close Other: 1 - Go to init pose 2 - Go to home pose 3 - Resave home pose q - Quit currently: speed: 50 change percent: 5 在该终端中，您可以通过命令行中的按键控制机械臂的状态并移动机械臂。 注意：先输入2机械臂回到起始点之后，再进行其他坐标控制操作，终端会有如下提示： [WARN] [1758001794.385321]: Coordinate control disabled. Please press '2' first. [INFO] [1758001804.552778]: Home pose reached. Coordinate control enabled. [INFO] [1758001817.069637]: Home pose reached. Coordinate control enabled. [WARN] [1758001836.301070]: Returned to zero. Press '2' to enable coordinate control. [WARN] [1758001848.830702]: Coordinate control disabled. Please press '2' first. [INFO] [1758001863.383565]: Home pose reached. Coordinate control enabled. [WARN] [1758001933.596504]: Returned to zero. Press '2' to enable coordinate control. [WARN] [1758001942.051899]: Coordinate control disabled. Please press '2' first. 5 moveit2 使用 注意： Moveit2仅支持 ROS2 Humble版本，请使用对应分支的代码运行。 mycobot_ros2 整合了 MoveIt 部分。 打开命令行并运行： ros2 launch pro450_moveit2 demol.launch.py 运行效果如下： 终端将输出如下信息，代表成功启动moveit： [move_group-3] You can start planning now! [move_group-3] [ros2_control_node-5] [INFO] [1757486383.454753341] [controller_manager]: Loading controller 'joint_state_broadcaster' [rviz2-4] [INFO] [1757486383.456108372] [rviz2]: Stereo is NOT SUPPORTED [spawner-7] [INFO] [1757486383.502228729] [spawner_joint_state_broadcaster]: Loaded joint_state_broadcaster [spawner-6] [INFO] [1757486383.564310311] [spawner_arm_group_controller]: Configured and activated arm_group_controller [rviz2-4] Warning: class_loader.impl: SEVERE WARNING!!! A namespace collision has occurred with plugin factory for class rviz_default_plugins::displays::InteractiveMarkerDisplay. New factory will OVERWRITE existing one. This situation occurs when libraries containing plugins are directly linked against an executable (the one running right now generating this message). Please separate plugins out into their own library or just don't link against the library and use either class_loader::ClassLoader/MultiLibraryClassLoader to open. [rviz2-4] at line 253 in /opt/ros/humble/include/class_loader/class_loader/class_loader_core.hpp [ros2_control_node-5] [INFO] [1757486383.610227041] [controller_manager]: Configuring controller 'joint_state_broadcaster' [ros2_control_node-5] [INFO] [1757486383.610628892] [joint_state_broadcaster]: 'joints' or 'interfaces' parameter is empty. All available state interfaces will be published [spawner-7] [INFO] [1757486383.736878229] [spawner_joint_state_broadcaster]: Configured and activated joint_state_broadcaster [INFO] [spawner-6]: process has finished cleanly [pid 100700] [INFO] [spawner-7]: process has finished cleanly [pid 100703] [rviz2-4] [ERROR] [1757486386.668318057] [moveit_ros_visualization.motion_planning_frame]: Action server: /recognize_objects not available [rviz2-4] [INFO] [1757486386.684028956] [moveit_ros_visualization.motion_planning_frame]: MoveGroup namespace changed: / -> . Reloading params. [rviz2-4] [INFO] [1757486386.975209646] [moveit_rdf_loader.rdf_loader]: Loaded robot model in 0.105952 seconds [rviz2-4] [INFO] [1757486386.975348906] [moveit_robot_model.robot_model]: Loading robot model 'firefighter'... [rviz2-4] [INFO] [1757486387.253639370] [moveit_ros.planning_scene_monitor.planning_scene_monitor]: Starting planning scene monitor [rviz2-4] [INFO] [1757486387.255326862] [moveit_ros.planning_scene_monitor.planning_scene_monitor]: Listening to '/monitored_planning_scene' [rviz2-4] [INFO] [1757486387.353487213] [interactive_marker_display_104041531794736]: Connected on namespace: /rviz_moveit_motion_planning_display/robot_interaction_interactive_marker_topic [rviz2-4] [INFO] [1757486387.358813947] [moveit_ros_visualization.motion_planning_frame]: group arm_group [rviz2-4] [INFO] [1757486387.358844123] [moveit_ros_visualization.motion_planning_frame]: Constructing new MoveGroup connection for group 'arm_group' in namespace '' [rviz2-4] [INFO] [1757486387.372219842] [move_group_interface]: Ready to take commands for planning group arm_group. [rviz2-4] [INFO] [1757486387.404744042] [interactive_marker_display_104041531794736]: Sending request for interactive markers [rviz2-4] [INFO] [1757486387.463143847] [interactive_marker_display_104041531794736]: Service response received for initialization 基本路径规划操作如下： 如果想让真正的机械臂同步执行计划，则需要打开另一个命令行并运行： # Pro450 默认ip地址为\"192.168.0.232\"，端口号为 4500。 ros2 run pro450_moveit2_control sync_plan 修改运动速度 为了防止关节在实际机械臂运动过程中晃动，需要降低关节的运动速度。 在sync_plan.py文件中，修改机械臂 Python API 的速度参数，此处改为 25。 注意： 修改速度之后，需要重新编译才能生效: cd ~/colcon_ws source install/setup.bash ... def listener_callback(self, msg): \"\"\"Callback to process received joint states. Converts joint positions from radians to degrees, rearranges them according to the RViz order, and sends them to the robot. Args: msg (JointState): The message containing joint names and positions. \"\"\" # Create a mapping of joint names to their position values joint_state_dict = {name: msg.position[i] for i, name in enumerate(msg.name)} # Rearrange joint angles according to RViz order data_list = [] for joint in self.rviz_order: if joint in joint_state_dict: radians_to_angles = round( math.degrees(joint_state_dict[joint]), 2) data_list.append(radians_to_angles) self.get_logger().info(f'joint_angles: {data_list}') self.mycobot_450.send_angles(data_list, 25) ... 在 Moveit RViz 界面中，修改速度和加速度的缩放比例。在这里，将其改为 0.1，然后保存当前配置。 ← 上一页 | 下一节 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.4-Cplus/README1.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.4-Cplus/README1.html","title":"6.4 基于C++ 开发使用","keywords":"","body":"正在编写中 ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/6-SoftwareDevelopment/6.5-CommunicationProtocolPackage/6.5-communication1.html":{"url":"3-FunctionsAndApplications/6-SoftwareDevelopment/6.5-CommunicationProtocolPackage/6.5-communication1.html","title":"6.5 基于通信协议包开发","keywords":"","body":"正在编写中 ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/7-ExamplesRobotsUsing/":{"url":"3-FunctionsAndApplications/7-ExamplesRobotsUsing/","title":"7 成功案例","keywords":"","body":"正在编写中 ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/8-FilesDownload/":{"url":"3-FunctionsAndApplications/8-FilesDownload/","title":"8 配套资源","keywords":"","body":"第八章 配套资源 本章节将详细介绍产品的各类配套资源，旨在帮助用户全面了解和高效使用我们的产品。无论是产品资料、图纸、软件资料及源码，还是系统资料和宣传资料，我们都提供了详尽的信息和下载链接，以确保用户能够充分利用这些资源进行产品开发、操作和推广 产品资料下载 产品资料包括myCobot Pro 450机械臂的详细规格、技术参数和使用说明。此部分内容旨在帮助用户全面了解机械臂的性能和功能，确保在使用过程中获得最佳体验 产品图纸 产品图纸部分提供了myCobot Pro 450机械臂的详细3D图和2D图。这些图纸对于需要进行定制化设计或进行维护的工程人员来说尤为重要，可以帮助他们更好地理解机械臂的构造。 软件资料及源码 软件资料及源码部分包含与myCobot Pro 450机械臂配套的软件安装包、驱动程序及相关的开源代码。用户可以通过这些资料进行软件安装、升级及二次开发，提升机械臂的功能和应用场景 系统资料 系统资料提供了myCobot Pro 450机械臂的系统架构和工作原理说明，涵盖硬件和软件的协同工作方式。此部分有助于用户在集成和调试过程中，快速定位和解决问题，确保系统稳定运行 (资料有待更新) 宣传资料 宣传资料部分包含myCobot Pro 450机械臂的产品宣传册、展示视频及客户案例。这些资料不仅展示了机械臂的核心优势和应用场景，还提供了实际应用中的成功案例，帮助潜在客户更直观地了解产品的价值。 ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/8-FilesDownload/8.1-ProductInformation/":{"url":"3-FunctionsAndApplications/8-FilesDownload/8.1-ProductInformation/","title":"8.1 产品资料","keywords":"","body":"产品资料下载 产品资料包括myCobot Pro 450机械臂的详细规格、技术参数和使用说明。此部分内容旨在帮助用户全面了解机械臂的性能和功能，确保在使用过程中获得最佳体验 下载链接 你可以通过以下链接下载所有相关的产品资料：产品资料下载 ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/8-FilesDownload/8.2-ProductDrawings/":{"url":"3-FunctionsAndApplications/8-FilesDownload/8.2-ProductDrawings/","title":"8.2 产品图纸","keywords":"","body":"产品图纸 产品图纸部分提供了myCobot Pro 450机械臂的详细3D图和2D图。这些图纸对于需要进行定制化设计或进行维护的工程人员来说尤为重要，可以帮助他们更好地理解机械臂的构造。 机器3D模型 机器 3D模型文件 myCobot Pro 450 下载 机器2D图纸 机器 机器2D图纸 myCobot Pro 450 下载 配件3D模型 myCobot 系列 配件 3D模型文件 自适应夹爪 下载 力控夹爪 下载 气动夹爪 下载 手机支架 下载 3D相机 下载 独头吸泵 下载 模块化吸盘 下载 摄像头法兰 下载 笔夹持器 下载 ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/8-FilesDownload/8.3-SystemInformation/":{"url":"3-FunctionsAndApplications/8-FilesDownload/8.3-SystemInformation/","title":"8.3 系统资料","keywords":"","body":"系统资料 系统资料提供了myCobot Pro 450机械臂的系统架构和工作原理说明，涵盖硬件和软件的协同工作方式。此部分有助于用户在集成和调试过程中，快速定位和解决问题，确保系统稳定运行 ← 上一章 | 下一章 → "},"3-FunctionsAndApplications/8-FilesDownload/8.4-PromotionalMaterials/":{"url":"3-FunctionsAndApplications/8-FilesDownload/8.4-PromotionalMaterials/","title":"8.4 宣传资料","keywords":"","body":"宣传资料 宣传资料部分包含myCobot Pro 450机械臂的产品宣传册、展示视频及客户案例。这些资料不仅展示了机械臂的核心优势和应用场景，还提供了实际应用中的成功案例，帮助潜在客户更直观地了解产品的价值。 机器 产品画册 myCobot Pro 450 下载 产品开箱视频 ! 视频正在制作中 --> 产品宣传视频 ! 视频正在制作中 --> 用户案例 ! 视频正在制作中 --> ← 上一章 | 下一章 → "},"4-SupportAndService/9-AboutUs/9.AboutUs.html":{"url":"4-SupportAndService/9-AboutUs/9.AboutUs.html","title":"9 关于我们","keywords":"","body":"大象机器人 1. 公司介绍 大象机器人(Elephant Robotics)立足于中国·深圳，是一家专注于机器人研发设计及自动化解决方案的高新科技企业。 我们致力于为机器人教育及科研机构、商业场景、工业生产提供高柔性的协作机器人、简单易学的操作系统以及智能的自动化解决方案。其产品质量及智慧方案备受韩国、日本、美国、德国、意大利、希腊等数家来自世界 500 强名企工厂的一致认可与好评。 大象机器人秉持“Enjoy Robots World”的愿景，倡导人与机器人的协同工作，让机器人成为人类工作生活的好帮手，帮助人们从简单、重复、枯燥的工作中解放出来，充分发挥人机协同优势，进而提高工作效率，帮助人类缔造美好新生活。 未来，大象机器人希望通过新一代尖端科技推动机器人产业发展，携手与客户伙伴们共同开启自动化智能化新时代。 2. 发展历程 2016.08 -----大象机器人有限公司正式成立 2016.08 -----进入 HAX 孵化器，获得 SOSV 种子轮投资 2016.08 ----- 开始研发 Elephant S 工业协作机器人 2017.01 -----获评 “CES 中国最具创新企业 Top10” 2017.04 -----出席汉诺威工业博览会及韩国自动化展览会 2017.07 -----两位创始人入选福布斯亚洲评选的“30 位 30 岁以下商业精英” 2017.10 -----第五代单臂工业协作机器人 Elephant S 问世 2018.04 -----获得”云天使基金”天使轮投资 2018.06 -----首次公开亮相 2018 年汉诺威世界工业博览会 2018.06 -----获得长江商学院“智造创业 MBA 奖” 2018.06 -----获得清华经管“创业加速器 X-elerator 奖” 2018.11 -----获得亚洲智能硬件大赛深圳赛区第二名 2018.11 -----获得高工金球奖“最具投资企业奖” 2019.03 -----获得高工金球奖“领军人物奖” 2019.04 -----2019 年 3 月 Catbot 获“工业机器人创新奖” 2019.09 -----出席华为欧洲生态大会(HCE)，正式成为华为生态伙伴一员 2019.11 -----大象机器人携手哈工大出席 IROS 国际智能机器人与系统大会 2019.12 -----大象机器人-华南理工大学“智能机器人联合开发实验室”正式揭牌 2019.12 -----荣获高工 2019 年度“创新技术奖” 2019.12 -----荣获高工 2019 年度“十大快速成长企业” 2019.12 -----荣获深圳装备工业-工业机器人细分领域-“新锐企业奖” 2019.12 -----世界首款仿生机器猫 MarsCat 问世 2020.05 -----创始人获得 2019 年度深圳市机器人新锐人物奖 2020.10 -----全球最轻最小的六轴协作机器人 myCobot 问世 2021.03 -----面向科研的最小协作机器人 myCobotPro 320 问世 2021.05 -----火星仿生猫 MarsCat 获得新华财经、中国日报、南京日报、哈尔滨日报等多家媒体的竞相报道 2021.07 -----发布最小的复合机器人底盘 – 小象移动机器人 myAGV 2021.09 -----全球首款全包裹式的四轴机械臂-小象码垛机械臂 myPalletizer 问世 3. 相关链接 购买链接 淘宝：https://shop504055678.taobao.com Shopify： https://shop.elephantrobotics.com/ 速卖通：https://elephantrobotics.aliexpress.com/store/1101941423其他信息 官网： https://www.elephantrobotics.com 视频 Bilibili： https://space.bilibili.com/2126215657 Youtube： https://www.youtube.com/c/Elephantrobotics Facebook： https://www.facebook.com/mycobotcreator/ Linkedin： https://www.linkedin.com/company/18319865 X (Twitter)： https://twitter.com/CobotMy Discord： https://discord.gg/2MAherp7nt Hackster： https://www.hackster.io/elephant-robotics 4. 联系我们 我们的工作时间为中国工作日，北京时间上午 10 点至下午 6 点。 如果您有任何其他问题，请通过以下方式联系我们。E-mail : support@elephantrobotics.com - 如果您有购买意向或任何参数问题，请发送电子邮件至此邮箱。 [E-mail](sales@elephantrobotics.com) : sales@elephantrobotics.com 如您在使用本产品的过程中遇到使用问题，请先阅读手册第九章，如果列出的问题无法帮助您解决，而您又有更多的售后问题，请向本邮箱发送电子邮件。E-mail : support@elephantrobotics.com 我们将在 1-2 个工作日内给予答复； 微信:我们只为通过微信购买 mycobot 系列产品的用户提供一对一服务。 ← 上一章 | 下一章 → "},"4-SupportAndService/10-Accessories/accessories.html":{"url":"4-SupportAndService/10-Accessories/accessories.html","title":"10 周边配件","keywords":"","body":"产品配件 在现实世界中，不同的配件能以各种方式增强机器人的能力。例如，夹爪、传感器和工具等配件可以帮助机器人执行各种任务，从而提高其多功能性和灵活性。 大象机器人致力于让每个人都能轻松使用机器人和这些配件，将用户从选择合适配件的复杂性中解放出来，使其能够迅速开始使用机器人。 配件类型 为了满足客户在不同场景下的需求，我们设计了各种类型的配件，包括夹爪、吸盘、摄像头模块和其他抓取装置，以便用户直接选择合适的末端执行器。 夹爪 力控夹爪 气动夹爪 自适应夹爪 吸泵 独头吸泵 模块化吸盘 夹持器 笔夹持器 手机夹持器 其余功能类配件 摄像头法兰 3D相机 ← 上一章 | 下一章 → "},"4-SupportAndService/10-Accessories/10.1-myGripperF100.html":{"url":"4-SupportAndService/10-Accessories/10.1-myGripperF100.html","title":"10.1 力控夹爪","keywords":"","body":"myGripper F100 力控夹爪 1 产品图片 2 规格参数说明 名称 myGripper F100 力控夹爪 材料 PC、PBT 尺寸 156X106X61mm 工艺技术 注塑 夹取范围 0-100毫米（默认指尖） 重复性精度 0.5 mm 使用寿命 30万次开合 驱动模式 电驱动 传动方式 齿轮+连杆 尺寸 158x105x55mm 重量 340 g 额定负载 500g 工作电压 24V 固定方法 螺丝固定 使用环境要求 常温常压 控制接口 RS485/IO 控制/按键控制 适用设备 ER myCobot 320系列,ER Mercury系列,ER myCobot Pro 600,ERmyCobot Pro 630,ER myCobot Pro 450,其他通用机器人 3 工作原理 在电机的驱动下，机械手的手指表面做直线往复运动，实现打开或关闭动作。通过设置夹持力矩，使工件的冲击最小，定位点可控，夹紧可控。 4 使用场景 实验操作：在科研实验中，完成试管、器皿等的抓取和移动，确保实验的安全和准确性。 教育演示：作为教学工具，帮助学生理解机器人抓取原理，培养实践能力。 物料搬运：在模拟生产线或仓储中，搬运各种规格的物料，提高工作效率。 5 安装方式 用螺丝和垫片将夹爪连接件安装到机械臂末端法兰 再用螺丝将夹爪安装在连接件上 最后用M8航空线将夹爪和机械臂就行连接 6 python控制方式 基于450末端IO 控制 基于IO控制的方式只能控制夹爪全开全合 from pymycobot import ElephantRobot import time mc=ElephantRobot(\"192.168.1.159\",5001) mc.start_client() def gripper_open(): mc.set_digital_out(16,0) mc.set_digital_out(17,1) def gripper_close(): mc.set_digital_out(16,1) mc.set_digital_out(17,0) if __name__==\"__main__\": gripper_open() time.sleep(2) gripper_close() time.sleep(2) 基于USB转485模块控制 注意：使用该方式控制夹爪，需要将连接夹爪的M8航空线的一端接到USB转485模块上。即M8航空线带插头的一端连接夹爪，一端连接USB转485模块和24V电源。 接线说明： 连接夹爪端的 24V，GND, 485_A(T/R+,485+) , 485_B(T/R-,485-)共 4 根线，电源为24V直流稳压电源或是630底部IO的24V，将模块的 USB 插口插入到电脑的 USB 接口 485A 接入 485 转 USB 模块 A+; 485B 接入 485 转 USB 模块 B-; 24V 接入 24V 直流稳压电源正极/630底部IO的24V; GND 接入 24V 直流稳压电源负极/630底部IO的GND 驱动库安装 点击下载驱动库 串口依赖库安装 在电脑终端执行下面命令，安装依赖库 pip install pyserial API说明 get_firmware_version() 功能: 获取夹爪固件主版本号 参数: 无 返回: (int)固件主版本号 get_modified_version() 功能: 获取夹爪固件次版本号 参数: 无 返回: (int)固件次版本号 get_gripper_Id() 功能: 获取夹爪ID 参数: 无 返回: (int)夹爪ID get_gripper_baud() 功能: 获取夹爪波特率 参数: 无 返回:(int) 0-5 0: 115200 1: 1000000 2: 57600 3: 19200 4: 9600 5: 4800 get_gripper_value() 功能: 获取夹爪的当前位置数据信息 参数: 无 返回: (int)夹爪的当前位置数据 get_gripper_status() 功能: 获取夹爪的当前状态 参数: 无 返回:(int) 0-3 0: 正在运动 1: 停止运动，未检测到夹到物体 2: 停止运动，检测到夹到了物体 3: 检测到夹到物体以后，物体掉落 get_gripper_speed() 功能: 获取夹爪的当前速度 参数: 无 返回: (int)夹爪的当前速度 get_gripper_P() 功能: 获取夹爪PID的P值 参数: 无 返回: (int)夹爪PID的P值 get_gripper_I() 功能: 获取夹爪PID的I值 参数: 无 返回: (int)夹爪PID的I值 get_gripper_D() 功能: 获取夹爪PID的D值 参数: 无 返回: (int)夹爪PID的D值 get_gripper_cw() 功能: 获取夹爪顺时针可运行误差 参数: 无 返回: (int)夹爪顺时针可运行误差 get_gripper_cww() 功能: 获取夹爪逆时针可运行误差 参数: 无 返回: (int)夹爪逆时针可运行误差 get_gripper_mini_pressure() 功能: 获取夹爪最小启动力 参数: 无 返回: (int)夹爪最小启动力 get_gripper_io_open_value() 功能: 获取夹爪Io张开角度 参数: 无 返回: (int)夹爪Io张开角度 get_gripper_io_close_value() 功能: 获取夹爪Io闭合角度 参数: 无 返回: (int)获取夹爪Io闭合角度 get_gripper_queue_count() 功能: 获取夹爪当前队列的数据量 参数: 无 返回: (int)夹爪当前队列的数据量 get_gripper_vir_pos() 功能: 获取夹爪舵机虚位数值 参数: 无 返回: (int)夹爪舵机虚位数值 get_gripper_protection_current() 功能: 获取夹爪夹持电流 参数: 无 返回: (int)夹爪夹持电流 set_gripper_Id(value) 功能: 设置夹爪ID号 参数: value: (int) 夹爪ID，取值范围 1-254 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_baud(value) 功能: 设置夹爪波特率 参数: value: (int) 夹爪波特率，取值范围 0-5 0: 115200 1: 1000000 2: 57600 3: 19200 4: 9600 5: 4800 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_enable(value) 功能: 设置夹爪使能状态 参数: value: (int) 使能状态，取值范围 0-1 0: 掉使能 1: 上使能 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_value(value,speed) 功能: 设置夹爪以指定的速度转动到指定的位置 参数: value: (int) 位置，取值范围 0-100 speed: (int) 速度，取值范围 1-100 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_calibration() 功能: 设置夹爪零位校准 参数: 无 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_P(value) 功能: 设置夹爪PID的P值 参数: value: (int) P值，取值范围 0-254 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_I(value) 功能: 设置夹爪PID的I值 参数: value: (int) I值，取值范围 0-254 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_D(value) 功能: 设置夹爪PID的D值 参数: value: (int) D值，取值范围 0-254 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_cw(value) 功能: 设置夹爪顺时针可运行误差 参数: value: (int) 误差，取值范围 0-16 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_cww(value) 功能: 设置夹爪逆时针可运行误差 参数: value: (int) 误差，取值范围 0-16 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_mini_pressure(value) 功能: 设置夹爪最小启动力 参数: value: (int) 最小启动力，取值范围 0-254 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_torque(value) 功能: 设置夹爪扭矩 参数: value: (int) 扭矩，取值范围 0-300 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_output(value) 功能: 设置夹爪IO 参数: value: (int) 夹爪IO，取值范围 0-3 0: out1 off,out2 off 1: out1 on,out2 off 2: out1 off,out2 on 3: out1 on,out2 on 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_io_open_value(value) 功能: 设置夹爪Io张开位置 参数: value: (int) 位置，取值范围 0-100 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_io_close_value(value) 功能: 设置夹爪Io闭合位置 参数: value: (int) 位置，取值范围 0-100 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_speed(speed) 功能: 设置夹爪速度 参数: speed: (int) 速度，取值范围 1-100 返回:(int) 0-1 0: 失败 1: 成功 set_abs_gripper_value(value,speed) 功能: 设置夹爪以指定的速度转动到指定的绝对位置 参数: value: (int) 位置，取值范围 1-100 speed: (int) 速度，取值范围 1-100 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_vir_pos(value) 功能: 设置夹爪舵机虚位数值 参数: value: (int) 虚位，取值范围 0-100 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_protection_current(value) 功能: 设置夹爪夹持电流 参数: value: (int) 虚位，取值范围 1-254 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_pause() 功能: 设置夹爪暂停运动 备注: 只对set_abs_gripper_value()生效 参数: 无 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_resume() 功能: 设置夹爪恢复运动 备注: 只对set_abs_gripper_value()生效 参数: 无 返回:(int) 0-1 0: 失败 1: 成功 set_gripper_stop() 功能: 设置夹爪停止运动，并清空消息队列 备注: 只对set_abs_gripper_value()生效 参数: 无 返回:(int) 0-1 0: 失败 1: 成功 案例程序 from elegripper import Gripper import time if __name__==\"__main__\": g=Gripper(\"COM27\",baudrate=115200,id=14)##填写实际的串口号和波特率和夹爪ID print(\"夹爪的实际ID为:\",g.get_gripper_Id()) print(g.set_gripper_value(100,100)) time.sleep(2) print(g.set_gripper_value(0,100)) time.sleep(2) ← 上一章 | 下一章 → "},"4-SupportAndService/10-Accessories/10.2-PneumaticGripper.html":{"url":"4-SupportAndService/10-Accessories/10.2-PneumaticGripper.html","title":"10.2 气动夹爪","keywords":"","body":"气动夹爪 兼容型号： myCobot 320、myCobot Pro 630、myCobot Pro 600、myCobot Pro 450 产品图片 规格 名称 mycobot 气动夹爪 模型 myCobotPro_Gripper_Air_10 材料 金属 + 7500 尼龙 夹取范围 0-8mm 夹紧力 外径 34N 内径 45N 驱动模式 气动 传输方式 活塞缸 尺寸 67.3×38×23.6mm 重量 180g 固定方法 螺丝固定 使用环境要求 常温常压 控制接口 输入/输出控制 适用设备 myCobot 320 系列、 myCobot Pro 630系列、 myCobot Pro 600系列、myCobot Pro 450 系列 用于抓取物体 引言 气动夹爪又称气动手指或气动夹钳，是一种利用压缩空气作为动力抓取或抓取工件的执行器。它体积小、重量轻、外形紧凑，能够实现单向和双向抓取、自动对中、高重复精度和自动控制磁性开关。 气动夹爪套件包括夹爪法兰、气泵、φ8 气管、φ6 气管、φ8-6 快速接头、电磁阀和电缆。其主要功能是代替人力抓取工作，可有效提高生产效率和工作安全性。需要外接吸气泵。 工作原理 单活塞：轴驱动曲柄，气爪由活塞驱动开合。两个爪片上分别布置有相应的曲柄槽。为减小摩擦阻力，爪片与机身之间采用钢珠滑轨结构连接。 双活塞：由两个活塞控制，每个活塞通过一个滚轮和一个双曲柄与一个气动指连接，形成一个特殊的驱动单元。需要注意的是，气动指始终向中心轴向移动，每个气动指不能独立移动。 平行钳形气缸：如果气动指朝相反方向移动，则先前被压缩的活塞处于排气状态，而另一个活塞处于压缩状态。 适用对象 体积小于夹紧行程 重量小于最大夹紧重量 自定义指尖可扩展更多用法 安装使用 需要配合空压机使用： 将黑色插头插入排插； 将搭配的红色软管插入机器上的接口： 红色按钮为开关，往外拔即打开，按回去则关闭机器： 夹爪安装： 将空压机红色软管的另一端接上电磁阀的接口： 将电磁阀另一端再拧开一个接口供启动夹爪控制开合使用： 用配套的两根透明软管，一端接在电磁阀的两个接口： 透明软管另一端接在夹爪的两个接口上： 用配套螺丝将夹爪固定在机械臂末端： 电气连接： 连接线黑色接机械臂底座 GND，红色接 OUT1~OUT6 任意一个，根据选择的接口更改后续程序的引脚号，这里使用 OUT1： 3 通过 python 控制 使用前需要先启动机器人系统 确认机械臂的IP地址：终端输入 ifconfig 获取 from pymycobot import ElephantRobot import time # 将ip更改成P600树莓派的实时ip elephant_client = ElephantRobot(\"192.168.10.158\", 5001) # 启动机器人必要指令 elephant_client.start_client() time.sleep(1) elephant_client.set_digital_out(0,1) time.sleep(2) elephant_client.set_digital_out(0,0) time.sleep(2) ← 上一章 | 下一章 → "},"4-SupportAndService/10-Accessories/10.3-AdaptiveGripper.html":{"url":"4-SupportAndService/10-Accessories/10.3-AdaptiveGripper.html","title":"10.3 自适应夹爪","keywords":"","body":"myCobotPro 自适应夹爪 兼容型号： myCobot 320、myCobot Pro 630、myCobot Pro 600、myCobot Pro 450 产品图片 规格 名称 myCobotPro 自适应抓取器 黑白款 材料 光敏树脂 + 尼龙 工艺技术 3D 打印 夹取范围 0-90 mm 夹紧力 1000 grams 驱动模式 电驱动 变速箱模式 齿轮+连接杆 尺寸 158x105x55mm 重量 350 grams 固定方法 螺丝固定 使用环境要求 常温常压 控制接口 串行端口/IO 控制 适用设备 myCobot 320 系列、 myCobot Pro 630、 myCobot Pro 600、myCobot Pro 450 用于抓取物体 引言 机械手是一种能像人手一样工作的机器人部件。它具有结构复杂、抓取物体牢固、不易掉落、操作简便等优点。 抓手套件包括抓手连接线和法兰，通过可编程系统控制机械臂的末端效应器，实现抓取物体和多点定位等功能。抓手可用于所有开发环境，如 ROS、Arduino、Roboflow 等。 工作原理 在电机的驱动下，机械手的手指表面做直线往复运动，实现打开或关闭动作。电动机械手的加减速可控，对工件的冲击最小，定位点可控，夹紧可控。 适用对象 小方块 小球 长条物体 安装使用 夹爪安装： 结构安装： 将垫片对准机械臂末端孔位，配合螺丝拧紧： 将夹爪的螺丝孔对准垫片四周的孔位，配合细螺丝拧紧： 电气连接： 注意在机械臂不上电的状态下进行，即末端绿灯不亮的情况下进行插拔，如果带电热插拔，会有损坏夹爪的风险。 将 m8 线对准机械臂的接口，注意接口处有缺口，连接线有对应突起，确认方向后插入，并拧紧： 插入夹爪控制接口，同样注意缺口的方向： python编程控制 需要先使用roboflow将机械臂使能，再运行下面的python脚本内容，测试夹爪是否正常 确认机械臂的IP地址：终端输入 ifconfig 获取 IO控制模式 from pymycobot import ElephantRobot import time # 将ip更改成P600树莓派的实时ip elephant_client = ElephantRobot(\"192.168.10.158\", 5001) # 启动机器人必要指令 elephant_client.start_client() time.sleep(1) elephant_client.set_gripper_mode(1) time.sleep(1) elephant_client.power_off()#夹爪透传换IO模式时需要先关闭机器再重启机器人一次，仅使用夹爪透传模式不必关闭机器人 elephant_client.power_off() time.sleep(3) elephant_client.state_off() time.sleep(3) elephant_client.power_on() time.sleep(3) elephant_client.state_on() time.sleep(3) elephant_client.set_digital_out(16, 0) # IO恢复低电平 time.sleep(1) elephant_client.set_digital_out(17, 0) # IO恢复低电平 time.sleep(1) # IO模式 #夹爪全开全闭合控制代码，注意在夹爪透传切换IO模式时需要先关闭机器再重启机器人一次，才能切换回夹爪IO模式 for i in range(3): elephant_client.set_digital_out(16, 1) # 闭合夹爪 time.sleep(1) elephant_client.set_digital_out(17, 0) # IO恢复低电平 time.sleep(1) elephant_client.set_digital_out(16, 0) #IO恢复低电平 time.sleep(1) elephant_client.set_digital_out(17, 1) # 打开夹爪 time.sleep(1) elephant_client.set_digital_out(16, 0) # IO恢复低电平 time.sleep(1) elephant_client.set_digital_out(17, 0) # IO恢复低电平 time.sleep(1) 透传模式 from pymycobot import ElephantRobot import time # 将ip更改成P600树莓派的实时ip elephant_client = ElephantRobot(\"192.168.10.158\", 5001) # 启动机器人必要指令 elephant_client.start_client() time.sleep(1) elephant_client.set_gripper_mode(0) time.sleep(1) # elephant_client.power_off()#夹爪透传换IO模式时需要先关闭机器再重启机器人一次，仅使用夹爪透传模式不必关闭机器人 elephant_client.state_off() time.sleep(3) elephant_client.power_on() time.sleep(3) elephant_client.state_on() time.sleep(3) #透传模式 for i in range(3): elephant_client.set_gripper_value(26,20) time.sleep(1) elephant_client.set_gripper_value(86,20) time.sleep(1) 夹爪零位校准 夹爪出厂时已做过零位校准，若夹爪的行程不对，可以按照下面操作进行校准 在roboflow先关闭机器人，手动将夹爪张开到最大 然后再启动机器人 然后再执行下面脚本 from pymycobot import ElephantRobot import time # 将ip更改成P600树莓派的实时ip elephant_client = ElephantRobot(\"192.168.10.158\", 5001) # 启动机器人必要指令 elephant_client.start_client() time.sleep(1) elephant_client.set_gripper_mode(0) time.sleep(1) elephant_client.set_gripper_calibrate() time.sleep(1) ← 上一章 | 下一章 → "},"4-SupportAndService/10-Accessories/10.4-PhoneHolderPro.html":{"url":"4-SupportAndService/10-Accessories/10.4-PhoneHolderPro.html","title":"10.4 手机支架","keywords":"","body":"myCobot Pro Mobile 手机支架 兼容型号: myCobot 600, myCobot Pro 630，myCobot Pro 450 产品图片 规格说明： 名称 myCobotPro手机夹持器 型号 myCobot_Pro_PhoneHolder_J6 材料 光敏树脂 夹持重量 200g 固定方式 螺丝固定 使用环境要求 常温常压 适用设备 myCobot 600、myCobot 630、myCobot Pro 450 myCobotPro手机夹持器： 夹取物体使用 简介 适用于拍摄等需要物理夹持的设备，可夹持多种手机，结构简单，易于安装拆卸。 适用物体 拍摄设备 安装 将手机夹持器固定在机械臂末端法兰即可 ← 上一章 | 下一章 → "},"4-SupportAndService/10-Accessories/10.5-3DCamera.html":{"url":"4-SupportAndService/10-Accessories/10.5-3DCamera.html","title":"10.5 3D相机","keywords":"","body":"正在编写中 ← 上一章 | 下一章 → "},"4-SupportAndService/10-Accessories/10.6-SingleSuctionPump.html":{"url":"4-SupportAndService/10-Accessories/10.6-SingleSuctionPump.html","title":"10.6 独头吸泵","keywords":"","body":"正在编写中 ← 上一章 | 下一章 → "},"4-SupportAndService/10-Accessories/10.7-ModuleSuctionCup.html":{"url":"4-SupportAndService/10-Accessories/10.7-ModuleSuctionCup.html","title":"10.7 模块化吸盘","keywords":"","body":"吸盘模块 兼容型号: myCobot 320、myCobot Pro 600、myCobot Pro 630、myCobot Pro 450 产品图片 规格说明 名称 模块吸盘 型号 myCobotPro_suctionPump 材料 尼龙 7100 吸盘数量 1/2/4 吸盘尺寸 直径 33mm 吸取重量 最大 1000g 动力源设备 吸吹一体空压机 固定方式 螺丝固定 控制接口 IO 控制 使用环境要求 常温常压 适用设备 myCobot 320、myCobot Pro 600、myCobot Pro 630、myCobot Pro 450 吸盘吸泵 :吸附物体使用 简介 吸盘吸泵是抽气口通过吸盘、管子等元件与待吸附物体连接，对吸盘抽真空，造成内部气压由常压变为负压，利用外界大气压和这个负压之间的压差作用，达到吸附住物体的目的。 整体结构是多功能可扩展吸盘，最多可安装 4 个；耐高压软管，可多次重复使用；吸吹一体空压机，可扩展其他功能。 工作原理 起动真空设备抽吸，使吸盘内产生负气压，从而将待提升物吸牢，即可开始搬送待提升物。 当待提升物搬送到目的地时，平稳地充气进真空吸盘内，使真空吸盘内由负气压变成零气压或稍为正的气压，真空吸盘就脱离待提升物,从而完成了提升搬送重物的任务。 适用物体 适用于带有平面物体 安装使用 需要配合空压机使用： 将黑色插头插入排插； 将搭配的红色软管插入机器上的接口： 红色按钮为开关，往外拔即打开，按回去则关闭机器： 吸盘安装： 将空压机红色软管的另一端接上电磁阀的接口： 用模块吸盘配套的透明软管分别接上电磁阀上方和模块吸盘软管分支的接口： 用配套螺丝将模块吸盘固定在机械臂末端： 将软管分支安装在模块吸盘上： 电气连接： 连接线黑色接机械臂底座 GND，红色接 OUT1~OUT6 任意一个，根据选择的接口更改后续程序的引脚号，这里使用 OUT1： 3 通过 python 控制 使用前需要先启动机器人系统 确认机械臂的IP地址：终端输入 ifconfig 获取 from pymycobot import ElephantRobot import time # 将ip更改成P600树莓派的实时ip elephant_client = ElephantRobot(\"192.168.10.158\", 5001) # 启动机器人必要指令 elephant_client.start_client() time.sleep(1) elephant_client.set_digital_out(0,1)#吸取 time.sleep(2) elephant_client.set_digital_out(0,0)#放开 time.sleep(2) ← 上一章 | 下一章 → "},"4-SupportAndService/10-Accessories/10.8-CameraModulePro.html":{"url":"4-SupportAndService/10-Accessories/10.8-CameraModulePro.html","title":"10.8 摄像头法兰","keywords":"","body":"myCobotPro 摄像头模块 兼容型号： myCobot 320, myCobot Pro 630、myCobot Pro 600、myCobot Pro 450 产品图片 规格说明： 名称 myCobotPro 摄像模组 型号 myCobot_Pro_cameraHolder_J6 材料 光敏树脂 USB 协议 USB2.0 HS/FS 镜头焦距 标配 1.7mm 视场角度 约 60° 支持的系统 Win7/8/10、Linux、MAC 固定方式 螺丝固定 使用环境要求 常温常压 适用设备 myCobot 320、myCobot Pro 600、myCobot Pro 630、myCobot Pro 450 摄像头法兰 : 机器视觉 简介 USB 高清摄像头可搭配吸泵、自适应夹爪、人工智能套装等，eye in hand 实现精确定位与标定。 安装使用 检查配件包东西是否齐全：螺丝及内六角扳手、带 usb 线的摄像头模组 摄像头安装： 结构安装： 将摄像头模组根据需要的方向对准机械臂末端，配合内六角扳手拧紧螺丝 电气连接： 将 USB 线插入底座 USB 接口： python编程控制 进入机器人系统，打开终端输入下列指令安装opencv sudo apt-get install -y libopencv-dev python3-opencv 新建一个python文件，填入以下代码 #encoding=utf-8 import cv2 import numpy as np cap = cv2.VideoCapture(0) while(True): ret, frame = cap.read() cv2.imshow('frame', frame) # 按下'q'退出 if cv2.waitKey(1) & 0xFF == ord('q'): break cap.release() cv2.destroyAllWindows() 然后在终端用python3 运行刚刚新建的python文件 ← 上一章 | 下一章 → "},"4-SupportAndService/10-Accessories/10.9-PenHolderPro.html":{"url":"4-SupportAndService/10-Accessories/10.9-PenHolderPro.html","title":"10.9 笔夹","keywords":"","body":"myCobot Pro 夹持器 兼容型号: myCobot 600、myCobot 630、myCobot Pro 450 产品图片 规格说明： 名称 myCobotPro 笔夹持器 型号 myCobot_Pro_penHolder_J6 材料 光敏树脂 固定方式 螺丝固定 使用环境要求 常温常压 适用设备 myCobot 600、myCobot 630、myCobot Pro 450 myCobotPro 笔夹持器： 使用机械臂写字画画时使用 简介 整体纯色设计，支持上下 15mm 超大行程伸缩，有效减少误差，可以用于写字、画画等应用。 适用物体 白板笔 安装使用 安装 将两颗短螺丝伸入夹持器孔位中,将笔固定住，注意笔头朝向： 使用内六角扳手将夹持器固定在机械臂末端： ← 上一章 | 下一章 → "},"5-Acknowledgments/11-Acknowledgements.html":{"url":"5-Acknowledgments/11-Acknowledgements.html","title":"11 致谢","keywords":"","body":"致谢 我们在这里表达我们对所有参与开发、测试和完善 myCobot 系列产品（包括 myCobot 280 pi、myCobot 280 M5、myCobot 280 JN、myCobot 280 For Arduino、myCobot Pro 450以及套件）的人员的深深感激。每一个细节的打磨和每一个功能的创新都离不开背后团队的辛勤工作和献身精神。 特别感谢： 研发团队：感谢你们的创新思维和无数个日夜的努力，将复杂的技术转化为用户友好的产品。质量保证与测试团队：你们对每一个细节的严格把控保证了我们产品的可靠性和用户的最终体验。客户支持团队：感谢你们为我们的用户提供专业的支持，帮助他们解决使用过程中的每一个问题。合作伙伴与供应商：你们的支持和服务对产品的成功至关重要。感谢你们的高质量原材料和部件，以及时刻准备支持的态度。投资者和顾问：没有你们的信任和资金支持，我们无法将这些创新带到市场。你们的洞察和指导也一直是我们前进的动力。 用户感谢： 我们特别感谢选择和信任 myCobot 系列产品的每一位用户。你们的反馈和建议是我们不断前进和改进的动力。我们承诺将继续倾听你们的声音，不断优化我们的产品和服务。 未来展望： 我们期待与所有的利益相关者一起，继续在机器人技术的道路上探索和进步。让我们携手创造更多的可能，为世界带来更大的便利和创新。 ← 上一章 "}}